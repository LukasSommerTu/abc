import java.util.*;

aspect Options {
  private static Map Program.options = new HashMap();
  private static Map Program.optionDescriptions = new HashMap();

  private static Set Program.files = new HashSet();
  public static Collection Program.files() {
    return files;
  }
 
  public static void Program.addOptionDescription(String name, boolean value) {
    if(optionDescriptions.containsKey(name))
      throw new Error("Command line definition error: option description for " + name + " is multiply declared");
    optionDescriptions.put(name, Boolean.valueOf(value));
  }

  public static void Program.addOptions(String[] args) {
    for(int i = 0; i < args.length; i++) {
      String arg = args[i];
      if(arg.startsWith("-")) {
        if(!optionDescriptions.containsKey(arg))
          throw new Error("Command line argument error: option " + arg + " is not defined");
        if(options.containsKey(arg))
          throw new Error("Command line argument error: option " + arg + " is multiply defined");
        
        boolean hasValue = ((Boolean)optionDescriptions.get(arg)).booleanValue();
        
        String value = null;
        if(hasValue) {
          if(i + 1 > args.length - 1)
            throw new Error("Command line argument error: value missing for key " + arg);
          value = args[i+1];
          if(value.startsWith("-"))
            throw new Error("Command line argument error: value missing for key " + arg);
          i++;
        }
        options.put(arg, value);
      }
      else {
        files.add(arg);
      }
    }
  }
  public static boolean Program.hasOption(String name) {
    return options.containsKey(name);
  }
  public static boolean Program.hasValueForOption(String name) {
    return options.containsKey(name) && options.get(name) != null;
  }
  public static String Program.getValueForOption(String name) {
    if(!hasValueForOption(name))
      throw new Error("Command line argument error: key " + name + " does not have a value");
    return (String)options.get(name);
  }
}
