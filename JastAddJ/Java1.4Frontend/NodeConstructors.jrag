aspect NodeConstructors {
  public ParameterDeclaration.ParameterDeclaration(Access type, String name) {
    this(new Modifiers(new List()), type, name);
  }

  public TypeAccess.TypeAccess(String typeName) {
    this(new List(), new IdUse(typeName));
  }
  public TypeAccess.TypeAccess(String packageName, String typeName) {
    String[] strings = packageName.split("\\.");
    List list = new List();
    for(int i = 0; i < strings.length; i++)
      list.add(new IdUse(strings[i]));
    setPackageList(list);
    setIdUse(new IdUse(typeName));
  }

  public SuperConstructorAccess.SuperConstructorAccess(List list, String name) {
    this(list, new IdUse(name));
  }

  public ThisAccess.ThisAccess(String name) {
    this(new IdUse(name));
  }
  public SuperAccess.SuperAccess(String name) {
    this(new IdUse(name));
  }

  public PackageAccess.PackageAccess(String name) {
    this(new List().add(new IdUse(name)));
  }
  public PackageOrTypeAccess.PackageOrTypeAccess(String name) {
    this(new IdUse(name));
  }
  public AmbiguousAccess.AmbiguousAccess(String name) {
    this(new IdUse(name));
  }

  public ParseName.ParseName(String name) {
    this(new IdUse(name));
  }

  public IntegerLiteral.IntegerLiteral(int i) {
    this(Integer.toString(i));
  }

  public BooleanLiteral.BooleanLiteral(boolean b) {
    this(b ? "true" : "false");
  }

  public VarAccess.VarAccess(String name) {
    this(new IdUse(name));
  }

  public MethodAccess.MethodAccess(String name, List args) {
    this(args, new IdUse(name));
  }

  public ReturnStmt.ReturnStmt(Expr expr) {
    this(new Opt(expr));
  }

  public IfStmt.IfStmt(Expr cond, Stmt thenBranch) {
    this(cond, thenBranch, new Opt());
  }

  public IfStmt.IfStmt(Expr cond, Stmt thenBranch, Stmt elseBranch) {
    this(cond, thenBranch, new Opt(elseBranch));
  }

  public VariableDeclaration.VariableDeclaration(Access type, String name, Expr init) {
    this(new Modifiers(new List()), type, name, new Opt(init));
  }

  public ClassInstanceExpr.ClassInstanceExpr(Access type, List args) {
    this(type, args, new Opt());
  }

  public FieldDeclaration.FieldDeclaration(Modifiers m, Access type, String name) {
    this(m, type, name, new Opt());
  }
  
  public FieldDeclaration.FieldDeclaration(Modifiers m, Access type, String name, Expr init) {
    this(m, type, name, new Opt(init));
  }

  public static Stmt AssignExpr.asStmt(Expr left, Expr right) {
    return new ExprStmt(new AssignSimpleExpr(left, right));
  }
}
