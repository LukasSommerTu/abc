aspect PrimitiveTypes {

  private boolean Program.initPrimTypes = false;
  
  public void Program.addPrimitiveTypes() {
    if(!initPrimTypes) {
      initPrimTypes = true;
    
    CompilationUnit u = new CompilationUnit();
    u.addPackageDecl(new IdDecl("primitive"));
    addCompilationUnit(u);

    String className;
    TypeDecl classDecl;
    
    className = "Unknown";
    classDecl = generateUnknownType(className);
    u.addTypeDecl(classDecl);
    TypeDecl unknown = classDecl;

    className = "boolean";
    classDecl = generatePrimitiveType(new BooleanType(), className, unknown);
    u.addTypeDecl(classDecl);
    
    className = "double";
    classDecl = generatePrimitiveType(new DoubleType(), className, unknown);
    u.addTypeDecl(classDecl);
    
    className = "float";
    classDecl = generatePrimitiveType(new FloatType(), className, classDecl);
    u.addTypeDecl(classDecl);
    
    className = "long";
    classDecl = generatePrimitiveType(new LongType(), className, classDecl);
    u.addTypeDecl(classDecl);
    
    className = "int";
    classDecl = generatePrimitiveType(new IntType(), className, classDecl);
    u.addTypeDecl(classDecl);
    TypeDecl intDecl = classDecl;
    
    className = "short";
    classDecl = generatePrimitiveType(new ShortType(), className, classDecl);
    u.addTypeDecl(classDecl);
    
    className = "byte";
    classDecl = generatePrimitiveType(new ByteType(), className, classDecl);
    u.addTypeDecl(classDecl);
    
    className = "char";
    classDecl = generatePrimitiveType(new CharType(), className, intDecl);
    u.addTypeDecl(classDecl);
    
    classDecl = new NullType();
    classDecl.setModifiers(new Modifiers(new List().add(new Modifier("public"))));
    classDecl.setIdDecl(new IdDecl("null"));
    u.addTypeDecl(classDecl);

    classDecl = new VoidType();
    classDecl.setModifiers(new Modifiers(new List().add(new Modifier("public"))));
    classDecl.setIdDecl(new IdDecl("void"));
    u.addTypeDecl(classDecl);

    className = "Illegal";
    classDecl = generateIllegalType(className);
    u.addTypeDecl(classDecl);

    }
  }

  public TypeDecl Program.generatePrimitiveType(PrimitiveType type, String name, TypeDecl superType) {
    type.setModifiers(new Modifiers(new List().add(new Modifier("public"))));
    type.setIdDecl(new IdDecl(name));
    if(superType != null)
      type.setSuperClassAccess(superType.createQualifiedAccess());
    return type;
  }

  private TypeDecl Program.generateUnknownType(String className) {
    ClassDecl classDecl = new UnknownType();
    classDecl.setModifiers(new Modifiers(new List().add(new Modifier("public"))));
    classDecl.setIdDecl(new IdDecl(className));
    MethodDecl methodDecl = new MethodDecl(
        new Modifiers(new List().add(
          new Modifier("public")
        )),
        new TypeAccess(
          new List(),
          new IdUse("Unknown")
        ),
        new IdDecl("unknown"),
        new List(),
        new List(),
        new List(),
        new Opt()
    );
    classDecl.addBodyDecl(methodDecl);
    FieldDeclaration fieldDecl = new FieldDeclaration(
        new Modifiers(new List().add(
          new Modifier("public")
        )),
        new TypeAccess(
          new List(),
          new IdUse("Unknown")
        ),
        new IdDecl("unknown"),
        new Opt()
    );
    classDecl.addBodyDecl(fieldDecl);   
    ConstructorDecl constrDecl = new ConstructorDecl(
      new Modifiers(new List().add(new Modifier("public"))),
      new IdDecl("Unknown"),
      new List(),
      new List(),
      new Opt(),
      new Block()
    );
    classDecl.addBodyDecl(constrDecl);
      
    return classDecl;
  }
  
  private TypeDecl Program.generateIllegalType(String className) {
    ClassDecl classDecl = new IllegalType();
    classDecl.setModifiers(new Modifiers(new List().add(new Modifier("public"))));
    classDecl.setIdDecl(new IdDecl(className));
    MethodDecl methodDecl = new MethodDecl(
        new Modifiers(new List().add(
          new Modifier("public")
        )),
        new TypeAccess(
          new List(),
          new IdUse("Illegal")
        ),
        new IdDecl("illegal"),
        new List(),
        new List(),
        new List(),
        new Opt()
    );
    classDecl.addBodyDecl(methodDecl);
    FieldDeclaration fieldDecl = new FieldDeclaration(
        new Modifiers(new List().add(
          new Modifier("public")
        )),
        new TypeAccess(
          new List(),
          new IdUse("Illegal")
        ),
        new IdDecl("illegal"),
        new Opt()
    );
    classDecl.addBodyDecl(fieldDecl);   
    return classDecl;
  }

}

