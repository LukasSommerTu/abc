
aspect ErrorCheck {

  //protected Collection ASTNode.errors = new LinkedList();
  protected String ASTNode.errors = null;
  
  protected void ASTNode.error(String s) {
    if(errors == null)
      errors = s;
    else
      errors = errors + "\n" + s;
    //errors.add(s);
  }

  protected boolean ASTNode.hasErrors() {
    return errors != null;
    //return !errors.isEmpty();
  }

  public void ASTNode.errorCheck(Collection collection) {
    nameCheck();
    typeCheck();
    accessControl();
    exceptionHandling();
    checkUnreachableStmt();
    definiteAssignment();
    checkModifiers();
    if(hasErrors())
      //collection.addAll(errors);
      collection.add(errors);
    for(int i = 0; i < getNumChild(); i++) {
      getChild(i).errorCheck(collection);
    }
  }

  public void Program.errorCheck(Collection collection, int num) {
    if(hasErrors())
      collection.add(errors);
      //collection.addAll(errors);
    for(int i = 0; i < num && i < getNumCompilationUnit(); i++)
      getCompilationUnit(i).errorCheck(collection);
  }
  
  public boolean Program.errorCheck(int num) {
    Collection collection = new LinkedList();
    errorCheck(collection, num);
    int err = 0;
    System.out.println("Errors:");
    for(Iterator iter = collection.iterator(); iter.hasNext(); ) {
      String s = (String)iter.next();
      System.out.println(s);
      if(!s.equals(""))
        err++;
    }
    return err > 0;
  }

}
