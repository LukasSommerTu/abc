aspect Variables {
  interface Variable {
    public String name();
    public TypeDecl type();
    // 4.5.3
    public boolean isClassVariable();
    public boolean isInstanceVariable();
    public boolean isMethodParameter();
    public boolean isConstructorParameter();
    public boolean isExceptionHandlerParameter();
    public boolean isLocalVariable();
    // 4.5.4
    public boolean isFinal();

    public boolean isBlank();
    public boolean isStatic();

    public TypeDecl hostType();

    public Expr getInit();
    public boolean hasInit();

    public Constant constant();
  }
  
  VariableDeclaration implements Variable;
  // 4.5.3
  syn boolean VariableDeclaration.isClassVariable() = false;
  syn boolean VariableDeclaration.isInstanceVariable() = false;
  syn boolean VariableDeclaration.isMethodParameter() = false;
  syn boolean VariableDeclaration.isConstructorParameter() = false;
  syn boolean VariableDeclaration.isExceptionHandlerParameter() = false;
  syn boolean VariableDeclaration.isLocalVariable() = true;
  // 4.5.4
  syn boolean VariableDeclaration.isFinal() = getModifiers().isFinal();
  syn boolean VariableDeclaration.isBlank() = !hasInit();
  syn boolean VariableDeclaration.isStatic() = false;
  
  syn String VariableDeclaration.name() = getIdDecl().getID();

  syn lazy Constant VariableDeclaration.constant() = getInit().constant();

  FieldDeclaration implements Variable;
  // 4.5.3
  syn boolean FieldDeclaration.isClassVariable() = isStatic() || hostType().isInterfaceDecl();
  syn boolean FieldDeclaration.isInstanceVariable() = (hostType().isClassDecl() || hostType().isAnonymous() )&& !isStatic();
  syn boolean FieldDeclaration.isMethodParameter() = false;
  syn boolean FieldDeclaration.isConstructorParameter() = false;
  syn boolean FieldDeclaration.isExceptionHandlerParameter() = false;
  syn boolean FieldDeclaration.isLocalVariable() = false;

  syn boolean FieldDeclaration.isBlank() = !hasInit();
  
  syn String FieldDeclaration.name() = getIdDecl().getID();
  syn lazy Constant FieldDeclaration.constant() = getInit().constant();

  ParameterDeclaration implements Variable;
  // 4.5.3
  syn boolean ParameterDeclaration.isClassVariable() = false;
  syn boolean ParameterDeclaration.isInstanceVariable() = false;
  inh boolean ParameterDeclaration.isMethodParameter();
  inh boolean ParameterDeclaration.isConstructorParameter();
  inh boolean ParameterDeclaration.isExceptionHandlerParameter();
  syn boolean ParameterDeclaration.isLocalVariable() = false;
  
  // 4.5.3
  eq ConstructorDecl.getParameter().isMethodParameter() = false;
  eq ConstructorDecl.getParameter().isConstructorParameter() = true;
  eq ConstructorDecl.getParameter().isExceptionHandlerParameter() = false;
  eq MethodDecl.getParameter().isMethodParameter() = true;
  eq MethodDecl.getParameter().isConstructorParameter() = false;
  eq MethodDecl.getParameter().isExceptionHandlerParameter() = false;
  eq CatchClause.getParameter().isMethodParameter() = false;
  eq CatchClause.getParameter().isConstructorParameter() = false;
  eq CatchClause.getParameter().isExceptionHandlerParameter() = true;
  
  // 4.5.4
  syn boolean ParameterDeclaration.isFinal() = getModifiers().isFinal();
  syn boolean ParameterDeclaration.isBlank() = true;
  syn boolean ParameterDeclaration.isStatic() = false;
  
  syn String ParameterDeclaration.name() = getIdDecl().getID();

  syn boolean ParameterDeclaration.hasInit() = false;
  syn Expr ParameterDeclaration.getInit() { throw new UnsupportedOperationException(); }
  syn Constant ParameterDeclaration.constant() { throw new UnsupportedOperationException(); }

  syn String Parameter.name() = getIdDecl().getID();
  syn String VariableDecl.name() = getIdDecl().getID();

}

aspect VariableDeclarationTransformation {

  // Transform Parameter -> ParameterDeclaration (dimension at type only)
  rewrite Parameter {
    when(!(this instanceof ParameterDeclaration))
    to Parameter new ParameterDeclaration(
          getModifiers(),
          getNumEmptyBracket() == 0 ? getTypeAccess() : 
            new ArrayTypeAccess(getTypeAccess(), getNumEmptyBracket()),
          name()
      );
  }

  // MethodDecl dimension at type only
  rewrite MethodDecl {
    when(getNumEmptyBracket() > 0)
    to MethodDecl {
      //setTypeAccess(getTypeAccess().qualifiesAccess(new ArrayNameAccess(getNumEmptyBracket(), false)));
      setTypeAccess(new ArrayTypeAccess(getTypeAccess(), getNumEmptyBracket()));
      setEmptyBracketList(new List());
      return this;
    }
  }

  // FieldDecl with single VariableDecl -> FieldDeclaration
  rewrite FieldDecl {
    when(getNumVariableDecl() == 1)
    to FieldDeclaration {
      VariableDecl v = getVariableDecl(0);
      FieldDeclaration decl = new FieldDeclaration(
          getModifiers(),
          v.getNumEmptyBracket() == 0 ? getTypeAccess() : 
            new ArrayTypeAccess(getTypeAccess(), v.getNumEmptyBracket()),
          new IdDecl(v.name()),
          v.getInitOpt()
      );
      return decl;
    }
  }
  
  // FieldDecl with multiple VariableDecl -> FieldDecl with single VariableDecl +
  rewrite FieldDecl in TypeDecl.getBodyDecl() {
    when(getNumVariableDecl() > 1)
    to List {
      List varList = new List();
      for(int j = 0; j < getNumVariableDecl(); j++) {
        varList.add(
            new FieldDecl(
                (Modifiers)getModifiers().fullCopy(),
                (Access)getTypeAccess().fullCopy(),
                new List().add(getVariableDecl(j))
              )
        );
      }
      return varList;
    }
  }

  // VarDeclStmt with single VariableDecl -> VariableDeclaration
  rewrite VarDeclStmt {
    when(getNumVariableDecl() == 1)
    to VariableDeclaration {
      VariableDecl v = getVariableDecl(0);
      VariableDeclaration decl = new VariableDeclaration(
          getModifiers(),
          v.getNumEmptyBracket() == 0 ? getTypeAccess() : 
            new ArrayTypeAccess(getTypeAccess(), v.getNumEmptyBracket()),
          new IdDecl(v.name()),
          v.getInitOpt()
      );
      decl.setStart(start); // copy location information
      return decl;
    }
  }

  // VarDeclStmt with multiple VariableDecl -> VarDeclStmt with single VarialbeDecl +
  rewrite VarDeclStmt in Block.getStmt() {
    when(getNumVariableDecl() > 1)
    to List {
      List varList = new List();
      for(int j = 0; j < getNumVariableDecl(); j++) {
        varList.add(
            new VarDeclStmt(
                (Modifiers)getModifiers().fullCopy(),
                (Access)getTypeAccess().fullCopy(),
                new List().add(getVariableDecl(j))
              )
        );
      }
      return varList;
    }
  }
  rewrite VarDeclStmt in ForStmt.getInitStmt() {
    when(getNumVariableDecl() > 1)
    to List {
      List varList = new List();
      for(int j = 0; j < getNumVariableDecl(); j++) {
        varList.add(
            new VarDeclStmt(
                (Modifiers)getModifiers().fullCopy(),
                (Access)getTypeAccess().fullCopy(),
                new List().add(getVariableDecl(j))
              )
        );
      }
      return varList;
    }
  }
  rewrite VarDeclStmt in Case.getStmt() {
    when(getNumVariableDecl() > 1)
    to List {
      List varList = new List();
      for(int j = 0; j < getNumVariableDecl(); j++) {
        varList.add(
            new VarDeclStmt(
                (Modifiers)getModifiers().fullCopy(),
                (Access)getTypeAccess().fullCopy(),
                new List().add(getVariableDecl(j))
              )
        );
      }
      return varList;
    }
  }
}
