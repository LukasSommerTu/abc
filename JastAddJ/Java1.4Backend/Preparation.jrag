aspect Preparation {
  rewrite MethodAccess {
    when (decl().isStatic() && !(this instanceof StaticMethodAccess))
      to MethodAccess new StaticMethodAccess(getArgList(), getIdUse());
    when (!decl().isStatic() && !(this instanceof VirtualMethodAccess))
      to MethodAccess new VirtualMethodAccess(getArgList(), getIdUse());
  }

  rewrite VariableDeclaration {
    when (!duringVariableDeclaration() && !duringResolveAmbiguousNames() &&hasAbstractVarInit() && getAbstractVarInit() instanceof ArrayInit)
    to VariableDeclaration {
      setAbstractVarInit(
          new VarInit(
            new ArrayInstanceExpr(
              (Access)getTypeAccess().fullCopy(),
              new List(),
              new Opt(
                getAbstractVarInit()
                )
              )
            )
          );
      return this;
    }
  }

  /*
   * separate declaration and initalization
   */
  rewrite VariableDeclaration in Block.getStmt() {
    when (!duringVariableDeclaration() && !duringResolveAmbiguousNames() && hasAbstractVarInit() && getAbstractVarInit() instanceof VarInit) 
    to List {
      Expr init = ((VarInit)getAbstractVarInit()).getExpr();
      String name = name();
      setAbstractVarInitOpt(new Opt());
      VariableDeclaration v = new VariableDeclaration(getModifiers(), getTypeAccess(), getIdDecl(), new Opt());
      Stmt assign = new ExprStmt(new AssignSimpleExpr(new VarAccess(new IdUse(name)), init));
      return new List().add(v).add(assign);
    }
  }

  rewrite VarAccess {
    when (decl().isClassVariable() && !(this instanceof StaticFieldAccess))
    to VarAccess new StaticFieldAccess(getIdUse());
    when (decl().isInstanceVariable() && !(this instanceof FieldAccess))
    to VarAccess new FieldAccess(getIdUse());
    when (decl().isLocalVariable() && !(this instanceof LocalVarAccess))
    to VarAccess new LocalVarAccess(getIdUse());
    when (decl().isMethodParameter() && !(this instanceof ParamVarAccess))
    to VarAccess new ParamVarAccess(getIdUse());
  } 

  rewrite AssignSimpleExpr {
    when (getDest() instanceof ArrayDot 
        && !(this instanceof ArrayAssignSimpleExpr))
    to AssignSimpleExpr new ArrayAssignSimpleExpr(getDest(), getSource());
    when ((getDest() instanceof StaticFieldAccess || getDest() instanceof FieldDot 
          && ((FieldDot) getDest()).getRight() instanceof StaticFieldAccess)
        && !(this instanceof StaticFieldAssignSimpleExpr))
    to AssignSimpleExpr new StaticFieldAssignSimpleExpr(getDest(), getSource());
    when ((getDest() instanceof FieldAccess || getDest() instanceof FieldDot 
          && ((FieldDot) getDest()).getRight() instanceof FieldAccess)
        && !(this instanceof FieldAssignSimpleExpr))
    to AssignSimpleExpr new FieldAssignSimpleExpr(getDest(), getSource());
    when (getDest() instanceof LocalVarAccess
        && !(this instanceof LocalVarAssignSimpleExpr)) 
    to AssignSimpleExpr new LocalVarAssignSimpleExpr(getDest(), getSource());
  }

  // add implicit this to method invocations
  rewrite VirtualMethodAccess {
    when(!isQualified() && !decl().hostType().isUnknown())
    to MethodDot {
      TypeDecl t = decl().hostType();
      while(!t.hasMethod(name()))
        t = t.enclosingType();
      return new MethodDot(
          new ThisDot(
            t.createQualifiedAccess(),
            new ThisAccess(
              new List(),
              new IdUse("this")
              )
            ),
          this
          );
    }
  }

  // add implicit this to field access
  rewrite FieldAccess {
    when (decl().isInstanceVariable() && !isQualified() && !decl().hostType().isUnknown())
    to InstanceFieldDot {
      TypeDecl t = decl().hostType();
      while(t.findVariable(getIdUse()).isEmpty())
        t = t.enclosingType();
      return new InstanceFieldDot(
          new ThisDot(
            t.createQualifiedAccess(),
            new ThisAccess(
              new List(),
              new IdUse("this")
              )
            ),
          this
          );
    }
  }

  rewrite ArrayInstanceExpr {
    when ((type().elementType().isReferenceType()
          || type().dimension() > 1) && !(this instanceof RefArrayInstanceExpr))
      to ArrayInstanceExpr new RefArrayInstanceExpr(getTypeAccess(), getDimsList(), getArrayInitOpt());
    when ((type().elementType().isPrimitiveType()
          && type().dimension() == 1) && !(this instanceof ValArrayInstanceExpr))
      to ArrayInstanceExpr new ValArrayInstanceExpr(getTypeAccess(), getDimsList(), getArrayInitOpt());
  }

  rewrite AssignMulExpr {
    to AssignSimpleExpr new AssignSimpleExpr((Expr)getDest().fullCopy(), new MulExpr(getDest(), getSource()));
  }
  rewrite AssignDivExpr {
    to AssignSimpleExpr new AssignSimpleExpr((Expr)getDest().fullCopy(), new DivExpr(getDest(), getSource()));
  }
  rewrite AssignModExpr {
    to AssignSimpleExpr new AssignSimpleExpr((Expr)getDest().fullCopy(), new ModExpr(getDest(), getSource()));
  }
  rewrite AssignPlusExpr {
    to AssignSimpleExpr new AssignSimpleExpr((Expr)getDest().fullCopy(), new AddExpr(getDest(), getSource()));
  }
  rewrite AssignMinusExpr {
    to AssignSimpleExpr new AssignSimpleExpr((Expr)getDest().fullCopy(), new SubExpr(getDest(), getSource()));
  }
  rewrite AssignLShiftExpr {
    to AssignSimpleExpr new AssignSimpleExpr((Expr)getDest().fullCopy(), new LShiftExpr(getDest(), getSource()));
  }
  rewrite AssignRShiftExpr {
    to AssignSimpleExpr new AssignSimpleExpr((Expr)getDest().fullCopy(), new RShiftExpr(getDest(), getSource()));
  }
  rewrite AssignURShiftExpr {
    to AssignSimpleExpr new AssignSimpleExpr((Expr)getDest().fullCopy(), new URShiftExpr(getDest(), getSource()));
  }
  rewrite AssignAndExpr {
    to AssignSimpleExpr new AssignSimpleExpr((Expr)getDest().fullCopy(), new AndBitwiseExpr(getDest(), getSource()));
  }
  rewrite AssignXorExpr {
    to AssignSimpleExpr new AssignSimpleExpr((Expr)getDest().fullCopy(), new XorBitwiseExpr(getDest(), getSource()));
  }
  rewrite AssignOrExpr {
    to AssignSimpleExpr new AssignSimpleExpr((Expr)getDest().fullCopy(), new OrBitwiseExpr(getDest(), getSource()));
  }
}
