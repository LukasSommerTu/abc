aspect UpdateRemoteAttributeCollectionsFrontend {
  protected void ASTNode.updateRemoteAttributeCollectionsBackend() {
  }

  protected void TypeDecl.updateRemoteAttributeCollectionsBackend() {
    super.updateRemoteAttributeCollectionsBackend();
    if(isNestedType())
      enclosingType().addNestedType(this);
  }

  protected void InterfaceDecl.updateRemoteAttributeCollectionsBackend() {
    super.updateRemoteAttributeCollectionsBackend();
    ConstantPool cp = constantPool();
    // force building of symbol table
    cp.addClass(constantPoolName());
    cp.addClass("java/lang/Object");
    for(int i = 0; i < getNumSuperInterfaceId(); i++) {
      cp.addClass(getSuperInterfaceId(i).type().constantPoolName());
    }
    for(Iterator iter = bcFields().iterator(); iter.hasNext(); ) {
      FieldDeclaration field = (FieldDeclaration) iter.next();
      cp.addUtf8(field.name());
      cp.addUtf8(field.type().typeDescriptor());
      field.attributes();
    }
    for(Iterator iter = bcMethods().iterator(); iter.hasNext(); ) {
      Object obj = iter.next();
      if(obj instanceof MethodDecl) {
        MethodDecl m = (MethodDecl) obj;
        cp.addUtf8(m.getIdDecl().getID()); // name()
        cp.addUtf8(m.descName());
        m.attributes();
      }
    }
    attributes();


  }
  protected void ClassDecl.updateRemoteAttributeCollectionsBackend() {
    super.updateRemoteAttributeCollectionsBackend();
  }

  protected void VarAccess.updateRemoteAttributeCollectionsBackend() {
    super.updateRemoteAttributeCollectionsBackend();
    Variable v = decl();
    if(v instanceof FieldDeclaration) {
      FieldDeclaration f = (FieldDeclaration)v;
      if(f.isPrivate() && !hostType().hasField(v.name())) {
        f.accessorIndex();
        f.accessorWriteIndex();
      }
    }
  }

  protected void ClassInstanceExpr.updateRemoteAttributeCollectionsBackend() {
    super.updateRemoteAttributeCollectionsBackend();
    ConstructorDecl decl = decl();
    if(decl.isPrivate())
      decl.accessorIndex();
    
  }
  
}
