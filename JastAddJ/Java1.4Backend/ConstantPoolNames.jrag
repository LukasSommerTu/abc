aspect ConstantPoolNames {

  syn String TypeDecl.typeDescriptor() {
    throw new Error("Can not compute typeDescriptor for " + getClass().getName());
  }
  eq ClassDecl.typeDescriptor() = "L" + constantPoolName() + ";";
  eq InterfaceDecl.typeDescriptor() = "L" + constantPoolName() + ";";
  eq BooleanType.typeDescriptor() = "Z";
  eq    ByteType.typeDescriptor() = "B";
  eq   ShortType.typeDescriptor() = "S";
  eq     IntType.typeDescriptor() = "I";
  eq    LongType.typeDescriptor() = "J";
  eq    CharType.typeDescriptor() = "C";
  eq   FloatType.typeDescriptor() = "F";
  eq  DoubleType.typeDescriptor() = "D";
  eq    VoidType.typeDescriptor() = "V";
  eq   ArrayDecl.typeDescriptor() { 
    StringBuffer dim = new StringBuffer();
    for(int i = 0; i < getDimension(); i++)
      dim.append("[");
    return dim.toString() + getElementType().typeDescriptor(); 
  }

  syn String MethodDecl.descName() {
    StringBuffer b = new StringBuffer();
    b.append("(");
    for (int i=0; i<getNumParameter(); i++)
      b.append(getParameter(i).type().typeDescriptor());
    b.append(")");
    b.append(type().typeDescriptor());
    return b.toString();
  }

  syn String FieldDeclaration.accessorDescName() {
    StringBuffer b = new StringBuffer();
    b.append("(");
    if(!isStatic())
      b.append(hostType().typeDescriptor());
    b.append(")");
    b.append(type().typeDescriptor());
    return b.toString();
  }
  
  syn String FieldDeclaration.accessorWriteDescName() {
    StringBuffer b = new StringBuffer();
    b.append("(");
    if(!isStatic())
      b.append(hostType().typeDescriptor());
    b.append(type().typeDescriptor());
    b.append(")V");
    return b.toString();
  }
  
  syn String MethodDecl.accessorDescName() {
    StringBuffer b = new StringBuffer();
    b.append("(");
    if(!isStatic())
      b.append(hostType().typeDescriptor());
    for (int i=0; i<getNumParameter(); i++)
      b.append(getParameter(i).type().typeDescriptor());
    b.append(")");
    b.append(type().typeDescriptor());
    return b.toString();
  }

  syn String ConstructorDecl.descName() {
    StringBuffer b = new StringBuffer();
    b.append("(");
    TypeDecl typeDecl = hostType();
    if(typeDecl.isInnerType())
      b.append(typeDecl.enclosingType().typeDescriptor());
    for(Iterator iter = typeDecl.enclosingVariables().iterator(); iter.hasNext(); )
      b.append(((Variable)iter.next()).type().typeDescriptor());
    for (int i=0; i<getNumParameter(); i++)
      b.append(getParameter(i).type().typeDescriptor());
    b.append(")V");
    return b.toString();
  }

  syn String ConstructorDecl.accessorDescName() {
    StringBuffer b = new StringBuffer();
    b.append("(");
    b.append(anonymousJavaName);        
    for (int i=0; i<getNumParameter(); i++)
      b.append(getParameter(i).type().typeDescriptor());
    b.append(")");
    b.append("V");
    return b.toString();
  }
}
