aspect BoundNames {
  public Access FieldDeclaration.createQualifiedBoundAccess() {
    if(isStatic())
      return hostType().createQualifiedAccess().qualifiesAccess(new BoundFieldAccess(this));
    else
      return new ThisAccess(new List(), new IdUse("this")).qualifiesAccess(
        new BoundFieldAccess(this));
  }

  // A BoundMethodAccess is a MethodAccess where the name analysis is bypassed by explicitly setting the desired binding
  // this is useful when name binding is cached and recomputation is undesired
  public BoundMethodAccess.BoundMethodAccess(String name, List args, MethodDecl methodDecl) {
    this(args, new IdUse(name));
    this.methodDecl = methodDecl;
  }
  private MethodDecl BoundMethodAccess.methodDecl;
  eq BoundMethodAccess.decl() = methodDecl;


  public BoundFieldAccess.BoundFieldAccess(FieldDeclaration f) {
    this(new IdUse(f.name()), f);
  }

  eq BoundFieldAccess.decl() = getFieldDeclaration();
  public boolean BoundFieldAccess.isExactVarAccess() {
    return false;
  }

  public Access MethodDecl.createBoundAccess(List args) {
    if(isStatic()) {
      return hostType().createQualifiedAccess().qualifiesAccess(
        new BoundMethodAccess(name(), args, this)
      );
    }
    return new BoundMethodAccess(name(), args, this);
  }

  public Access FieldDeclaration.createBoundFieldAccess() {
    return createQualifiedBoundAccess();
  }
}
