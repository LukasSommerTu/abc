aspect Generics {
  // imported types are considered raw types by the name resolver
  // here we replace them by their generic counter parts
  refine LookupType eq CompilationUnit.getTypeDecl().lookupType(String name) {
    SimpleSet result = SimpleSet.emptySet;
    for(Iterator iter = LookupType.CompilationUnit.getTypeDecl().lookupType(name).iterator(); iter.hasNext(); ) {
      TypeDecl typeDecl = (TypeDecl)iter.next();
      if(typeDecl instanceof ParTypeDecl)
        result = result.add(((ParTypeDecl)typeDecl).genericDecl());
      else
        result = result.add(typeDecl);
    }
    return result;
  }

  refine TypeAnalysis eq ClassDecl.castingConversionTo(TypeDecl type) {
    TypeDecl S = this;
    TypeDecl T = type;
    if(T.isClassDecl() && (S.erasure() != S || T.erasure() != T))
        return S.erasure().castingConversionTo(T.erasure());
    return TypeAnalysis.ClassDecl.castingConversionTo(type);
  }

  refine TypeAnalysis eq InterfaceDecl.castingConversionTo(TypeDecl type) {
    TypeDecl S = this;
    TypeDecl T = type;
    if(T.isInterfaceDecl()) {
      if(T.isFinal())
        return T.instanceOf(S);
      return true;
    }
    return TypeAnalysis.InterfaceDecl.castingConversionTo(type);
  }

  refine TypeAnalysis eq ClassAccess.type() {
    GenericClassDecl d = (GenericClassDecl)TypeAnalysis.ClassAccess.type();
    ArrayList list = new ArrayList();
    list.add(qualifier().type());
    return d.lookupParTypeDecl(list);
  }

  refine TypeAnalysis eq ConditionalExpr.type() {
    TypeDecl type = TypeAnalysis.ConditionalExpr.type();
    TypeDecl trueType = getTrueExpr().type();
    TypeDecl falseType = getFalseExpr().type();

    if(type.isUnknown() && trueType.isReferenceType() && falseType.isReferenceType()) {
      ArrayList list = new ArrayList();
      list.add(trueType);
      list.add(falseType);
      return type.lookupLUBType(list);
    }
    return type;
  }

  interface GenericTypeDecl {
    syn boolean isGenericType();
    syn GenericTypeDecl original();
    int getNumTypeParameter();
    TypeVariable getTypeParameter(int index);
    public String fullName();
    public String typeName();
    sons BodyDecl:BodyDecl* TypeParameter:TypeVariable* ParTypeDecl:ParTypeDecl*;
  }
  GenericClassDecl implements GenericTypeDecl;
  GenericInterfaceDecl implements GenericTypeDecl;
  
  syn boolean TypeDecl.isGenericType() = false;
  eq GenericTypeDecl.isGenericType() = true;

  // Brute force replacesment with generic one in AST
  // make sure that the AST has not beed traversed yet!
  public TypeDecl TypeDecl.makeGeneric(bytecode.Signatures.ClassSignature s) {
    return this;
  }
  public TypeDecl ClassDecl.makeGeneric(bytecode.Signatures.ClassSignature s) {
    if(s.hasFormalTypeParameters()) {
      ASTNode node = getParent();
      int index = node.getIndexOfChild(this);
      node.setChild(
          new GenericClassDecl(
            getModifiersNoTransform(),
            getID(),
            s.hasSuperclassSignature() ? new Opt(s.superclassSignature()) : getSuperClassAccessOptNoTransform(),
            s.hasSuperinterfaceSignature() ? s.superinterfaceSignature() : getImplementsListNoTransform(),
            getBodyDeclListNoTransform(),
            s.typeParameters(),
            new List()
            ),
          index
          );
      return (TypeDecl)node.getChildNoTransform(index);
    }
    else {
      if(s.hasSuperclassSignature())
        setSuperClassAccessOpt(new Opt(s.superclassSignature()));
      if(s.hasSuperinterfaceSignature())
        setImplementsList(s.superinterfaceSignature());
      return this;
    }
  }

  public TypeDecl InterfaceDecl.makeGeneric(bytecode.Signatures.ClassSignature s) {
    if(s.hasFormalTypeParameters()) {
      ASTNode node = getParent();
      int index = node.getIndexOfChild(this);
      node.setChild(
          new GenericInterfaceDecl(
            getModifiersNoTransform(),
            getID(),
            s.hasSuperinterfaceSignature() ? s.superinterfaceSignature() : getSuperInterfaceIdListNoTransform(),
            getBodyDeclListNoTransform(),
            s.typeParameters(),
            new List()
            ),
          index
          );
      return (TypeDecl)node.getChildNoTransform(index);
    }
    else {
      if(s.hasSuperinterfaceSignature())
        setSuperInterfaceIdList(s.superinterfaceSignature());
      return this;
    }
  }
  public TypeDecl GenericTypeDecl.makeGeneric(bytecode.Signatures.ClassSignature s) {
    return (TypeDecl)this;
  }


  interface ParTypeDecl {
    //syn String name();
    int getNumArgument();
    Access getArgument(int index);
    syn boolean isParameterizedType();
    syn boolean isRawType();
    public String typeName();
  }
  ParClassDecl implements ParTypeDecl;
  ParInterfaceDecl implements ParTypeDecl;
  
  syn boolean TypeDecl.isParameterizedType() = false;
  eq ParTypeDecl.isParameterizedType() = true;

  syn boolean TypeDecl.isRawType() = false;
  eq ParClassDecl.isRawType() = false;
  eq ParInterfaceDecl.isRawType() = false;
  eq RawClassDecl.isRawType() = true;
  eq RawInterfaceDecl.isRawType() = true;
}

aspect GenericsTypeAnalysis {

  eq ParTypeAccess.type() {
    TypeDecl typeDecl = genericDecl();
    if(typeDecl instanceof GenericTypeDecl)
      return ((GenericTypeDecl)typeDecl).lookupParTypeDecl(this);
    return typeDecl;
  }
  syn TypeDecl ParTypeAccess.genericDecl() = getTypeAccess().type();
  eq ParTypeAccess.isTypeAccess() = true;

  refine LookupType eq TypeAccess.decl() {
    TypeDecl decl = LookupType.TypeAccess.decl();
    if(decl instanceof GenericTypeDecl && isRaw())
      return ((GenericTypeDecl)decl).lookupParTypeDecl(new ArrayList());
    return decl;
  }

  // this method assumes that the bound type is generic
  public boolean TypeAccess.isRaw() {
    ASTNode parent = getParent();
    while(parent instanceof AbstractDot)
      parent = parent.getParent();
    if(parent instanceof ParTypeAccess)
      return false;
    if(hasNextAccess() && nextAccess().isThisAccess())
      return false;
    if(hasNextAccess() && nextAccess().isSuperAccess())
      return false;
    return true;
  }
}

aspect GenericsErasure {
  syn lazy TypeDecl TypeDecl.erasure() {
    if(isAnonymous() || isLocalClass())
      return this;
    if(!isNestedType())
      return this;
    return extractSingleType(enclosingType().erasure().memberTypes(name()));
  }
  eq ParClassDecl.erasure() = genericDecl();
  eq ParInterfaceDecl.erasure() = genericDecl();
  eq TypeVariable.erasure() = getTypeBound(0).type().erasure(); // Skip last erasure?
  eq ArrayDecl.erasure() = elementType().erasure().arrayType();
}

aspect GenericsTypeCheck {
  public void GenericClassDecl.typeCheck() {
    super.typeCheck();
    if(instanceOf(typeThrowable()))
      error(" generic class " + typeName() + " may not directly or indirectly inherit java.lang.Throwable");
  }
  public void GenericInterfaceDecl.typeCheck() {
    super.typeCheck();
    if(instanceOf(typeThrowable()))
      error(" generic interface " + typeName() + " may not directly or indirectly inherit java.lang.Throwable");
  }
  inh TypeDecl GenericClassDecl.typeThrowable();
  inh TypeDecl GenericInterfaceDecl.typeThrowable();

  public void ParTypeAccess.typeCheck() {
    super.typeCheck();
    if(!genericDecl().isGenericType()) {
      error(genericDecl().typeName() + " is not a generic type but used as one in " + this);
    }
    else {
      GenericTypeDecl decl = (GenericTypeDecl)genericDecl();
      if(decl.original().getNumTypeParameter() != getNumTypeArgument()) {
        error(decl.typeName() + " takes " + decl.original().getNumTypeParameter() + " type parameters, not " + getNumTypeArgument() + " as used in " + this);
      }
      else {
        ParTypeDecl typeDecl = (ParTypeDecl)type();
        for(int i = 0; i < getNumTypeArgument(); i++) {
          if(!getTypeArgument(i).type().instanceOf(decl.original().getTypeParameter(i))) {
            error("type argument " + i + " is of type " + getTypeArgument(i).type().typeName() 
              + " which is not a subtype of " + decl.original().getTypeParameter(i).typeName());
          }
        }
      }
    }
  }

}

aspect GenericsNameBinding {

  eq ParClassDecl.getArgument().nameType() = NameType.TYPE_NAME;
  eq ParInterfaceDecl.getArgument().nameType() = NameType.TYPE_NAME;

  //eq GenericClassDecl.getParTypeDecl().isNestedType() = isNestedType();
  //eq GenericClassDecl.getParTypeDecl().enclosingType() = enclosingType();
  eq GenericClassDecl.getTypeParameter().isNestedType() = true;
  eq GenericClassDecl.getTypeParameter().enclosingType() = this;
  
  //eq GenericInterfaceDecl.getParTypeDecl().isNestedType() = isNestedType();
  //eq GenericInterfaceDecl.getParTypeDecl().enclosingType() = enclosingType();
  eq GenericInterfaceDecl.getTypeParameter().isNestedType() = true;
  eq GenericInterfaceDecl.getTypeParameter().enclosingType() = this;

  public SimpleSet GenericTypeDecl.addTypeVariables(SimpleSet c, String name) {
    for(int i = 0; i < original().getNumTypeParameter(); i++) {
      TypeVariable p = original().getTypeParameter(i);
      if(p.name().equals(name))
        c = c.add(p);
    }
    return c;
  }

  eq GenericInterfaceDecl.getSuperInterfaceId().lookupType(String name) {
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    return !c.isEmpty() ? c : lookupType(name);
  }
  eq GenericClassDecl.getSuperClassAccess().lookupType(String name) {
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    return !c.isEmpty() ? c : lookupType(name);
  }
  eq GenericClassDecl.getImplements().lookupType(String name) {
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    return !c.isEmpty() ? c : lookupType(name);
  }

  eq GenericTypeDecl.getTypeParameter().lookupType(String name) {
    SimpleSet c = memberTypes(name);
    c = addTypeVariables(c, name);
    if(!c.isEmpty()) return c;
    // 8.5.2
    if(isClassDecl() && isStatic() && !isTopLevelType()) {
      for(Iterator iter = lookupType(name).iterator(); iter.hasNext(); ) {
        TypeDecl d = (TypeDecl)iter.next();
        if(d.isStatic() || (d.enclosingType() != null && instanceOf(d.enclosingType()))) {
          c = c.add(d);
        }
      }
    }
    else
      c = lookupType(name);
    if(!c.isEmpty())
      return c;
    return topLevelType().lookupType(name); // Fix to search imports
  }
  eq GenericTypeDecl.getBodyDecl(int index).lookupType(String name) {
    SimpleSet c = memberTypes(name);
    if(getBodyDecl(index).visibleTypeParameters())
      c = addTypeVariables(c, name);
    if(!c.isEmpty())
      return c;
    // 8.5.2
    if(isClassDecl() && isStatic() && !isTopLevelType()) {
      for(Iterator iter = lookupType(name).iterator(); iter.hasNext(); ) {
        TypeDecl d = (TypeDecl)iter.next();
        if(d.isStatic() || (d.enclosingType() != null && instanceOf(d.enclosingType()))) {
          c = c.add(d);
        }
      }
    }
    else
      c = lookupType(name);
    if(!c.isEmpty())
      return c;
    return topLevelType().lookupType(name); // Fix to search imports
    // include type parameters if not static
  }

  public void ParClassDecl.collectErrors() {
    // Disable error check for ParClassDecl which is an instanciated GenericClassDecl
  }
  public void ParInterfaceDecl.collectErrors() {
    // Disable error check for ParInterfaceDecl which is an instanciated GenericInterfaceDecl
  }

}
aspect LookupParTypeDecl {
  eq TypeVariable.fullName() {
    if(getParent().getParent() instanceof TypeDecl) {
      TypeDecl typeDecl = (TypeDecl)getParent().getParent();
      return typeDecl.fullName() + "@" + name();
    }
    return super.fullName();
  }

  syn boolean TypeDecl.sameSignature(Access a) {
    if(a instanceof ParTypeAccess) return false;
    if(a instanceof AbstractWildcard) return false;
    return this == a.type();
  }
  eq TypeVariable.sameSignature(Access a) = a.type() == this;
  syn boolean ParTypeDecl.sameSignature(Access a){
    if(a instanceof ParTypeAccess) {
      ParTypeAccess ta = (ParTypeAccess)a;
      if(genericDecl() != ta.genericDecl())
        return false;
      if(getNumArgument() != ta.getNumTypeArgument())
        return false;
      for(int i = 0; i < getNumArgument(); i++)
        if(!getArgument(i).type().sameSignature(ta.getTypeArgument(i)))
          return false;
      return true;
    }
    else if(a instanceof TypeAccess && ((TypeAccess)a).isRaw())
      return false;
    return super.sameSignature(a);
  }
  eq RawClassDecl.sameSignature(Access a) = a instanceof TypeAccess && a.type() == this;
  eq RawInterfaceDecl.sameSignature(Access a) = a instanceof TypeAccess && a.type() == this;

  eq WildcardType.sameSignature(Access a) {
    if(a instanceof Wildcard)
      return true;
    return super.sameSignature(a);
  }
  eq WildcardExtendsType.sameSignature(Access a) {
    if(a instanceof WildcardExtends)
      return getAccess().type().sameSignature(((WildcardExtends)a).getAccess());
    return super.sameSignature(a);
  }
  eq WildcardSuperType.sameSignature(Access a) {
    if(a instanceof WildcardSuper)
      return getAccess().type().sameSignature(((WildcardSuper)a).getAccess());
    return super.sameSignature(a);
  }

  syn lazy boolean ParTypeDecl.sameSignature(ArrayList list) circular [true] {
    if(getNumArgument() != list.size())
      return false;
    for(int i = 0; i < list.size(); i++)
      if(getArgument(i).type() != list.get(i))
        return false;
    return true;
  }
  

  syn TypeDecl TypeDecl.genericTypeDecl() = unknownType();
  eq GenericTypeDecl.genericTypeDecl() = this;
  eq ParClassDecl.genericTypeDecl() = enclosingGenericTypeDecl();
  eq ParInterfaceDecl.genericTypeDecl() = enclosingGenericTypeDecl();

  inh TypeDecl ParTypeDecl.enclosingGenericTypeDecl();

  eq GenericClassDecl.getParTypeDecl().enclosingGenericTypeDecl() = this;
  eq GenericInterfaceDecl.getParTypeDecl().enclosingGenericTypeDecl() = this;
  eq Program.getCompilationUnit().enclosingGenericTypeDecl() = unknownType();

  syn lazy TypeDecl GenericTypeDecl.lookupParTypeDecl(ParTypeAccess p);
  eq GenericClassDecl.lookupParTypeDecl(ParTypeAccess p) {
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParTypeDecl decl = (ParTypeDecl)getParTypeDecl(i);
      if(decl.sameSignature(p))
        return (TypeDecl)decl;
    }
    ParClassDecl typeDecl = new ParClassDecl();
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    addParTypeDecl(typeDecl);
    List list = new List();
    for(int i = 0; i < p.getNumTypeArgument(); i++)
      list.add(p.getTypeArgument(i).type().createBoundAccess());
    typeDecl.setArgumentList(list);
    typeDecl.is$Final = true;
    return typeDecl;
  }
  eq GenericInterfaceDecl.lookupParTypeDecl(ParTypeAccess p) {
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParTypeDecl decl = (ParTypeDecl)getParTypeDecl(i);
      if(decl.sameSignature(p))
        return (TypeDecl)decl;
    }
    ParInterfaceDecl typeDecl = new ParInterfaceDecl();
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    addParTypeDecl(typeDecl);
    List list = new List();
    for(int i = 0; i < p.getNumTypeArgument(); i++)
      list.add(p.getTypeArgument(i).type().createBoundAccess());
    typeDecl.setArgumentList(list);
    typeDecl.is$Final = true;
    return typeDecl;
  }

  // used by methods inference when looking up paramterizations from wildcards
  syn lazy TypeDecl GenericTypeDecl.lookupParTypeDecl(ArrayList list);
  eq GenericClassDecl.lookupParTypeDecl(ArrayList list) {
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParTypeDecl decl = (ParTypeDecl)getParTypeDecl(i);
      if(decl.sameSignature(list) || (list.isEmpty() && decl.isRawType()))
        return (TypeDecl)decl;
    }
    ParClassDecl typeDecl = list.size() == 0 ? new RawClassDecl() : new ParClassDecl();
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    addParTypeDecl(typeDecl);
    typeDecl.setArgumentList(createArgumentList(list));
    typeDecl.is$Final = true;
    return typeDecl;
  }
  eq GenericInterfaceDecl.lookupParTypeDecl(ArrayList list) {
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParTypeDecl decl = (ParTypeDecl)getParTypeDecl(i);
      if(decl.sameSignature(list) || (list.isEmpty() && decl.isRawType()))
        return (TypeDecl)decl;
    }
    ParInterfaceDecl typeDecl = list.size() == 0 ? new RawInterfaceDecl() : new ParInterfaceDecl();
    typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
    typeDecl.setID(getID());
    addParTypeDecl(typeDecl);
    typeDecl.setArgumentList(createArgumentList(list));
    typeDecl.is$Final = true;
    return typeDecl;
  }
  public List GenericTypeDecl.createArgumentList(ArrayList params) {
    List list = new List();
    if(params.isEmpty())
      for(int i = 0; i < original().getNumTypeParameter(); i++)
        list.add(original().getTypeParameter(i).erasure().createBoundAccess());
    else
      for(Iterator iter = params.iterator(); iter.hasNext(); )
        list.add(((TypeDecl)iter.next()).createBoundAccess());
    return list;
  }
  
  public Access TypeDecl.substitute(ParTypeDecl parTypeDecl) {
    return createBoundAccess();
  }
  public Access ArrayDecl.substitute(ParTypeDecl parTypeDecl) {
    return new ArrayTypeAccess(componentType().substitute(parTypeDecl), 1);
  }
  public Access TypeVariable.substitute(ParTypeDecl parTypeDecl) {
    if(parTypeDecl.isRawType())
      return erasure().createBoundAccess();
    GenericTypeDecl g = (GenericTypeDecl)parTypeDecl.genericDecl();
    for(int i = 0; i < g.original().getNumTypeParameter(); i++)
      if(g.original().getTypeParameter(i) == this)
        return parTypeDecl.getArgument(i).type().createBoundAccess();
    return createBoundAccess();
  }
  public Access ParTypeDecl.substitute(ParTypeDecl parTypeDecl) {
    if(parTypeDecl.isRawType())
      return erasure().createBoundAccess();
    if(!usesTypeVariable())
      return super.substitute(parTypeDecl);
    List list = new List();
    for(int i = 0; i < getNumArgument(); i++)
      list.add(getArgument(i).type().substitute(parTypeDecl));
    return new ParTypeAccess(genericDecl().createQualifiedAccess(), list);
  }
  public Access RawClassDecl.substitute(ParTypeDecl parTypeDecl) { return createBoundAccess(); }
  public Access RawInterfaceDecl.substitute(ParTypeDecl parTypeDecl) { return createBoundAccess(); }
  public Access RawClassDecl.substituteReturnType(ParTypeDecl parTypeDecl) { return createBoundAccess(); }
  public Access RawInterfaceDecl.substituteReturnType(ParTypeDecl parTypeDecl) { return createBoundAccess(); }
  public Access RawClassDecl.substituteParameterType(ParTypeDecl parTypeDecl) { return createBoundAccess(); }
  public Access RawInterfaceDecl.substituteParameterType(ParTypeDecl parTypeDecl) { return createBoundAccess(); }
  
  public Access TypeDecl.substituteReturnType(ParTypeDecl parTypeDecl) {
    return createBoundAccess();
  }
  public Access ArrayDecl.substituteReturnType(ParTypeDecl parTypeDecl) {
    return new ArrayTypeAccess(componentType().substituteReturnType(parTypeDecl), 1);
  }
  inh TypeDecl TypeVariable.typeObject();
  
  public Access TypeVariable.substituteReturnType(ParTypeDecl parTypeDecl) {
    if(parTypeDecl.isRawType())
      return erasure().createBoundAccess();
    GenericTypeDecl g = (GenericTypeDecl)parTypeDecl.genericDecl();
    for(int i = 0; i < g.original().getNumTypeParameter(); i++) {
      if(g.original().getTypeParameter(i) == this) {
        TypeDecl typeDecl = parTypeDecl.getArgument(i).type();
        if(typeDecl instanceof WildcardType)
          return typeObject().createBoundAccess();
        else if(typeDecl instanceof WildcardExtendsType)
          return ((WildcardExtendsType)typeDecl).extendsType().createBoundAccess();
        else if(typeDecl instanceof WildcardSuperType)
          return typeObject().createBoundAccess();
        return typeDecl.createBoundAccess();
      }
    }
    return createBoundAccess();
  }
  public Access ParTypeDecl.substituteReturnType(ParTypeDecl parTypeDecl) {
    if(parTypeDecl.isRawType())
      return erasure().createBoundAccess();
    if(!usesTypeVariable())
      return super.substituteReturnType(parTypeDecl);
    List list = new List();
    for(int i = 0; i < getNumArgument(); i++)
      list.add(getArgument(i).type().substitute(parTypeDecl));
    return new ParTypeAccess(genericDecl().createQualifiedAccess(), list);
  }

  public Access TypeDecl.substituteParameterType(ParTypeDecl parTypeDecl) {
    return createBoundAccess();
  }

  inh TypeDecl TypeVariable.typeNull();
  public Access TypeVariable.substituteParameterType(ParTypeDecl parTypeDecl) {
    if(parTypeDecl.isRawType())
      return erasure().createBoundAccess();
    GenericTypeDecl g = (GenericTypeDecl)parTypeDecl.genericDecl();
    for(int i = 0; i < g.original().getNumTypeParameter(); i++) {
      if(g.original().getTypeParameter(i) == this) {
        TypeDecl typeDecl = parTypeDecl.getArgument(i).type();
        if(typeDecl instanceof WildcardType)
          return typeNull().createQualifiedAccess();
        else if(typeDecl instanceof WildcardExtendsType)
          return typeNull().createQualifiedAccess();
        else if(typeDecl instanceof WildcardSuperType)
          return ((WildcardSuperType)typeDecl).superType().createBoundAccess();
        return typeDecl.createBoundAccess();
      }
    }
    return createBoundAccess();
  }
  public Access ParTypeDecl.substituteParameterType(ParTypeDecl parTypeDecl) {
    if(parTypeDecl.isRawType())
      return erasure().createBoundAccess();
    if(!usesTypeVariable())
      return super.substituteParameterType(parTypeDecl);
    List list = new List();
    for(int i = 0; i < getNumArgument(); i++)
      list.add(getArgument(i).type().substitute(parTypeDecl));
    return new ParTypeAccess(genericDecl().createQualifiedAccess(), list);
  }

  public Access WildcardExtendsType.substitute(ParTypeDecl parTypeDecl) {
    if(!usesTypeVariable())
      return super.substitute(parTypeDecl);
    return new WildcardExtends(getAccess().type().substitute(parTypeDecl));
  }
  public Access WildcardSuperType.substitute(ParTypeDecl parTypeDecl) {
    if(!usesTypeVariable())
      return super.substitute(parTypeDecl);
    return new WildcardSuper(getAccess().type().substitute(parTypeDecl));
  }
  public Access WildcardExtendsType.substituteReturnType(ParTypeDecl parTypeDecl) {
    if(!usesTypeVariable())
      return super.substituteReturnType(parTypeDecl);
    return new WildcardExtends(getAccess().type().substitute(parTypeDecl));
  }
  public Access WildcardSuperType.substituteReturnType(ParTypeDecl parTypeDecl) {
    if(!usesTypeVariable())
      return super.substituteReturnType(parTypeDecl);
    return new WildcardSuper(getAccess().type().substitute(parTypeDecl));
  }
  public Access WildcardExtendsType.substituteParameterType(ParTypeDecl parTypeDecl) {
    if(!usesTypeVariable())
      return super.substituteParameterType(parTypeDecl);
    return new WildcardExtends(getAccess().type().substitute(parTypeDecl));
  }
  public Access WildcardSuperType.substituteParameterType(ParTypeDecl parTypeDecl) {
    if(!usesTypeVariable())
      return super.substituteParameterType(parTypeDecl);
    return new WildcardSuper(getAccess().type().substitute(parTypeDecl));
  }
  
  public List List.substitute(ParTypeDecl parTypeDecl) {
    List list = new List();
    for(int i = 0; i < getNumChild(); i++) {
      ASTNode node = getChild(i);
      if(node instanceof Access) {
        Access a = (Access)node;
        list.add(a.type().substitute(parTypeDecl));
      }
      else if(node instanceof VariableArityParameterDeclaration) {
        VariableArityParameterDeclaration p = (VariableArityParameterDeclaration)node;
        list.add(
          new VariableArityParameterDeclaration(
            (Modifiers)p.getModifiers().fullCopy(),
            p.type().substituteParameterType(parTypeDecl),
            p.getID(),
            new List()
          )
        );
      }
      else if(node instanceof ParameterDeclaration) {
        ParameterDeclaration p = (ParameterDeclaration)node;
        list.add(
          new ParameterDeclaration(
            (Modifiers)p.getModifiers().fullCopy(),
            p.type().substituteParameterType(parTypeDecl),
            p.getID()
          )
        );
      }
      else {
        throw new Error("Can only substitute lists of access nodes but node number " + i + " is of type " + node.getClass().getName());
      }
    }
    return list;
  }

  syn lazy Opt ParClassDecl.getSuperClassAccessOpt() {
    GenericClassDecl decl = (GenericClassDecl)genericTypeDecl();
    Opt opt;
    //System.err.println("Begin substituting extends clause");
    if(decl.hasSuperClassAccess())
      opt = new Opt((decl.getSuperClassAccess().type().substitute(this)));
    else
      opt = new Opt();
    //System.err.println("End substituting extends clause");
    return opt;
  }
  syn lazy List ParClassDecl.getImplementsList() {
    GenericClassDecl decl = (GenericClassDecl)genericTypeDecl();
    //System.err.println("Begin substituting implements list");
    List list = decl.getImplementsList().substitute(this);
    //System.err.println("End substituting implements list");
    return list;
  }
  syn lazy List ParClassDecl.getBodyDeclList() = new List();

  syn lazy List ParInterfaceDecl.getSuperInterfaceIdList() {
    GenericInterfaceDecl decl = (GenericInterfaceDecl)genericTypeDecl();
    //System.err.println("Begin substituting implements list");
    List list = decl.getSuperInterfaceIdList().substitute(this);
    //System.err.println("End substituting implements list");
    return list;
  }
  syn lazy List ParInterfaceDecl.getBodyDeclList() = new List();

  syn boolean ASTNode.usesTypeVariable() {
    for(int i = 0; i < getNumChild(); i++)
      if(getChild(i).usesTypeVariable())
        return true;
    return false;
  }
  syn lazy boolean MethodDecl.usesTypeVariable() = 
    getModifiers().usesTypeVariable() || getTypeAccess().usesTypeVariable() ||
    getParameterList().usesTypeVariable() || getExceptionList().usesTypeVariable();
  syn lazy boolean FieldDeclaration.usesTypeVariable() = getTypeAccess().usesTypeVariable();
  eq TypeAccess.usesTypeVariable() = decl().usesTypeVariable() || super.usesTypeVariable();
  
  syn lazy boolean TypeDecl.usesTypeVariable() circular [false] = false;
  eq ParTypeDecl.usesTypeVariable() {
    for(int i = 0; i < getNumArgument(); i++)
      if(getArgument(i).type().usesTypeVariable())
        return true;
    return false;
  }
  eq TypeVariable.usesTypeVariable() = true;
  eq WildcardExtendsType.usesTypeVariable() = getAccess().type().usesTypeVariable();
  eq WildcardSuperType.usesTypeVariable() = getAccess().type().usesTypeVariable();

  syn lazy HashMap ParTypeDecl.localMethodsSignatureMap() {
    HashMap map = new HashMap(getNumBodyDecl());
    for(int i = 0; i < genericTypeDecl().getNumBodyDecl(); i++) {
      if(genericTypeDecl().getBodyDecl(i) instanceof MethodDecl) {
        MethodDecl decl = (MethodDecl)genericTypeDecl().getBodyDecl(i);
        if(decl.usesTypeVariable()) {
          BodyDecl b = decl.p(this);
          b.is$Final = true;
          addBodyDecl(b);
          decl = (MethodDecl)b;
        }
        map.put(decl.signature(), decl);
      }
    }
    return map;
  }

  syn lazy SimpleSet ParTypeDecl.fields(String name) {
    SimpleSet set = SimpleSet.emptySet;
    for(Iterator iter = genericTypeDecl().fields(name).iterator(); iter.hasNext(); ) {
      FieldDeclaration f = (FieldDeclaration)iter.next();
      if(f.usesTypeVariable()) {
        BodyDecl b = f.p(this);
        b.is$Final = true;
        addBodyDecl(b);
        f = (FieldDeclaration)b;
      }
      set = set.add(f);
    }
    return set;
  }

  syn lazy SimpleSet ParTypeDecl.memberTypes(String name) {
    SimpleSet set = SimpleSet.emptySet;
    for(Iterator iter = genericTypeDecl().memberTypes(name).iterator(); iter.hasNext(); ) {
      TypeDecl t = (TypeDecl)iter.next();
      if(t.isStatic())
        set = set.add(t);
      else {
        BodyDecl b;
        TypeDecl typeDecl;
        if(t instanceof ClassDecl) {
          ClassDecl classDecl = (ClassDecl)t;
          typeDecl = classDecl.p(this);
          b = new MemberClassDecl((ClassDecl)typeDecl);
          b.is$Final = true;
          addBodyDecl(b);
          set = set.add(typeDecl);
        }
        else if(t instanceof InterfaceDecl) {
          InterfaceDecl interfaceDecl = (InterfaceDecl)t;
          typeDecl = interfaceDecl.p(this);
          b = new MemberInterfaceDecl((InterfaceDecl)typeDecl);
          b.is$Final = true;
          addBodyDecl(b);
          set = set.add(typeDecl);
        }
      }
    }
    return set;
  }

  syn lazy Collection ParTypeDecl.constructors() {
    Collection set = new ArrayList();
    for(Iterator iter = genericTypeDecl().constructors().iterator(); iter.hasNext(); ) {
      ConstructorDecl c = (ConstructorDecl)iter.next();
      BodyDecl b = c.p(this);
      b.is$Final = true;
      addBodyDecl(b);
      set.add(b);
    }
    return set;
  }

  public BodyDecl BodyDecl.p(ParTypeDecl parTypeDecl) {
    throw new Error("Operation p not supported for " + getClass().getName());
  }

  public BodyDecl MethodDecl.p(ParTypeDecl parTypeDecl) {
    //System.out.println("Begin substituting " + signature() + " in " + hostType().typeName() + " with " + parTypeDecl.typeSignature());
    MethodDecl m = new MethodDeclSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getTypeAccess().type().substituteReturnType(parTypeDecl),
      getID(),
      getParameterList().substitute(parTypeDecl),
      new List(),
      getExceptionList().substitute(parTypeDecl),
      new Opt(),
      this
    );
    //System.out.println("End substituting " + signature());
    return m;
  }

  public BodyDecl GenericMethodDecl.p(ParTypeDecl parTypeDecl) {
    //System.out.println("Begin substituting generic " + signature() + " in " + hostType().typeName() + " with " + parTypeDecl.typeSignature());
    GenericMethodDecl m = new GenericMethodDecl(
      (Modifiers)getModifiers().fullCopy(),
      getTypeAccess().type().substituteReturnType(parTypeDecl),
      getID(),
      getParameterList().substitute(parTypeDecl),
      new List(),
      getExceptionList().substitute(parTypeDecl),
      new Opt(),
      (List)getTypeParameterList().fullCopy(),
      new List()
    );
    m.original = this;
    //System.out.println("End substituting generic " + signature());
    return m;
  }
  syn GenericMethodDecl GenericMethodDecl.original() = original != null ? original : this;
  public GenericMethodDecl GenericMethodDecl.original;
  
  syn GenericConstructorDecl GenericConstructorDecl.original() = original != null ? original : this;
  public GenericConstructorDecl GenericConstructorDecl.original;
  

  public BodyDecl ConstructorDecl.p(ParTypeDecl parTypeDecl) {
    ConstructorDecl c = new ConstructorDeclSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      getParameterList().substitute(parTypeDecl),
      getExceptionList().substitute(parTypeDecl),
      new Opt(),
      new Block(),
      this
    );
    return c;
  }
  public BodyDecl FieldDeclaration.p(ParTypeDecl parTypeDecl) {
    FieldDeclaration f = new FieldDeclarationSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getTypeAccess().type().substituteReturnType(parTypeDecl),
      getID(),
      new Opt(),
      this
    );
    return f;
  }

  eq GenericTypeDecl.original() = original != null ? (GenericTypeDecl)original : this;
  public TypeDecl TypeDecl.original;

  public ClassDecl ClassDecl.p(ParTypeDecl parTypeDecl) {
    ClassDecl c = new ClassDecl(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      (Opt)getSuperClassAccessOpt().fullCopy(),
      getImplementsList().substitute(parTypeDecl),
      new List()
    );
    c.original = this;
    return c;
  }
  public ClassDecl GenericClassDecl.p(ParTypeDecl parTypeDecl) {
    GenericClassDecl c = new GenericClassDecl(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      (Opt)getSuperClassAccessOpt().fullCopy(),
      getImplementsList().substitute(parTypeDecl),
      new List(),
      new List(), // delegates TypeParameter lookup to original 
      new List()
    );
    c.original = this;
    return c;
  }
  public InterfaceDecl InterfaceDecl.p(ParTypeDecl parTypeDecl) {
    InterfaceDecl c = new InterfaceDecl(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      getSuperInterfaceIdList().substitute(parTypeDecl),
      new List()
    );
    c.original = this;
    return c;
  }
  public InterfaceDecl GenericInterfaceDecl.p(ParTypeDecl parTypeDecl) {
    GenericInterfaceDecl c = new GenericInterfaceDecl(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      getSuperInterfaceIdList().substitute(parTypeDecl),
      new List(),
      new List(), // delegates TypeParameter lookup to original
      new List()
    );
    c.original = this;
    return c;
  }

  syn lazy CompilationUnit Program.wildcards() {
    CompilationUnit cu = new CompilationUnit(
      "wildcards",
      new List(),
      new List()
    );
    cu.is$Final = true;
    addCompilationUnit(cu);
    return cu;
  }

  syn boolean TypeDecl.matches(AbstractWildcard wildcard) = false;
  eq WildcardType.matches(AbstractWildcard wildcard) = wildcard.matches(this);
  eq WildcardExtendsType.matches(AbstractWildcard wildcard) = wildcard.matchesExtends(this);
  eq WildcardSuperType.matches(AbstractWildcard wildcard) = wildcard.matchesSuper(this);

  syn boolean AbstractWildcard.matches(AbstractWildcardType type) = true;
  eq WildcardExtends.matches(AbstractWildcardType type) = false;
  eq WildcardSuper.matches(AbstractWildcardType type) = false;
  
  syn boolean AbstractWildcard.matchesExtends(WildcardExtendsType type) = false;
  eq WildcardExtends.matchesExtends(WildcardExtendsType type) = type.extendsType() == getAccess().type();
  syn TypeDecl WildcardExtendsType.extendsType() = getAccess().type();
  
  syn boolean AbstractWildcard.matchesSuper(WildcardSuperType type) = false;
  eq WildcardSuper.matchesSuper(WildcardSuperType type) = type.superType() == getAccess().type();
  syn TypeDecl WildcardSuperType.superType() = getAccess().type();

  public abstract TypeDecl AbstractWildcard.buildTypeDecl();

  public TypeDecl Wildcard.buildTypeDecl() {
    return new WildcardType(
      new Modifiers(new List().add(new Modifier("public"))),
      "?",
      new List()
    );
  }
  public TypeDecl WildcardExtends.buildTypeDecl() {
    return new WildcardExtendsType(
      new Modifiers(new List().add(new Modifier("public"))),
      "? extends " + getAccess().type().fullName(),
      new List(),
      getAccess().type().createBoundAccess()
    );
  }
  public TypeDecl WildcardSuper.buildTypeDecl() {
    return new WildcardSuperType(
      new Modifiers(new List().add(new Modifier("public"))),
      "? super " + getAccess().type().fullName(),
      new List(),
      getAccess().type().createBoundAccess()
    );
  }
  
  syn lazy TypeDecl Program.lookupWildcard(AbstractWildcard wildcard) {
    CompilationUnit cu = wildcards();
    for(int i = 0; i < cu.getNumTypeDecl(); i++) {
      TypeDecl typeDecl = cu.getTypeDecl(i);
      if(typeDecl.matches(wildcard))
        return typeDecl;
    }
    TypeDecl decl = wildcard.buildTypeDecl();
    decl.is$Final = true;
    cu.addTypeDecl(decl);
    return decl;
  }
  eq Program.getCompilationUnit().lookupWildcard(AbstractWildcard wildcard) = lookupWildcard(wildcard);
  inh TypeDecl AbstractWildcard.lookupWildcard(AbstractWildcard wildcard);

  eq AbstractWildcard.type() = lookupWildcard(this);


  syn lazy LUBType Program.lookupLUBType(ArrayList bounds) {
    CompilationUnit cu = wildcards();
    for(int i = 0; i < cu.getNumTypeDecl(); i++) {
      TypeDecl typeDecl = cu.getTypeDecl(i);
      if(typeDecl instanceof LUBType) {
        LUBType type = (LUBType)typeDecl;
        if(type.getNumTypeBound() == bounds.size()) {
          boolean same = true;
          for(int j = 0; same && j < type.getNumTypeBound(); j++)
            if(type.getTypeBound(j).type() != bounds.get(j))
              same = false;
          if(same)
            return type;
        }
      }
    }
    List boundList = new List();
    StringBuffer name = new StringBuffer();
    for(Iterator iter = bounds.iterator(); iter.hasNext(); ) {
      TypeDecl typeDecl = (TypeDecl)iter.next();
      boundList.add(typeDecl.createBoundAccess());
      name.append("& " + typeDecl.typeName());
    }
    LUBType decl = new LUBType(
      new Modifiers(new List().add(new Modifier("public"))),
      name.toString(),
      new List(),
      boundList
    );
    decl.is$Final = true;
    cu.addTypeDecl(decl);
    return decl;
  }
  inh LUBType TypeDecl.lookupLUBType(ArrayList bounds);
  eq Program.getCompilationUnit().lookupLUBType(ArrayList bounds) = 
    lookupLUBType(bounds);

  eq LUBType.supertypeClassDecl(ClassDecl type) {
    return type.subtype(lub());
  }
  eq LUBType.supertypeInterfaceDecl(InterfaceDecl type) {
    return type.subtype(lub());
  }
  eq LUBType.subtype(TypeDecl type) {
    for(int i = 0; i < getNumTypeBound(); i++)
      if(!getTypeBound(i).type().instanceOf(type))
        return false;
    return true;
  }

  syn lazy TypeDecl Program.typeWildcard() {
    CompilationUnit cu = wildcards();
    for(int i = 0; i < cu.getNumTypeDecl(); i++) {
      TypeDecl typeDecl = cu.getTypeDecl(i);
      if(typeDecl instanceof WildcardType)
        return typeDecl;
    }
    TypeDecl decl = new WildcardType(
      new Modifiers(new List().add(new Modifier("public"))),
      "?",
      new List()
    );
    decl.is$Final = true;
    cu.addTypeDecl(decl);
    return decl;
  }
  inh TypeDecl TypeDecl.typeWildcard();
  eq Program.getCompilationUnit().typeWildcard() = typeWildcard();

  syn lazy TypeDecl Program.lookupWildcardExtends(TypeDecl bound) {
    CompilationUnit cu = wildcards();
    for(int i = 0; i < cu.getNumTypeDecl(); i++) {
      TypeDecl typeDecl = cu.getTypeDecl(i);
      if(typeDecl instanceof WildcardExtendsType && ((WildcardExtendsType)typeDecl).getAccess().type() == typeDecl)
        return typeDecl;
    }
    TypeDecl decl = new WildcardExtendsType(
      new Modifiers(new List().add(new Modifier("public"))),
      "? extends " + bound.fullName(),
      new List(),
      bound.createBoundAccess()
    );
    decl.is$Final = true;
    cu.addTypeDecl(decl);
    return decl;
  }
  eq Program.getCompilationUnit().lookupWildcardExtends(TypeDecl typeDecl) = lookupWildcardExtends(typeDecl);
  inh TypeDecl TypeDecl.lookupWildcardExtends(TypeDecl typeDecl);
  syn TypeDecl TypeDecl.asWildcardExtends() = lookupWildcardExtends(this);


  syn lazy TypeDecl Program.lookupWildcardSuper(TypeDecl bound) {
    CompilationUnit cu = wildcards();
    for(int i = 0; i < cu.getNumTypeDecl(); i++) {
      TypeDecl typeDecl = cu.getTypeDecl(i);
      if(typeDecl instanceof WildcardSuperType && ((WildcardSuperType)typeDecl).getAccess().type() == typeDecl)
        return typeDecl;
    }
    TypeDecl decl = new WildcardSuperType(
      new Modifiers(new List().add(new Modifier("public"))),
      "? extends " + bound.fullName(),
      new List(),
      bound.createBoundAccess()
    );
    decl.is$Final = true;
    cu.addTypeDecl(decl);
    return decl;
  }
  eq Program.getCompilationUnit().lookupWildcardSuper(TypeDecl typeDecl) = lookupWildcardSuper(typeDecl);
  inh TypeDecl TypeDecl.lookupWildcardSuper(TypeDecl typeDecl);
  syn TypeDecl TypeDecl.asWildcardSuper() = lookupWildcardSuper(this);

}


aspect NewGenerics {

  public Access TypeVariable.createQualifiedAccess() {
    return createBoundAccess();
  }

  eq TypeVariable.accessibleFrom(TypeDecl type) = true;
}
