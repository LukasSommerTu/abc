aspect Generics {
  refine TypeAnalysis eq ClassAccess.type() {
    GenericClassDecl d = (GenericClassDecl)TypeAnalysis.ClassAccess.type();
    ParClassDecl typeDecl = new ParClassDecl();
    typeDecl.setModifiers((Modifiers)d.getModifiers().fullCopy());
    typeDecl.setID(d.getID());
    d.addParTypeDecl(typeDecl);
    typeDecl.setArgumentList(new List().add(qualifier().type().createBoundAccess()));
    return typeDecl;
  }

  refine TypeAnalysis eq ConditionalExpr.type() {
    TypeDecl type = TypeAnalysis.ConditionalExpr.type();
    TypeDecl trueType = getTrueExpr().type();
    TypeDecl falseType = getFalseExpr().type();

    if(type.isUnknown() && trueType.isReferenceType() && falseType.isReferenceType()) {
      ArrayList list = new ArrayList();
      list.add(trueType);
      list.add(falseType);
      return type.lookupLUBType(list);
    }
    return type;
  }

  interface GenericTypeDecl {
    syn boolean isGenericType();
    int getNumTypeParameter();
    TypeVariable getTypeParameter(int index);
    public String fullName();
    public String typeName();
    sons BodyDecl:BodyDecl* TypeParameter:TypeVariable* ParTypeDecl:ParTypeDecl*;
  }
  GenericClassDecl implements GenericTypeDecl;
  GenericInterfaceDecl implements GenericTypeDecl;
  
  syn boolean TypeDecl.isGenericType() = false;
  eq GenericTypeDecl.isGenericType() = true;

  // Brute force replacesment with generic one in AST
  // make sure that the AST has not beed traversed yet!
  public TypeDecl TypeDecl.makeGeneric(bytecode.Signatures.ClassSignature s) {
    return this;
  }
  public TypeDecl ClassDecl.makeGeneric(bytecode.Signatures.ClassSignature s) {
    if(s.hasFormalTypeParameters()) {
      ASTNode node = getParent();
      int index = node.getIndexOfChild(this);
      node.setChild(
          new GenericClassDecl(
            getModifiersNoTransform(),
            getID(),
            s.hasSuperclassSignature() ? new Opt(s.superclassSignature()) : getSuperClassAccessOptNoTransform(),
            s.hasSuperinterfaceSignature() ? s.superinterfaceSignature() : getImplementsListNoTransform(),
            getBodyDeclListNoTransform(),
            s.typeParameters(),
            new List(),
            new Opt()
            ),
          index
          );
      return (TypeDecl)node.getChildNoTransform(index);
    }
    else {
      if(s.hasSuperclassSignature())
        setSuperClassAccessOpt(new Opt(s.superclassSignature()));
      if(s.hasSuperinterfaceSignature())
        setImplementsList(s.superinterfaceSignature());
      return this;
    }
  }

  public TypeDecl InterfaceDecl.makeGeneric(bytecode.Signatures.ClassSignature s) {
    if(s.hasFormalTypeParameters()) {
      ASTNode node = getParent();
      int index = node.getIndexOfChild(this);
      node.setChild(
          new GenericInterfaceDecl(
            getModifiersNoTransform(),
            getID(),
            s.hasSuperinterfaceSignature() ? s.superinterfaceSignature() : getSuperInterfaceIdListNoTransform(),
            getBodyDeclListNoTransform(),
            s.typeParameters(),
            new List(),
            new Opt()
            ),
          index
          );
      return (TypeDecl)node.getChildNoTransform(index);
    }
    else {
      if(s.hasSuperinterfaceSignature())
        setSuperInterfaceIdList(s.superinterfaceSignature());
      return this;
    }
  }
  public TypeDecl GenericTypeDecl.makeGeneric(bytecode.Signatures.ClassSignature s) {
    return (TypeDecl)this;
  }


  interface ParTypeDecl {
    syn String name();
    int getNumArgument();
    Access getArgument(int index);
    int getNumTypeParameter();
    TypeVariable getTypeParameter(int index);
    syn boolean isParameterizedType();
    syn boolean isRawType();
    public String typeName();
  }
  ParClassDecl implements ParTypeDecl;
  ParInterfaceDecl implements ParTypeDecl;
  
  syn boolean TypeDecl.isParameterizedType() = false;
  eq ParTypeDecl.isParameterizedType() = true;

  syn boolean TypeDecl.isRawType() = false;
  eq ParClassDecl.isRawType() = false;
  eq ParInterfaceDecl.isRawType() = false;
  eq RawClassDecl.isRawType() = true;
  eq RawInterfaceDecl.isRawType() = true;
}

aspect GenericsTypeAnalysis {


  eq ParameterizedTypeAccess.type() {
    //System.err.println("Computing type for parameterized type access " + getID());
    if(decl() instanceof GenericTypeDecl) {
      GenericTypeDecl decl = (GenericTypeDecl)decl();
      //System.err.println("  need to lookupParTypeDecl");
      //dumpNoRewrite(2);
      TypeDecl result = (TypeDecl)decl.lookupParTypeDecl(this);
      //System.err.println(" type computed");
      return result;
    }
    return decl();
  }
  
}

aspect GenericsErasure {
  syn TypeDecl TypeDecl.erasure() {
    if(isAnonymous() || isLocalClass())
      return this;
    if(!isNestedType())
      return this;
    return extractSingleType(enclosingType().erasure().memberTypes(name()));
  }
  eq ParClassDecl.erasure() = genericDecl();
  eq ParInterfaceDecl.erasure() = genericDecl();
  eq TypeVariable.erasure() = getTypeBound(0).type().erasure(); // Skip last erasure?
  eq ArrayDecl.erasure() = elementType().erasure().arrayType();
}

aspect GenericsTypeCheck {
  public void GenericClassDecl.typeCheck() {
    super.typeCheck();
    if(instanceOf(typeThrowable()))
      error(" generic class " + fullName() + " may not directly or indirectly inherit java.lang.Throwable");
  }
  public void GenericInterfaceDecl.typeCheck() {
    super.typeCheck();
    if(instanceOf(typeThrowable()))
      error(" generic interface " + fullName() + " may not directly or indirectly inherit java.lang.Throwable");
  }
  inh TypeDecl GenericClassDecl.typeThrowable();
  inh TypeDecl GenericInterfaceDecl.typeThrowable();

  public void ParameterizedTypeAccess.typeCheck() {
    super.typeCheck();
    if(!decl().isGenericType()) {
      error(decl().fullName() + " is not a generic type but used as one in " + this);
    }
    else {
      GenericTypeDecl decl = (GenericTypeDecl)decl();
      if(decl.getNumTypeParameter() != getNumTypeArgument()) {
        error(decl.fullName() + " takes " + decl.getNumTypeParameter() + " type parameters, not " + getNumTypeArgument() + " as used in " + this);
      }
      else {
        ParTypeDecl typeDecl = (ParTypeDecl)type();
        for(int i = 0; i < getNumTypeArgument(); i++) {
          if(!getTypeArgument(i).type().instanceOf(decl.getTypeParameter(i))) {
            error("type argument " + i + " is of type " + getTypeArgument(i).type().fullName() 
              + " which is not a subtype of " + decl.getTypeParameter(i));
          }
          //if(!typeDecl.getTypeParameter(i).validArgument(getTypeArgument(i).type())) {
          //if(!getTypeArgument(i).type().instanceOf(typeDecl.getTypeParameter(i))) {
          //  error("type argument " + i + " is of type " + getTypeArgument(i).type().fullName() 
          //    + " which is not a valid argument to type parameter " + typeDecl.getTypeParameter(i));
          //}
        }
      }
    }
  }

  syn lazy boolean TypeVariable.validArgument(TypeDecl type) {
    // here be dragons
    if(type.isWildcard())
      return true;
    if(type instanceof TypeVariable) {
      type = type.erasure();
    }
    for(int i = 0; i < getNumTypeBound(); i++)
      if(!type.instanceOf(getTypeBound(i).type())) {
        //System.out.println(type.fullName() + " is not an instanceof " + getTypeBound(i).type().fullName());
        //System.out.println(type.getClass().getName());
        //System.out.println(getTypeBound(i).type().getClass().getName());
        return false;
      }
    return true;
  }

}

aspect GenericsNameBinding {

  eq ParClassDecl.getArgument().nameType() = NameType.TYPE_NAME;
  eq ParInterfaceDecl.getArgument().nameType() = NameType.TYPE_NAME;

  // Type arguments lookup types in unqualified scope and not in remote type when using dot notation
  eq ParameterizedTypeAccess.getTypeArgument().lookupType(String name) = unqualifiedScope().lookupType(name);
  eq ParTypeAccess.getTypeArgument().lookupType(String name) = unqualifiedScope().lookupType(name);

  eq GenericClassDecl.getParTypeDecl().isNestedType() = isNestedType();
  eq GenericClassDecl.getParTypeDecl().enclosingType() = enclosingType();
  eq GenericClassDecl.getTypeParameter().isNestedType() = true;
  eq GenericClassDecl.getTypeParameter().enclosingType() = this;
  
  eq GenericInterfaceDecl.getParTypeDecl().isNestedType() = isNestedType();
  eq GenericInterfaceDecl.getParTypeDecl().enclosingType() = enclosingType();
  eq GenericInterfaceDecl.getTypeParameter().isNestedType() = true;
  eq GenericInterfaceDecl.getTypeParameter().enclosingType() = this;

  public SimpleSet GenericTypeDecl.addTypeVariables(SimpleSet c, String name) {
    for(int i = 0; i < getNumTypeParameter(); i++) {
      TypeVariable p = getTypeParameter(i);
      if(p.name().equals(name)) {
        c = c.add(p);
      }
    }
    return c;
  }

  eq GenericInterfaceDecl.getSuperInterfaceId().lookupType(String name) {
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    if(!c.isEmpty()) return c;
    return lookupType(name);
  }
  eq GenericClassDecl.getSuperClassAccess().lookupType(String name) {
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    if(!c.isEmpty()) return c;
    return lookupType(name);
  }
  eq GenericClassDecl.getImplements().lookupType(String name) {
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    if(!c.isEmpty()) return c;
    return lookupType(name);
  }


  eq GenericTypeDecl.getTypeParameter().lookupType(String name) {
    SimpleSet c = memberTypes(name);
    c = addTypeVariables(c, name);
    if(!c.isEmpty())
      return c;
    // 8.5.2
    if(isClassDecl() && isStatic() && !isTopLevelType()) {
      for(Iterator iter = lookupType(name).iterator(); iter.hasNext(); ) {
        TypeDecl d = (TypeDecl)iter.next();
        if(d.isStatic() || (d.enclosingType() != null && instanceOf(d.enclosingType()))) {
          c = c.add(d);
        }
      }
    }
    else
      c = lookupType(name);
    if(!c.isEmpty())
      return c;
    return topLevelType().lookupType(name); // Fix to search imports
  }
  eq GenericTypeDecl.getBodyDecl(int index).lookupType(String name) {
    SimpleSet c = memberTypes(name);
    if(getBodyDecl(index).visibleTypeParameters())
      c = addTypeVariables(c, name);
    if(!c.isEmpty())
      return c;
    // 8.5.2
    if(isClassDecl() && isStatic() && !isTopLevelType()) {
      for(Iterator iter = lookupType(name).iterator(); iter.hasNext(); ) {
        TypeDecl d = (TypeDecl)iter.next();
        if(d.isStatic() || (d.enclosingType() != null && instanceOf(d.enclosingType()))) {
          c = c.add(d);
        }
      }
    }
    else
      c = lookupType(name);
    if(!c.isEmpty())
      return c;
    return topLevelType().lookupType(name); // Fix to search imports
    // include type parameters if not static
  }

  public SimpleSet GenericTypeDecl.memberTypes(String name) {
    // a type variable may be used in extends and implements clauses
    // type variable may then be used qualified when instantiating extends and implements clauses
    // this will result in remote lookups of the type variables
    // therefore they alone must be considered and not include localLookupType that
    // will result in a circularity
    SimpleSet c = addTypeVariables(SimpleSet.emptySet, name);
    if(!c.isEmpty())
      return c;
    return super.memberTypes(name);
  }

  public void ParClassDecl.collectErrors() {
    // Disable error check for ParClassDecl which is an instanciated GenericClassDecl
  }
  public void ParInterfaceDecl.collectErrors() {
    // Disable error check for ParInterfaceDecl which is an instanciated GenericInterfaceDecl
  }

  rewrite ParTypeAccess {
    when(getTypeAccess() instanceof TypeAccess)
    to TypeAccess {
      TypeAccess t = (TypeAccess)getTypeAccess();
      return new ParameterizedTypeAccess(t.getPackage(), t.getID(), getTypeArgumentList());
    }
    when(getTypeAccess() instanceof Dot && ((Dot)getTypeAccess()).getRight() instanceof TypeAccess)
    to Access {
      Dot dot = (Dot)getTypeAccess();
      TypeAccess t = (TypeAccess)dot.getRight();
      dot.setRight(new ParameterizedTypeAccess(t.getPackage(), t.getID(), getTypeArgumentList()));
      return dot;
    }
  }

  syn boolean TypeAccess.isExactTypeAccess() = true;
  eq ArrayTypeAccess.isExactTypeAccess() = false;
  eq ParameterizedTypeAccess.isExactTypeAccess() = false;
  eq RawTypeAccess.isExactTypeAccess() = false;
  
  syn boolean TypeAccess.isRaw() {
    if(!decl().isGenericType())
      return false;
    if(getParent() instanceof ParTypeAccess)
      return false;
    if(!(getParent() instanceof AbstractDot))
      return true;
    AbstractDot d = (AbstractDot)getParent();
    if(d.isThisAccess())
      return false;
    if(d.isTypeAccess() && d.type().isTypeVariable())
      return false;
    return true;
  }

  syn boolean ParameterizedTypeAccess.isRawAccess() = false;
  eq RawTypeAccess.isRawAccess() = true;

}
aspect LookupParTypeDecl {
  eq TypeVariable.fullName() = name();

  syn boolean Access.sameSignature(Access a) circular [true] = false;
  eq AbstractDot.sameSignature(Access a) {
    if(a instanceof AbstractDot)
      return lastAccess().sameSignature(((AbstractDot)a).lastAccess());
    return lastAccess().sameSignature(a);
  }
  eq TypeAccess.sameSignature(Access a) {
    if(!(a instanceof TypeAccess))
      return false;
    TypeAccess ta  = (TypeAccess)a;
    if(type() instanceof TypeVariable && ta.type() instanceof TypeVariable)
      return ((TypeVariable)type()).sameSignature((TypeVariable)ta.type());
    return type() == ta.type();
  }
  syn boolean TypeVariable.sameSignature(TypeVariable v) circular [true] {
    if(!name().equals(v.name()) || getNumTypeBound() != v.getNumTypeBound())
      return false;
    for(int i = 0; i < getNumTypeBound(); i++)
      if(!getTypeBound(i).sameSignature(v.getTypeBound(i)))
        return false;
    return true;
  }

  eq ParameterizedTypeAccess.sameSignature(Access a) {
    if(a instanceof ParameterizedTypeAccess && decl() == ((ParameterizedTypeAccess)a).decl()) {
      ParameterizedTypeAccess ta = (ParameterizedTypeAccess)a;
      for(int i = 0; i < getNumTypeArgument(); i++)
        if(!getTypeArgument(i).sameSignature(ta.getTypeArgument(i)))
          return false;
      return true;
    }
    return false;
  }

  eq TypeVariableAccess.sameSignature(Access a) = type() == a.type();

  eq Wildcard.sameSignature(Access a) = type() == a.type();
  eq WildcardExtends.sameSignature(Access a) = type() == a.type();
  eq WildcardSuper.sameSignature(Access a) = type() == a.type();

  syn boolean ParTypeDecl.sameSignature(ParameterizedTypeAccess a) circular [true] {
    if(getNumArgument() != a.getNumTypeArgument())
      return false;
    for(int i = 0; i < getNumArgument(); i++)
      if(!getArgument(i).sameSignature(a.getTypeArgument(i)))
        return false;
    return true;
  }

  syn String TypeDecl.typeSignature() = fullName();
  eq TypeVariable.typeSignature() = fullName();

  syn String ParTypeDecl.typeSignature() {
    StringBuffer s = new StringBuffer();
    s.append(genericTypeDecl().fullName());
    s.append("<");
    for(int i = 0; i < getNumArgument(); i++)
      s.append(getArgument(i).typeSignature() + ",");
    s.append(">");
    return s.toString();
  }

  syn String Access.typeSignature() = "";
  eq AbstractDot.typeSignature() = lastAccess().typeSignature();
  eq TypeAccess.typeSignature() = type().typeSignature();
  eq ArrayTypeAccess.typeSignature() {
    StringBuffer s = new StringBuffer();
    s.append(getAccess().typeSignature());
    for(int i = 0; i < getDimension(); i++)
      s.append("[]");
    return s.toString();
  }
  eq ParameterizedTypeAccess.typeSignature() {
    StringBuffer s = new StringBuffer();
    s.append(decl().genericTypeDecl().fullName());
    s.append("<");
    for(int i = 0; i < getNumTypeArgument(); i++)
      s.append(getTypeArgument(i).typeSignature() + ",");
    s.append(">");
    return s.toString();
  }
  eq TypeVariableAccess.typeSignature() = type().name();
  eq Wildcard.typeSignature()  = "wildcards.?";
  eq WildcardExtends.typeSignature() = super.typeSignature() + " extends " + getAccess().typeSignature();
  eq WildcardSuper.typeSignature() = super.typeSignature() + " super " + getAccess().typeSignature();

  syn TypeDecl TypeDecl.genericTypeDecl() = unknownType();
  eq GenericTypeDecl.genericTypeDecl() = this;
  eq ParClassDecl.genericTypeDecl() = enclosingGenericTypeDecl();
  eq ParInterfaceDecl.genericTypeDecl() = enclosingGenericTypeDecl();

  inh TypeDecl ParTypeDecl.enclosingGenericTypeDecl();

  eq GenericClassDecl.getParTypeDecl().enclosingGenericTypeDecl() = this;
  eq GenericInterfaceDecl.getParTypeDecl().enclosingGenericTypeDecl() = this;
  eq GenericClassDecl.getRawType().enclosingGenericTypeDecl() = this;
  eq GenericInterfaceDecl.getRawType().enclosingGenericTypeDecl() = this;
  eq Program.getCompilationUnit().enclosingGenericTypeDecl() = unknownType();

  syn lazy TypeDecl GenericTypeDecl.lookupParTypeDecl(ParameterizedTypeAccess p) {
    StringBuffer s = new StringBuffer();
    s.append(fullName());
    s.append("<");
    for(int i = 0; i < p.getNumTypeArgument(); i++)
      s.append(p.getTypeArgument(i).typeSignature() + ",");
    s.append(">");
    String signature = s.toString();
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParTypeDecl decl = (ParTypeDecl)getParTypeDecl(i);
      if(decl.sameSignature(p)) {
        return (TypeDecl)decl;
      }
    }
    Object o = this;
    if(o instanceof GenericClassDecl) {
      ParClassDecl typeDecl = p.getNumTypeArgument() == 0 ? new RawClassDecl() : new ParClassDecl();
      typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
      typeDecl.setID(getID());
      ((GenericClassDecl)o).addParTypeDecl(typeDecl);
      typeDecl.setArgumentList(createArgumentList(p));
      typeDecl.is$Final = true;
      return typeDecl;
    }
    else if(o instanceof GenericInterfaceDecl) {
      ParInterfaceDecl typeDecl = p.getNumTypeArgument() == 0 ? new RawInterfaceDecl() : new ParInterfaceDecl();
      typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
      typeDecl.setID(getID());
      ((GenericInterfaceDecl)o).addParTypeDecl(typeDecl);
      typeDecl.setArgumentList(createArgumentList(p));
      typeDecl.is$Final = true;
      return typeDecl;
    }
    throw new Error("Can not parameterize " + o.getClass().getName());
  }
  public List GenericTypeDecl.createArgumentList(ParameterizedTypeAccess params) {
    List list = new List();
    for(int i = 0; i < params.getNumTypeArgument(); i++)
      list.add(params.getTypeArgument(i).copyTypeArguments());
    return list;
  }

  // used by methods inference when looking up paramterizations from wildcards
  syn lazy TypeDecl GenericTypeDecl.lookupParTypeDecl(ArrayList list) {
    StringBuffer s = new StringBuffer();
    s.append(fullName());
    s.append("<");
    for(int i = 0; i < list.size(); i++)
      s.append(((TypeDecl)list.get(i)).typeSignature() + ",");
    s.append(">");
    String signature = s.toString();
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParTypeDecl decl = (ParTypeDecl)getParTypeDecl(i);
      if(decl.typeSignature().equals(signature)) {
        return (TypeDecl)decl;
      }
    }
    Object o = this;
    if(o instanceof GenericClassDecl) {
      ParClassDecl typeDecl = list.size() == 0 ? new RawClassDecl() : new ParClassDecl();
      typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
      typeDecl.setID(getID());
      ((GenericClassDecl)o).addParTypeDecl(typeDecl);
      typeDecl.setArgumentList(createArgumentList(list));
      typeDecl.is$Final = true;
      return typeDecl;
    }
    else if(o instanceof GenericInterfaceDecl) {
      ParInterfaceDecl typeDecl = list.size() == 0 ? new RawInterfaceDecl() : new ParInterfaceDecl();
      typeDecl.setModifiers((Modifiers)getModifiers().fullCopy());
      typeDecl.setID(getID());
      ((GenericInterfaceDecl)o).addParTypeDecl(typeDecl);
      typeDecl.setArgumentList(createArgumentList(list));
      typeDecl.is$Final = true;
      return typeDecl;
    }
    throw new Error("Can not parameterize " + o.getClass().getName());
  }
  public List GenericTypeDecl.createArgumentList(ArrayList params) {
    List list = new List();
    for(Iterator iter = params.iterator(); iter.hasNext(); )
      list.add(((TypeDecl)iter.next()).createBoundAccess());
    return list;
  }

  public Access Expr.copyTypeArguments() { throw new Error("Operation copyTypeArguments() not supported for " + getClass().getName()); }
  public Access AbstractDot.copyTypeArguments() { return lastAccess().copyTypeArguments(); }
  public Access TypeAccess.copyTypeArguments() { return type().createBoundAccess(); }
  public Access ParameterizedTypeAccess.copyTypeArguments() {
    List list = new List();
    for(int i = 0; i < getNumTypeArgument(); i++)
      list.add(getTypeArgument(i).copyTypeArguments());
    if(isQualified())
      return qualifier().copyTypeArguments().qualifiesAccess(new ParameterizedTypeAccess("", decl().name(), list));
    else
      return new ParameterizedTypeAccess(decl().packageName(), decl().name(), list);
  }
  public Access TypeVariableAccess.copyTypeArguments() { return type().createBoundAccess(); }
  public Access Wildcard.copyTypeArguments() { return new Wildcard(); }
  public Access WildcardExtends.copyTypeArguments() { return new WildcardExtends(getAccess().copyTypeArguments()); }
  public Access WildcardSuper.copyTypeArguments() { return new WildcardSuper(getAccess().copyTypeArguments()); }
  
  public Access TypeDecl.substitute(ParTypeDecl parTypeDecl) {
    return createBoundAccess();
  }
  public Access TypeVariable.substitute(ParTypeDecl parTypeDecl) {
    TypeDecl typeDecl = this;
    //System.err.println("Searching for substitution for variable " + this);
    GenericTypeDecl g = (GenericTypeDecl)parTypeDecl.genericDecl();
    //System.err.println("  searching candidate class " + g.fullName());
    for(int i = 0; i < g.getNumTypeParameter(); i++) {
      if(g.getTypeParameter(i) == typeDecl) {
        //System.err.println("  found variable as parameter " + i);
        typeDecl = parTypeDecl.getArgument(i).type();
        return typeDecl.createBoundAccess();
        //return typeDecl.createTypeVariableAccess();
      }
    }
    return typeDecl.createBoundAccess();
  }
  
  public Access TypeDecl.substituteReturnType(ParTypeDecl parTypeDecl) {
    return createBoundAccess();
  }
  public Access ArrayDecl.substituteReturnType(ParTypeDecl parTypeDecl) {
    return new ArrayTypeAccess(componentType().substituteReturnType(parTypeDecl), 1);
  }
  inh TypeDecl TypeVariable.typeObject();
  
  public Access TypeVariable.substituteReturnType(ParTypeDecl parTypeDecl) {
    TypeDecl typeDecl = this;
    //System.err.println("Searching for substitution for variable " + name());
    GenericTypeDecl g = (GenericTypeDecl)parTypeDecl.genericDecl();
    /*
    TypeVariable v = (TypeVariable)((TypeDecl)g).lookupTypeVariable(name());
    if(v != null) {
      System.err.println("  found variable");

    }*/
    for(int i = 0; i < g.getNumTypeParameter(); i++) {
      if(g.getTypeParameter(i) == typeDecl) {
        //System.err.println("  found variable as parameter " + i);
        //System.err.println(parTypeDecl.getArgument(i).dumpTreeNoRewrite());
        typeDecl = parTypeDecl.getArgument(i).type();
        //System.err.println("  computed type of argument");
        if(typeDecl instanceof WildcardType) {
          return typeObject().createBoundAccess();
        }
        else if(typeDecl instanceof WildcardExtendsType) {
          WildcardExtendsType t = (WildcardExtendsType)typeDecl;
          return t.extendsType().createBoundAccess();
        }
        else if(typeDecl instanceof WildcardSuperType) {
          return typeObject().createBoundAccess();
        }
        //return typeDecl.createTypeVariableAccess();
        return typeDecl.createBoundAccess();
      }
    }
    return typeDecl.createBoundAccess();
  }
  public Access TypeDecl.substituteParameterType(ParTypeDecl parTypeDecl) {
    return createBoundAccess();
  }

  inh TypeDecl TypeVariable.typeNull();
  public Access TypeVariable.substituteParameterType(ParTypeDecl parTypeDecl) {
    TypeDecl typeDecl = this;
    //System.err.println("Searching for substitution for variable " + this);
    GenericTypeDecl g = (GenericTypeDecl)parTypeDecl.genericDecl();
    //System.err.println("  searching candidate class " + g.fullName());
    for(int i = 0; i < g.getNumTypeParameter(); i++) {
      if(g.getTypeParameter(i) == typeDecl) {
        //System.err.println("  found variable as parameter " + i);
        typeDecl = parTypeDecl.getArgument(i).type();
        if(typeDecl instanceof WildcardType) {
          return typeNull().createQualifiedAccess();
        }
        else if(typeDecl instanceof WildcardExtendsType) {
          return typeNull().createQualifiedAccess();
        }
        else if(typeDecl instanceof WildcardSuperType) {
          WildcardSuperType t = (WildcardSuperType)typeDecl;
          return t.superType().createBoundAccess();
        }
        //return typeDecl.createTypeVariableAccess();
        return typeDecl.createBoundAccess();
      }
    }
    return typeDecl.createBoundAccess();
  }
  
  public Access Access.substitute(ParTypeDecl parTypeDecl) {
    // can find context
    return type().substitute(parTypeDecl);
  }
  public Access ParameterizedTypeAccess.substitute(ParTypeDecl parTypeDecl) {
    // can find context
    return new ParameterizedTypeAccess(getPackage(), getID(), getTypeArgumentList().substitute(parTypeDecl));
  }
  
  public Access Access.substituteReturnType(ParTypeDecl parTypeDecl) {
    // can find context
    return type().substituteReturnType(parTypeDecl);
  }
  public Access ParameterizedTypeAccess.substituteReturnType(ParTypeDecl parTypeDecl) {
    // can find context
    return new ParameterizedTypeAccess(getPackage(), getID(),
      getTypeArgumentList().substitute(parTypeDecl));
  }
  
  public Access Access.substituteParameterType(ParTypeDecl parTypeDecl) {
    // can find context
    return type().substituteParameterType(parTypeDecl);
  }
  public Access ParameterizedTypeAccess.substituteParameterType(ParTypeDecl parTypeDecl) {
    // can find context
    return new ParameterizedTypeAccess(getPackage(), getID(),
      getTypeArgumentList().substitute(parTypeDecl));
  }


  public List List.substitute(ParTypeDecl parTypeDecl) {
    // can find context
    List list = new List();
    for(int i = 0; i < getNumChild(); i++) {
      ASTNode node = getChild(i);
      if(node instanceof Access) {
        Access a = (Access)node;
        list.add(a.substitute(parTypeDecl));
      }
      else if(node instanceof VariableArityParameterDeclaration) {
        VariableArityParameterDeclaration p = (VariableArityParameterDeclaration)node;
        list.add(
          new VariableArityParameterDeclaration(
            (Modifiers)p.getModifiers().fullCopy(),
            p.getTypeAccess().substituteParameterType(parTypeDecl),
            p.getID(),
            new List()
          )
        );
      }
      else if(node instanceof ParameterDeclaration) {
        // this is always parameters
        ParameterDeclaration p = (ParameterDeclaration)node;
        list.add(
          new ParameterDeclaration(
            (Modifiers)p.getModifiers().fullCopy(),
            p.getTypeAccess().substituteParameterType(parTypeDecl),
            p.getID()
          )
        );
      }
      else if(node instanceof TypeVariable) {
        TypeVariable tv = (TypeVariable)node;
        list.add(
          new TypeVariable(
            (Modifiers)tv.getModifiers().fullCopy(),
            tv.getID(),
            (List)tv.getBodyDeclList().fullCopy(),
            tv.getTypeBoundList().substitute(parTypeDecl)
          )
        );
      }
      else {
        throw new Error("Can only substitute lists of access nodes but node number " + i + " is of type " + node.getClass().getName());
      }
    }
    return list;
  }

  syn lazy List ParClassDecl.getTypeParameterList() {
    GenericClassDecl decl = (GenericClassDecl)genericTypeDecl();
    List list = (List)decl.getTypeParameterList().fullCopy();
    return list;
  }
  syn lazy Opt ParClassDecl.getSuperClassAccessOpt() {
    GenericClassDecl decl = (GenericClassDecl)genericTypeDecl();
    Opt opt;
    //System.err.println("Begin substituting extends clause");
    if(decl.hasSuperClassAccess())
      opt = new Opt((decl.getSuperClassAccess().substitute(this)));
    else
      opt = new Opt();
    //System.err.println("End substituting extends clause");
    return opt;
  }
  syn lazy List ParClassDecl.getImplementsList() {
    GenericClassDecl decl = (GenericClassDecl)genericTypeDecl();
    //System.err.println("Begin substituting implements list");
    List list = decl.getImplementsList().substitute(this);
    //System.err.println("End substituting implements list");
    return list;
  }
  syn lazy List ParClassDecl.getBodyDeclList() = new List();

  syn lazy List ParInterfaceDecl.getTypeParameterList() {
    GenericInterfaceDecl decl = (GenericInterfaceDecl)genericTypeDecl();
    //System.err.println("Begin substituting type parameter list");
    List list = decl.getTypeParameterList().substitute(this);
    //System.err.println("End substituting type parameter list");
    return list;
  }
  syn lazy List ParInterfaceDecl.getSuperInterfaceIdList() {
    GenericInterfaceDecl decl = (GenericInterfaceDecl)genericTypeDecl();
    //System.err.println("Begin substituting implements list");
    List list = decl.getSuperInterfaceIdList().substitute(this);
    //System.err.println("End substituting implements list");
    return list;
  }
  syn lazy List ParInterfaceDecl.getBodyDeclList() = new List();

  syn boolean ASTNode.usesTypeVariable() {
    for(int i = 0; i < getNumChild(); i++)
      if(getChild(i).usesTypeVariable())
        return true;
    return false;
  }
  eq MethodDecl.usesTypeVariable() = 
    getModifiers().usesTypeVariable() || getTypeAccess().usesTypeVariable() ||
    getParameterList().usesTypeVariable() || getExceptionList().usesTypeVariable();
  eq TypeAccess.usesTypeVariable() = decl().isTypeVariable() || super.usesTypeVariable();
  eq TypeVariableAccess.usesTypeVariable() = true;


  syn lazy HashMap ParTypeDecl.localMethodsSignatureMap() {
    HashMap map = new HashMap(getNumBodyDecl());
    for(int i = 0; i < genericTypeDecl().getNumBodyDecl(); i++) {
      if(genericTypeDecl().getBodyDecl(i) instanceof MethodDecl) {
        MethodDecl decl = (MethodDecl)genericTypeDecl().getBodyDecl(i);
        if(decl.usesTypeVariable()) {
          BodyDecl b = decl.p(this);
          addBodyDecl(b);
          decl = (MethodDecl)getBodyDecl(getNumBodyDecl()-1);
        }
        map.put(decl.signature(), decl);
      }
    }
    return map;
  }

  // TODO: not rebuild already used methods
  public Iterator ParTypeDecl.methodsIterator() {
    final ParTypeDecl host = this;
    return new Iterator() {
      private Iterator iter = genericTypeDecl().methodsIterator();
      public boolean hasNext() {
        return iter.hasNext();
      }
      public Object next() {
        MethodDecl m = (MethodDecl)iter.next();
        if(m.usesTypeVariable()) {
          BodyDecl b = m.p(host);
          b.is$Final = true;
          addBodyDecl(b);
          return b;
        } 
        else
          return m;
      }
      public void remove() { throw new UnsupportedOperationException(); }
    };
  }

  syn lazy SimpleSet ParTypeDecl.fields(String name) {
    SimpleSet set = SimpleSet.emptySet;
    for(Iterator iter = genericTypeDecl().fields(name).iterator(); iter.hasNext(); ) {
      FieldDeclaration f = (FieldDeclaration)iter.next();
      BodyDecl b = f.p(this);
      b.is$Final = true;
      addBodyDecl(b);
      set = set.add(b);
    }
    return set;
  }

  syn lazy SimpleSet ParTypeDecl.memberTypes(String name) {
    SimpleSet set = SimpleSet.emptySet;
    for(Iterator iter = genericTypeDecl().memberTypes(name).iterator(); iter.hasNext(); ) {
      TypeDecl t = (TypeDecl)iter.next();
      BodyDecl b;
      TypeDecl typeDecl;
      if(t instanceof ClassDecl) {
        ClassDecl classDecl = (ClassDecl)t;
        typeDecl = classDecl.p(this);
        b = new MemberClassDecl((ClassDecl)typeDecl);
        b.is$Final = true;
        addBodyDecl(b);
        set = set.add(typeDecl);
      }
      else if(t instanceof InterfaceDecl) {
        InterfaceDecl interfaceDecl = (InterfaceDecl)t;
        typeDecl = interfaceDecl.p(this);
        b = new MemberInterfaceDecl((InterfaceDecl)typeDecl);
        b.is$Final = true;
        addBodyDecl(b);
        set = set.add(typeDecl);
      }
      else if(t instanceof TypeVariable) {
        // TODO: check me
      }
    }
    return set;
  }

  syn lazy Collection ParTypeDecl.constructors() {
    Collection set = new ArrayList();
    for(Iterator iter = genericTypeDecl().constructors().iterator(); iter.hasNext(); ) {
      ConstructorDecl c = (ConstructorDecl)iter.next();
      BodyDecl b = c.p(this);
      b.is$Final = true;
      addBodyDecl(b);
      set.add(b);
    }
    return set;
  }

  public BodyDecl BodyDecl.p(ParTypeDecl parTypeDecl) {
    throw new Error("Operation p not supported for " + getClass().getName());
  }

  public BodyDecl MethodDecl.p(ParTypeDecl parTypeDecl) {
    //System.out.println("Begin substituting " + signature() + " in " + hostType().typeName() + " with " + parTypeDecl.typeSignature());
    MethodDecl m = new MethodDeclSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getTypeAccess().substituteReturnType(parTypeDecl),
      getID(),
      getParameterList().substitute(parTypeDecl),
      new List(),
      getExceptionList().substitute(parTypeDecl),
      new Opt(),
      this
    );
    //System.out.println("End substituting " + signature());
    return m;
  }

  public BodyDecl GenericMethodDecl.p(ParTypeDecl parTypeDecl) {
    //System.out.println("Begin substituting generic " + signature() + " in " + hostType().typeName() + " with " + parTypeDecl.typeSignature());
    MethodDecl m = new GenericMethodDecl(
      (Modifiers)getModifiers().fullCopy(),
      getTypeAccess().substituteReturnType(parTypeDecl),
      getID(),
      getParameterList().substitute(parTypeDecl),
      new List(),
      getExceptionList().substitute(parTypeDecl),
      new Opt(),
      (List)getTypeParameterList().fullCopy(),
      new List()
    );
    //System.out.println("End substituting generic " + signature());
    return m;
  }
  
  

  public BodyDecl ConstructorDecl.p(ParTypeDecl parTypeDecl) {
    ConstructorDecl c = new ConstructorDeclSubstituted(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      getParameterList().substitute(parTypeDecl),
      getExceptionList().substitute(parTypeDecl),
      new Opt(),
      new Block(),
      this
    );
    return c;
  }
  public BodyDecl FieldDeclaration.p(ParTypeDecl parTypeDecl) {
    FieldDeclaration f = new FieldDeclaration(
      (Modifiers)getModifiers().fullCopy(),
      getTypeAccess().substituteReturnType(parTypeDecl),
      getID(),
      new Opt()
    );
    return f;
  }
  public ClassDecl ClassDecl.p(ParTypeDecl parTypeDecl) {
    ClassDecl c = new ClassDecl(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      (Opt)getSuperClassAccessOpt().fullCopy(),
      getImplementsList().substitute(parTypeDecl),
      new List()
    );
    return c;
  }
  public ClassDecl GenericClassDecl.p(ParTypeDecl parTypeDecl) {
    GenericClassDecl c = new GenericClassDecl(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      (Opt)getSuperClassAccessOpt().fullCopy(),
      getImplementsList().substitute(parTypeDecl),
      new List(),
      (List)getTypeParameterList().fullCopy(),
      new List(),
      new Opt()
    );
    return c;
  }
  public InterfaceDecl InterfaceDecl.p(ParTypeDecl parTypeDecl) {
    InterfaceDecl c = new InterfaceDecl(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      getSuperInterfaceIdList().substitute(parTypeDecl),
      new List()
    );
    return c;
  }
  public InterfaceDecl GenericInterfaceDecl.p(ParTypeDecl parTypeDecl) {
    GenericInterfaceDecl c = new GenericInterfaceDecl(
      (Modifiers)getModifiers().fullCopy(),
      getID(),
      getSuperInterfaceIdList().substitute(parTypeDecl),
      new List(),
      (List)getTypeParameterList().fullCopy(),
      new List(),
      new Opt()
    );
    return c;
  }

  syn lazy CompilationUnit Program.wildcards() {
    CompilationUnit cu = new CompilationUnit(
      "wildcards",
      new List(),
      new List()
    );
    cu.is$Final = true;
    addCompilationUnit(cu);
    return cu;
  }

  syn boolean TypeDecl.matches(AbstractWildcard wildcard) = false;
  eq WildcardType.matches(AbstractWildcard wildcard) = wildcard.matches(this);
  eq WildcardExtendsType.matches(AbstractWildcard wildcard) = wildcard.matchesExtends(this);
  eq WildcardSuperType.matches(AbstractWildcard wildcard) = wildcard.matchesSuper(this);

  syn boolean AbstractWildcard.matches(AbstractWildcardType type) = true;
  eq WildcardExtends.matches(AbstractWildcardType type) = false;
  eq WildcardSuper.matches(AbstractWildcardType type) = false;
  
  syn boolean AbstractWildcard.matchesExtends(WildcardExtendsType type) = false;
  eq WildcardExtends.matchesExtends(WildcardExtendsType type) = type.extendsType() == getAccess().type();
  syn TypeDecl WildcardExtendsType.extendsType() = getAccess().type();
  
  syn boolean AbstractWildcard.matchesSuper(WildcardSuperType type) = false;
  eq WildcardSuper.matchesSuper(WildcardSuperType type) = type.superType() == getAccess().type();
  syn TypeDecl WildcardSuperType.superType() = getAccess().type();

  public abstract TypeDecl AbstractWildcard.buildTypeDecl();

  public TypeDecl Wildcard.buildTypeDecl() {
    return new WildcardType(
      new Modifiers(new List().add(new Modifier("public"))),
      "?",
      new List()
    );
  }
  public TypeDecl WildcardExtends.buildTypeDecl() {
    return new WildcardExtendsType(
      new Modifiers(new List().add(new Modifier("public"))),
      "? extends " + getAccess().type().fullName(),
      new List(),
      getAccess().type().createBoundAccess()
    );
  }
  public TypeDecl WildcardSuper.buildTypeDecl() {
    return new WildcardSuperType(
      new Modifiers(new List().add(new Modifier("public"))),
      "? super " + getAccess().type().fullName(),
      new List(),
      getAccess().type().createBoundAccess()
    );
  }
  
  syn lazy TypeDecl Program.lookupWildcard(AbstractWildcard wildcard) {
    CompilationUnit cu = wildcards();
    for(int i = 0; i < cu.getNumTypeDecl(); i++) {
      TypeDecl typeDecl = cu.getTypeDecl(i);
      if(typeDecl.matches(wildcard))
        return typeDecl;
    }
    TypeDecl decl = wildcard.buildTypeDecl();
    decl.is$Final = true;
    cu.addTypeDecl(decl);
    return decl;
  }
  eq Program.getCompilationUnit().lookupWildcard(AbstractWildcard wildcard) = lookupWildcard(wildcard);
  inh TypeDecl AbstractWildcard.lookupWildcard(AbstractWildcard wildcard);

  eq AbstractWildcard.type() = lookupWildcard(this);


  syn lazy LUBType Program.lookupLUBType(ArrayList bounds) {
    CompilationUnit cu = wildcards();
    for(int i = 0; i < cu.getNumTypeDecl(); i++) {
      TypeDecl typeDecl = cu.getTypeDecl(i);
      if(typeDecl instanceof LUBType) {
        LUBType type = (LUBType)typeDecl;
        if(type.getNumTypeBound() == bounds.size()) {
          boolean same = true;
          for(int j = 0; same && j < type.getNumTypeBound(); j++)
            if(type.getTypeBound(j).type() != bounds.get(j))
              same = false;
          if(same)
            return type;
        }
      }
    }
    List boundList = new List();
    StringBuffer name = new StringBuffer();
    for(Iterator iter = bounds.iterator(); iter.hasNext(); ) {
      TypeDecl typeDecl = (TypeDecl)iter.next();
      boundList.add(typeDecl.createBoundAccess());
      name.append("& " + typeDecl.typeName());
    }
    LUBType decl = new LUBType(
      new Modifiers(new List().add(new Modifier("public"))),
      name.toString(),
      new List(),
      boundList
    );
    decl.is$Final = true;
    cu.addTypeDecl(decl);
    return decl;
  }
  inh LUBType TypeDecl.lookupLUBType(ArrayList bounds);
  eq Program.getCompilationUnit().lookupLUBType(ArrayList bounds) = 
    lookupLUBType(bounds);

  eq LUBType.supertypeClassDecl(ClassDecl type) {
    return type.subtype(lub());
  }
  eq LUBType.supertypeInterfaceDecl(InterfaceDecl type) {
    return type.subtype(lub());
  }
  eq LUBType.subtype(TypeDecl type) {
    for(int i = 0; i < getNumTypeBound(); i++)
      if(!getTypeBound(i).type().instanceOf(type))
        return false;
    return true;
  }

  syn lazy TypeDecl Program.typeWildcard() {
    CompilationUnit cu = wildcards();
    for(int i = 0; i < cu.getNumTypeDecl(); i++) {
      TypeDecl typeDecl = cu.getTypeDecl(i);
      if(typeDecl instanceof WildcardType)
        return typeDecl;
    }
    TypeDecl decl = new WildcardType(
      new Modifiers(new List().add(new Modifier("public"))),
      "?",
      new List()
    );
    decl.is$Final = true;
    cu.addTypeDecl(decl);
    return decl;
  }
  inh TypeDecl TypeDecl.typeWildcard();
  eq Program.getCompilationUnit().typeWildcard() = typeWildcard();

  syn lazy TypeDecl Program.lookupWildcardExtends(TypeDecl bound) {
    CompilationUnit cu = wildcards();
    for(int i = 0; i < cu.getNumTypeDecl(); i++) {
      TypeDecl typeDecl = cu.getTypeDecl(i);
      if(typeDecl instanceof WildcardExtendsType && ((WildcardExtendsType)typeDecl).getAccess().type() == typeDecl)
        return typeDecl;
    }
    TypeDecl decl = new WildcardExtendsType(
      new Modifiers(new List().add(new Modifier("public"))),
      "? extends " + bound.fullName(),
      new List(),
      bound.createBoundAccess()
    );
    decl.is$Final = true;
    cu.addTypeDecl(decl);
    return decl;
  }
  eq Program.getCompilationUnit().lookupWildcardExtends(TypeDecl typeDecl) = lookupWildcardExtends(typeDecl);
  inh TypeDecl TypeDecl.lookupWildcardExtends(TypeDecl typeDecl);
  syn TypeDecl TypeDecl.asWildcardExtends() = lookupWildcardExtends(this);


  syn lazy TypeDecl Program.lookupWildcardSuper(TypeDecl bound) {
    CompilationUnit cu = wildcards();
    for(int i = 0; i < cu.getNumTypeDecl(); i++) {
      TypeDecl typeDecl = cu.getTypeDecl(i);
      if(typeDecl instanceof WildcardSuperType && ((WildcardSuperType)typeDecl).getAccess().type() == typeDecl)
        return typeDecl;
    }
    TypeDecl decl = new WildcardSuperType(
      new Modifiers(new List().add(new Modifier("public"))),
      "? extends " + bound.fullName(),
      new List(),
      bound.createBoundAccess()
    );
    decl.is$Final = true;
    cu.addTypeDecl(decl);
    return decl;
  }
  eq Program.getCompilationUnit().lookupWildcardSuper(TypeDecl typeDecl) = lookupWildcardSuper(typeDecl);
  inh TypeDecl TypeDecl.lookupWildcardSuper(TypeDecl typeDecl);
  syn TypeDecl TypeDecl.asWildcardSuper() = lookupWildcardSuper(this);

}


aspect NewGenerics {

  eq TypeVariableAccess.type() = getTypeDecl();

  public Access TypeVariable.createQualifiedAccess() {
    return new TypeVariableAccess(this);
  }

  syn TypeDecl TypeDecl.lookupTypeVariable(String name) { 
    for(int i = 0; i < getNumBodyDecl(); i++) {
      if(getBodyDecl(i) instanceof GenericMethodDecl) {
        GenericMethodDecl m = (GenericMethodDecl)getBodyDecl(i);
        for(int j = 0; j < m.getNumTypeParameter(); j++) {
          if(m.getTypeParameter(j).name().equals(name)) {
            return m.getTypeParameter(j);
          }
        }
      }
    }
    throw new Error("No type variable " + name + " in " + typeName());
  }
  eq GenericTypeDecl.lookupTypeVariable(String name) {
    for(int i = 0; i < getNumTypeParameter(); i++)
      if(getTypeParameter(i).name().equals(name))
        return getTypeParameter(i);
    return super.lookupTypeVariable(name);
  }


}
