aspect StaticImports {
  eq CompilationUnit.getImportDecl().handlesException(TypeDecl exceptionType) {
    return !exceptionType.isUncheckedException();
  }

  // Expect a type name in this context
  eq SingleStaticImportDecl.getAccess().nameType() = NameType.TYPE_NAME;
  eq StaticImportOnDemandDecl.getAccess().nameType() = NameType.TYPE_NAME;

  // PrettyPrinting
  public void SingleStaticImportDecl.toString(StringBuffer s) {
    s.append("import static ");
    getAccess().toString(s);
    s.append(".");
    getIdUse().toString(s);
    s.append(";\n");
  }
  public void StaticImportOnDemandDecl.toString(StringBuffer s) {
    s.append("import ");
    getAccess().toString(s);
    s.append(".*;\n");
  }

  syn String SingleStaticImportDecl.name() = getIdUse().getID();
  syn TypeDecl SingleStaticImportDecl.type() = getAccess().type(); 
  syn TypeDecl StaticImportOnDemandDecl.type() = getAccess().type(); 

  syn boolean ImportDecl.isOnDemand() = false;
  eq StaticImportOnDemandDecl.isOnDemand() = true;

  // Lookup Variable
  syn boolean SingleStaticImportDecl.hasField() = type().hasField(name());
  
  syn SimpleSet ImportDecl.localLookupVariable(String name) = SimpleSet.emptySet;
  syn SimpleSet SingleStaticImportDecl.localLookupVariable(String name) {
    if(!name().equals(name)) return SimpleSet.emptySet;
    SimpleSet set = SimpleSet.emptySet;
    for(Iterator iter = type().memberFields(name).iterator(); iter.hasNext(); ) {
      Variable v = (Variable)iter.next();
      if(v.isStatic())
        set = set.add(v);
    }
    return set;
  }
  syn SimpleSet StaticImportOnDemandDecl.localLookupVariable(String name) {
    SimpleSet set = SimpleSet.emptySet;
    for(Iterator iter = type().memberFields(name).iterator(); iter.hasNext(); ) {
      Variable v = (Variable)iter.next();
      if(v.isStatic())
        set = set.add(v);
    }
    return set;
  }

  // Delegate variable lookup to imports
  inh SimpleSet CompilationUnit.lookupVariable(String name);
  eq CompilationUnit.getTypeDecl().lookupVariable(String name) {
    SimpleSet set = SimpleSet.emptySet;
    for(int i = 0; i < getNumImportDecl(); i++) {
      if(!getImportDecl(i).isOnDemand()) {
        for(Iterator iter = getImportDecl(i).localLookupVariable(name).iterator(); iter.hasNext(); ) {
          Variable v = (Variable)iter.next();
          set = set.add(v);
        }
      }
    }
    if(!set.isEmpty())
      return set;
    for(int i = 0; i < getNumImportDecl(); i++) {
      if(getImportDecl(i).isOnDemand()) {
        for(Iterator iter = getImportDecl(i).localLookupVariable(name).iterator(); iter.hasNext(); ) {
          Variable v = (Variable)iter.next();
          set = set.add(v);
        }
      }
    }
    if(!set.isEmpty())
      return set;
    return lookupVariable(name);
  }

  // Lookup Method
  syn boolean SingleStaticImportDecl.hasMethod() = type().hasMethod(name());
  
  syn Collection ImportDecl.localLookupMethod(String name) = Collections.EMPTY_LIST;
  
  syn Collection SingleStaticImportDecl.localLookupMethod(String name) = !name().equals(name) ?
    Collections.EMPTY_LIST : removeInstanceMethods(type().memberMethods(name));
    
  syn Collection StaticImportOnDemandDecl.localLookupMethod(String name) = 
    removeInstanceMethods(type().memberMethods(name));
  
  // Delegate method lookup to imports
  inh Collection CompilationUnit.lookupMethod(String name);
  eq CompilationUnit.getTypeDecl().lookupMethod(String name) {
    Collection list = new ArrayList();
    for(int i = 0; i < getNumImportDecl(); i++)
      if(!getImportDecl(i).isOnDemand())
        list.addAll(getImportDecl(i).localLookupMethod(name));
    if(!list.isEmpty()) 
      return list;
    for(int i = 0; i < getNumImportDecl(); i++)
      if(getImportDecl(i).isOnDemand())
        list.addAll(getImportDecl(i).localLookupMethod(name));
    if(!list.isEmpty())
      return list;
    return lookupMethod(name);
  }

  // Error check
  public void SingleStaticImportDecl.nameCheck() {
    if(!hasField() && !hasMethod()) {
      error("Semantic Error: At least one static member named " + name() + " must be available in static imported type " + type().fullName());
    }
  }
}
