aspect GenericsPrettyPrint {
  public void TypeVariable.toString(StringBuffer s) {
    s.append(name());
    if(getNumTypeBound() > 0) {
      s.append(" extends ");
      getTypeBound(0).toString(s);
      for(int i = 1; i < getNumTypeBound(); i++) {
        s.append(" & ");
        getTypeBound(i).toString(s);
      }
    }
  }

  public void ParameterizedTypeAccess.toString(StringBuffer s) {
    super.toString(s);
    s.append('<');
    for(int i = 0; i < getNumTypeArgument(); i++) {
      if(i != 0)
        s.append(", ");
      getTypeArgument(i).toString(s);
    }
    s.append('>');
    s.append("[");
    s.append(decl().fullName());
    if(decl() instanceof GenericTypeDecl) {
      GenericTypeDecl decl = (GenericTypeDecl)decl();
      ParTypeDecl p = decl.lookupParTypeDecl(this);
      for(int i = 0; i < p.getNumArgument(); i++) {
        s.append(p.getArgument(i).type().fullName());
        s.append(", ");
      }
    }
    s.append("]");
  }

	public void GenericClassDecl.toString(StringBuffer s) {
		getModifiers().toString(s);
		s.append("class ");
		getIdDecl().toString(s);
		s.append('<');
    	if (getNumTypeParameter() > 0) {
    		getTypeParameter(0).toString(s);
    		for (int i = 1; i < getNumTypeParameter(); i++) {
    			s.append(", ");
    			getTypeParameter(i).toString(s);
    		}
    	}
    	s.append('>');
		if(hasSuperClass()) {
			s.append(" extends ");
			getSuperClassAccess().toString(s);
		}
		if(getNumImplements() > 0) {
			s.append(" implements ");
			getImplements(0).toString(s);
			for(int i = 1; i < getNumImplements(); i++) {
				s.append(", ");
				getImplements(i).toString(s);
			}
		}
    s.append(" instantiated with: ");
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParClassDecl decl = getParTypeDecl(i);
      s.append("[");
      for(int j = 0; j < decl.getNumArgument(); j++) {
        s.append(decl.getArgument(j).type().fullName());
        s.append(", ");
      }
      s.append("]");
      s.append(", ");
    }
    
		s.append(" {\n");
		indent++;
		for(int i=0; i < getNumBodyDecl(); i++) {
			getBodyDecl(i).toString(s);
		}
		indent--;
		s.append(indent() + "}\n");
	}
  
	public void GenericInterfaceDecl.toString(StringBuffer s) {
		getModifiers().toString(s);
		s.append("interface ");
		getIdDecl().toString(s);
		s.append('<');
    	if (getNumTypeParameter() > 0) {
    		getTypeParameter(0).toString(s);
    		for (int i = 1; i < getNumTypeParameter(); i++) {
    			s.append(", ");
    			getTypeParameter(i).toString(s);
    		}
    	}
    	s.append('>');
		if(getNumSuperInterfaceId() > 0) {
			s.append(" extends ");
			getSuperInterfaceId(0).toString(s);
      for(int i = 1; i < getNumSuperInterfaceId(); i++) {
        s.append(", ");
			  getSuperInterfaceId(i).toString(s);
      }
    }
    s.append(" instantiated with: ");
    for(int i = 0; i < getNumParTypeDecl(); i++) {
      ParInterfaceDecl decl = getParTypeDecl(i);
      s.append("[");
      for(int j = 0; j < decl.getNumArgument(); j++) {
        s.append(decl.getArgument(j).type().fullName());
        s.append(", ");
      }
      s.append("]");
      s.append(", ");
    }
    
		s.append(" {\n");
		indent++;
		for(int i=0; i < getNumBodyDecl(); i++) {
			getBodyDecl(i).toString(s);
		}
		indent--;
		s.append(indent() + "}\n");
	}

	public void Wildcard.toString(StringBuffer s) {
    s.append("?");
  }
  public void WildcardExtends.toString(StringBuffer s) {
    super.toString(s);
    s.append(" extends ");
    getAccess().toString(s);
  }
  public void WildcardSuper.toString(StringBuffer s) {
    super.toString(s);
    s.append(" super ");
    getAccess().toString(s);
  }

}
