%header {:
 package abc.ja.tm.parse;
 import abc.ja.tm.jrag.*;
:};
%embed {:
  class Events extends Parser.Events {
    public void reportError(Symbol token, String msg) {
      polyglot.util.Position pos;
      if (token.getId() == Terminals.EOF) {
        pos = new polyglot.util.Position(fileName, token.getLine(token.getStart()) - 1);
        msg = "Unexpected end of file.";
      } else
        pos = new polyglot.util.Position(fileName, token.getLine(token.getStart()), token.getColumn(token.getStart()));

      abc.main.Main.v().getAbcExtension().reportError(
        polyglot.util.ErrorInfo.SYNTAX_ERROR,
        msg,
        pos
      );
    }
    public void syntaxError(Symbol token) {
      reportError(token, "Unexpected token " + Terminals.NAMES[token.getId()]);
    }
    public void scannerError(Scanner.Exception e) {
      abc.main.Main.v().getAbcExtension().reportError(
        polyglot.util.ErrorInfo.LEXICAL_ERROR,
        e.getMessage(),
        new polyglot.util.Position(fileName, e.line, e.column)
      );
    }
    public void unexpectedTokenRemoved(Symbol token) {
      //reportError(token, "Removed unexpected token " + Terminals.NAMES[token.getId()]);
    }
    public void missingTokenInserted(Symbol token) {
      //reportError(token, "Inserted missing token");
    }
    public void misspelledTokenReplaced(Symbol token) {
      /*
      StringBuffer s = new StringBuffer();
      s.append("  *** Syntactic error: replaced unexpected token with " );
      if (token.value != null) {
        s.append("\"" + token.value + "\"");
			}
      else {
        s.append(Terminals.NAMES[token.getId()]);
			}
      reportError(token, s.toString());
      */
    }
    public void errorPhraseRemoved(Symbol token) {
      //reportError(token, "   *** Syntactic error: removed error phrase");
    }

  }

        {
            report = new Events(); // Use error handler in parser
        }

  String fileName;

  protected java.util.Collection errors = new ArrayList();
  public CompilationUnit parse(java.io.InputStream is, String fileName, polyglot.util.ErrorQueue error_queue) throws java.io.IOException, beaver.Parser.Exception {
    CompilationUnit cu;
    errors = new ArrayList();
    try {
      this.fileName = fileName;
      abc.ja.parse.JavaScanner scanner = new abc.ja.parse.JavaScanner(new abc.ja.parse.Unicode(is), fileName, error_queue);
      cu = (CompilationUnit)parse(scanner);
    } catch(Parser.Exception e) {
      // build empty compilation unit for failed error recovery
      cu = new CompilationUnit();
    }
    for(java.util.Iterator iter = errors.iterator(); iter.hasNext(); ) {
      Problem p = (Problem)iter.next();
      p.setFileName(fileName);
      cu.addParseError(p);
    }
    return cu;
  }

  /*
  public CompilationUnit parse(java.io.InputStream is, String fileName, polyglot.util.ErrorQueue error_queue) throws java.io.IOException, beaver.Parser.Exception {
    try {
      this.fileName = fileName;
      abc.ja.parse.JavaScanner scanner = new abc.ja.parse.JavaScanner(new Unicode(is), fileName, error_queue);
      return (CompilationUnit)parse(scanner);
    } catch(SourceError e) {
      throw new ParseError(fileName + ": " + e.getMessage());
    }
  }
  */
:};

