aspect SymbolNameAnalysis
{
    syn String SymbolAccess.name() = getID();
    syn String SymbolDecl.name() = getID();

    inh TypeDecl SymbolDecl.hostType();

    inh int SymbolDecl.numTraceMatchParameter();
    eq TraceMatchDecl.getSymbolDecl().numTraceMatchParameter() =
        getAdviceSpec().getNumParameter();

    inh ParameterDeclaration SymbolDecl.traceMatchParameter(int i);
    eq TraceMatchDecl.getSymbolDecl().traceMatchParameter(int i) =
        getAdviceSpec().getParameter(i);

    syn lazy List<ParameterDeclaration> SymbolDecl.getParameterList()
    {
        List<ParameterDeclaration> params = new List<ParameterDeclaration>();
        for (int i = 0; i < numTraceMatchParameter(); i++) {
            ParameterDeclaration param = traceMatchParameter(i);
            if (this.refersTo(param)) {
                Modifiers mods = new Modifiers(new List());
                Access type = param.type().createQualifiedAccess();
                String name = param.name();

                ParameterDeclaration newparam = param.isImplicit()
                    ? new ImplicitParameterDeclaration(mods, type, name)
                    : new ParameterDeclaration(mods, type, name);
                params = params.add(newparam);
            }
        }
        return params;
    }

    eq SymbolDecl.getParameter().isMethodParameter() = false;
    eq SymbolDecl.getParameter().isConstructorParameter() = false;
    eq SymbolDecl.getParameter().isExceptionHandlerParameter() = false;
}
