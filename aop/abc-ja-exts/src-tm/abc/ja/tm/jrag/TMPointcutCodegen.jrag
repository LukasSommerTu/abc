/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Pavel Avgustinov
 * Copyright (C) 2008 Torbjorn Ekman
 * Copyright (C) 2008 Julian Tibble
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

aspect TMPointcutCodegen
{
    syn Regex PointcutExpr.regex()
    {
        throw new InternalCompilerError("called regex() on regular pointcut");
    }
    eq Regex.regex() = this;

    public Pointcut Regex.pointcut()
    {
        throw new InternalCompilerError("called pointcut() on regex()");
    }


    syn boolean SymbolKind.matchesBefore() = false;
    syn boolean SymbolKind.matchesAfterReturning() = false;
    syn boolean SymbolKind.matchesAfterThrowing() = false;
    eq BeforeSymbol.matchesBefore() = true;
    eq AroundSymbol.matchesBefore() = true;
    eq AfterReturningSymbol.matchesAfterReturning() = true;
    eq AfterThrowingSymbol.matchesAfterThrowing() = true;
    eq AfterSymbol.matchesAfterReturning() = true;
    eq AfterSymbol.matchesAfterThrowing() = true;

    syn Pointcut TraceMatchDecl.symbolsPointcutBefore()
    {
        Pointcut result = null;
        for (int i = 0; i < getNumSymbolDecl(); i++)
            if (getSymbolDecl(i).getSymbolKind().matchesBefore())
                result = pcOr(result, getSymbolDecl(i).closedPointcut());
        return result;
    }

    syn Pointcut TraceMatchDecl.symbolsPointcutAfterReturning()
    {
        Pointcut result = null;
        for (int i = 0; i < getNumSymbolDecl(); i++)
            if (getSymbolDecl(i).getSymbolKind().matchesAfterReturning())
                result = pcOr(result, getSymbolDecl(i).closedPointcut());
        return result;
    }

    syn Pointcut TraceMatchDecl.symbolsPointcutAfterThrowing()
    {
        Pointcut result = null;
        for (int i = 0; i < getNumSymbolDecl(); i++)
            if (getSymbolDecl(i).getSymbolKind().matchesAfterThrowing())
                result = pcOr(result, getSymbolDecl(i).closedPointcut());
        return result;
    }

    syn Pointcut TraceMatchDecl.beforeSymbolsPointcut() = symbolsPointcutBefore();

    syn Pointcut TraceMatchDecl.afterReturningSymbolsPointcut() = symbolsPointcutAfterReturning();

    syn Pointcut TraceMatchDecl.afterThrowingSymbolsPointcut() = symbolsPointcutAfterThrowing();

    syn Pointcut TraceMatchDecl.aroundSymbolPointcut()
    {
        for (int i = 0; i < getNumSymbolDecl(); i++)
            if (getSymbolDecl(i).getSymbolKind().aroundSymbol() != null)
                return getSymbolDecl(i).getPointcutExpr().pointcut();
        return null;
    }

    protected Pointcut TraceMatchDecl.pcOr(Pointcut current, Pointcut next)
    {
        if (current == null)
            return next;
        return OrPointcut.construct(current, next, pos());
    }
    
    // returns an aspectinfo-representation of the pointcut for this
    // symbol, with the variables it binds existentially quantified.
    syn Pointcut SymbolDecl.closedPointcut() {
        return new LocalPointcutVars(getPointcutExpr().pointcut(), 
        		perSymbolAdviceFormals(), pos());
    }
    
    // When a tracematch has DistinctGroups, we rewrite symbol pointcuts to take
    // these into account
    public boolean SymbolDecl.distinctGroupsReflected = false;
    rewrite SymbolDecl {
    	when(!distinctGroupsReflected && enclosingTracematch().getNumDistinctGroup() > 0)
    	to SymbolDecl {
    		this.distinctGroupsReflected = true;
        	Expr ifExpr = new BooleanLiteral("true");
        	for(DistinctGroup g : enclosingTracematch().getDistinctGroups()) {
        		// Determine which of the distinct group's variables are bound by this symbol
            	Set<VarAccess> distinctAndBound = new HashSet<VarAccess>();
            	for(VarAccess v : g.getVarAccessList())
            		if(this.binds(v.name()))
            			distinctAndBound.add(v);
            			
            	// Add the right inequalities
            	for(int left = 0; left < distinctAndBound.size(); left++)
        			for(int right = left + 1; right < distinctAndBound.size(); right++)
        				ifExpr = new AndLogicalExpr(ifExpr, new NEExpr(g.getVarAccess(left), g.getVarAccess(right)));
        	}

        	// Check if we actually have something to put in an if() pointcut
        	if(!(ifExpr instanceof BooleanLiteral)) {
        		PointcutExpr ifPc = new IfPointcutExpr(ifExpr);
        		this.setPointcutExpr(new AndPointcutExpr(this.getPointcutExpr(), ifPc));
        	}
    		return this;
    	}
    }
}
