import abc.tm.weaving.aspectinfo.*;
import abc.tm.weaving.matching.*;

aspect PlaceHolder
{
    eq SymbolDecl.getPointcutExpr().bindsInCurrentCflow(String name) =
        getPointcutExpr().binds(name) > 0;

    // Map sym_to_advice_name
    // String synch_advice_name
    // String some_advice_name
    // String dummy_proceed_name
    public void TraceMatchDecl.jimplify1phase2()
    {
        TraceMatch tm =
            new TraceMatch(name(), tracematchFormals(),
                           adviceFormals(),
                           getPointcutExpr().regex().stateMachine(),
                           isPerThread(), symbolToFormalNameList(),
                           frequentSymbolNames(), symbolToAdviceName(),
                           null, null, null, aspectClass(), pos());
        ((TMGlobalAspectInfo) globalAspectInfo()).addTraceMatch(tm);
    }

    inh ParameterDeclaration TraceMatchDecl.implicitVarDecl(String name);
    syn List TraceMatchDecl.getImplicitList() =
        new List().add(implicitVarDecl("thisJoinPoint"))
                  .add(implicitVarDecl("thisJoinPointStaticPart"))
                  .add(implicitVarDecl("thisEnclosingJoinPointStaticPart"));

    syn lazy String TraceMatchDecl.name() =
        "tracematch$" + hostType().adviceCounter++;

    syn LinkedList TraceMatchDecl.tracematchFormals()
    {
        LinkedList formals = new LinkedList();
        for (int i = 0; i < getAdviceSpec().getNumParameter(); i++)
        {
            ParameterDeclaration param = getAdviceSpec().getParameter(i);
            if (!param.isImplicit())
                formals.add(param.formal());
        }
        return formals;
    }

    syn LinkedList TraceMatchDecl.adviceFormals()
    {
        LinkedList formals = new LinkedList();
        addAroundFormals(formals);
        for (int i = 0; i < getAdviceSpec().getNumParameter(); i++)
        {
            ParameterDeclaration param = getAdviceSpec().getParameter(i);
            if (param.isImplicit())
                formals.add(param.formal());
        }
        return formals;
    }

    void TraceMatchDecl.addAroundFormals(LinkedList formals)
    {
        for (int i = 0; i < getNumSymbolDecl(); i++)
            getSymbolDecl(i).getSymbolKind().addAroundFormals(formals);
    }
    void SymbolKind.addAroundFormals(LinkedList formals) { }
    void AroundSymbol.addAroundFormals(LinkedList formals)
    {
        for (int i = 0; i < getNumVarAccess(); i++) {
            ParameterDeclaration decl;
            decl = (ParameterDeclaration) getVarAccess(i).decl();
            formals.add(decl.formal());
        }
    }

    syn Map TraceMatchDecl.symbolToFormalNameList()
    {
        Map sym_to_vars = new HashMap();
        for (int i = 0; i < getNumSymbolDecl(); i++) {
            ArrayList vars = new ArrayList();
            for (int j = 0; j < getAdviceSpec().getNumParameter(); j++) {
                ParameterDeclaration param = getAdviceSpec().getParameter(j);
                if (getSymbolDecl(i).refersTo(param))
                    vars.add(param.name());
            }
            sym_to_vars.put(getSymbolDecl(i).getID(), vars);
        }
        return sym_to_vars;
    }

    syn ArrayList TraceMatchDecl.frequentSymbolNames()
    {
        ArrayList names = new ArrayList();
        for (int i = 0; i < getNumFrequent(); i++)
            names.add(getFrequent(i).getID());
        return names;
    }
}
