aspect TypeCheckCJP {

	public boolean ClosureJoinpointAccess.passedTypeCheck = false;


	refine NameCheck public void TypeDecl.nameCheck() {
		correctTheReturnType();	
		NameCheck.TypeDecl.nameCheck();
	}
	
	public void ASTNode.correctTheReturnType() {
		for(int i = 0; i < getNumChild(); i++)
			getChild(i).correctTheReturnType();
	}
	
	public void ClosureJoinpointAccess.correctTheReturnType() {
		TypeDecl t = getName().type();
		if(t instanceof JoinpointTypeDecl) {
			JoinpointTypeDecl joinpointTypeDecl = (JoinpointTypeDecl) t;
			setReturnType(joinpointTypeDecl.getSignature().getTypeAccess());
		}
	}

 	eq AnonymousMethod.getParameter().outerScope() = this;
 	inh VariableScope AnonymousMethod.outerScope();
 	 	
 	AnonymousMethod implements VariableScope;
 	
	refine NameCheck public void ParameterDeclaration.nameCheck() {
		//do nothing
	}
 	
	public void ClosureJoinpointAccess.typeCheck() {
		super.typeCheck();
		//setting this flag will enable the rewrite that
		//extracts the closure into a proper method
		this.passedTypeCheck=true;
	}
	
	syn lazy boolean ASTNode.allCjpHavePassedTypeCheck() {
		for(int i = 0; i < getNumChild(); i++)
			if(!getChild(i).allCjpHavePassedTypeCheck())
				return false;
		return true;
	}

	eq ClosureJoinpointAccess.allCjpHavePassedTypeCheck() = passedTypeCheck;

}



