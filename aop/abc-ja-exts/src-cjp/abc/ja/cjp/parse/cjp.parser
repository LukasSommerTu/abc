/* abc - The AspectBench Compiler
 * Copyright (C) 2010 Eric Bodden
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

Expr primary_no_new_array =
	closure_joinpoint.j 			{: return j; :}
;

ExprStmt statement_expression =
	closure_joinpoint.j             {: return new ExprStmt(j); :}
;

ClosureJoinpointAccess closure_joinpoint =
	EXHIBIT name.i LPAREN formal_parameter_list.p? RPAREN block.b LPAREN.l argument_list.a? RPAREN.r 
		{:			
			/*Access n;
			//copied from java14.parser-rule for method_invocation
			if(i instanceof AbstractDot) {    
				AbstractDot d = (AbstractDot)i; 
				ParseName pn = (ParseName)d.extractLast();
				MethodAccess m = new CJPTypeAccess(pn.getID(), a);
				d.replaceLast(m);
				n=d;
 			} else {
                ParseName pn = (ParseName)i;
                MethodAccess m = new CJPTypeAccess(pn.getID(), a);
                n=m;
            }*/

			return new ClosureJoinpointAccess(p,new List()/*no type params*/,new PrimitiveTypeAccess("void")/*no ret type for now (will be inferred)*/,new List()/*no exceptions type for now (will be inferred)*/,b,a,i);
		:}
;

BodyDecl aspect_body_declaration =
	joinpointtype_decl.d			{: return d; :}
;

MemberCJPTypeDecl joinpointtype_decl =
			  //this allows for a throws-clause, which we need to weed out later
	JOINPOINT abstract_method_declaration.d 	{:
		return new MemberCJPTypeDecl(new JoinpointTypeDecl(new Modifiers(),((MethodDecl)d).getID(),new List(),(MethodDecl)d));
	:}
;

BodyDecl aspect_body_declaration =
	cjp_advice_declaration.d		{: return d; :}
;

CJPAdviceDecl cjp_advice_declaration =
	modifiers.m? cjp_advice_spec.s throws.t? block.b 
       {: ParserTrace.parserTrace("cjp advice declaration");
          return new CJPAdviceDecl(new Modifiers(m), s, t, b);
       :}
;

//copied from parser of abc.da (clara)
AdviceSpec cjp_advice_spec =
     BEFORE.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN.y
       {: ParserTrace.parserTrace("before(formals)");
          AdviceSpec s = new BeforeSpec(a);
          s.setGivenName(name);
          return s;
       :}
  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN.y
       {: ParserTrace.parserTrace("after(formals)");
          AdviceSpec s = new AfterSpec(a);
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_RETURNING.y
       {: ParserTrace.parserTrace("after(formals)returning");
          AdviceSpec s = new AfterReturningSpec(a, new Opt());
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_RETURNING LPAREN RPAREN.y // just to pass ajc tests
       {: ParserTrace.parserTrace("after(formals)returning()");
          AdviceSpec s = new AfterReturningSpec(a, new Opt());
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_RETURNING 
                                               LPAREN formal_parameter.b RPAREN.y
       {: ParserTrace.parserTrace("after(formals) returning(p)");
          AdviceSpec s = new AfterReturningSpec(a, new Opt(b));
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_THROWING.y
       {: ParserTrace.parserTrace("after(formals)throwing");
          AdviceSpec s = new AfterThrowingSpec(a, new Opt());
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_THROWING LPAREN RPAREN.y // ajc compatibility again
       {: ParserTrace.parserTrace("after(formals)throwing");
          AdviceSpec s = new AfterThrowingSpec(a, new Opt());
          s.setGivenName(name);
          return s;
       :}

  |  AFTER.x IDENTIFIER.name LPAREN formal_parameter_list.a? RPAREN PC_THROWING
                                               LPAREN formal_parameter.b RPAREN.y
       {: ParserTrace.parserTrace("after(formals)throwing(p)");
          AdviceSpec s = new AfterThrowingSpec(a, new Opt(b));
          s.setGivenName(name);
          return s;
       :}

  |  type.a AROUND IDENTIFIER.name LPAREN formal_parameter_list.b? RPAREN.y
       {: ParserTrace.parserTrace("non-void-type around (formals)");
          AdviceSpec s = new AroundSpec(b, a);
          s.setGivenName(name);
          return s;
       :}

  |  VOID.a AROUND IDENTIFIER.name LPAREN formal_parameter_list.b? RPAREN.y
       {: ParserTrace.parserTrace("VOID around (formals)");
          AdviceSpec s = new AroundSpec(b, new PrimitiveTypeAccess("void"));
          s.setGivenName(name);
          return s;
       :}
  ;