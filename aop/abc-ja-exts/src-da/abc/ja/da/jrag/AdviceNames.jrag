/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Eric Bodden
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
 
import java.util.Collections;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

aspect AdviceNames
{
	/*
	 * Advice specs can now hold an additional advice name.
	 */
	 
 	protected String AdviceSpec.name = null;
 	
 	syn lazy boolean AdviceSpec.hasName() {
 		return name!=null;
 	}

 	syn lazy String AdviceSpec.getName() {
 		return name;
 	}

 	public void AdviceSpec.setName(String n) {
 	    if(name!=null) throw new IllegalStateException("Name already set to:" +name);
 		name = n;
 	}
 	
 	syn lazy boolean AdviceDecl.hasName() { 	
 		return getAdviceSpec().hasName();
 	} 

 	syn lazy String AdviceDecl.getName() { 	
 		return getAdviceSpec().getName();
 	} 
 	
 	syn lazy Map<String,java.util.List<String>> AdviceSpec.adviceNameToVars() {
 		if(!hasName()) return Collections.emptyMap();
		Map<String,java.util.List<String>> res = new HashMap<String,java.util.List<String>>();
		java.util.List<String> vars = new ArrayList<String>();
		for(ParameterDeclaration param: getParameters()) {
			vars.add(param.getID());
		}
		res.put(getName(),vars);
		return res;
	} 
	
	syn lazy Map<String,java.util.List<String>> AfterReturningSpec.adviceNameToVars() {
		Map<String,java.util.List<String>> res = super.adviceNameToVars();
		if(hasReturnParameter()) {
			java.util.List<String> vars = res.values().iterator().next();
			vars.add(getReturnParameter().getID());
		}
		return res;
	}
	
	syn lazy Map<String,java.util.List<String>> AfterThrowingSpec.adviceNameToVars() {
		Map<String,java.util.List<String>> res = super.adviceNameToVars();
		if(hasExceptionParameter()) {
			java.util.List<String> vars = res.values().iterator().next();
			vars.add(getExceptionParameter().getID());
		}
		return res;
	}

	syn lazy Map<String,java.util.List<String>> AdviceDecl.adviceNameToVars() {
 		return getAdviceSpec().adviceNameToVars();
 	}
 	
 	syn lazy Map<String,java.util.List<String>> AspectDecl.adviceNameToVars() {
 		Map<String,java.util.List<String>> res = new HashMap<String,java.util.List<String>>();
 		for(BodyDecl b: getBodyDecls()) {
 			if(b instanceof AdviceDecl) {
 				AdviceDecl a = (AdviceDecl) b;
//TODO what if there are multiple advice with the same name? 				
 				res.putAll(a.adviceNameToVars());
 			}		
 		}
 		return res;
 	}
 	
	inh Map AdviceDependency.allAdviceNameToVars();
 	eq AspectDecl.getBodyDecl(int i).allAdviceNameToVars() = adviceNameToVars();  


 	inh Map AdviceNameAccess.allAdviceNameToVars(); 	 	
 	eq AdviceDependency.getStrongName(int j).allAdviceNameToVars() = allAdviceNameToVars(); 
 	eq AdviceDependency.getWeakName(int j).allAdviceNameToVars() = allAdviceNameToVars();
 	
 	syn java.util.List<String> AdviceNameAccess.adviceVars() {
 		Map<String,java.util.List<String>> all = (Map<String,java.util.List<String>>)allAdviceNameToVars();
 		return all.get(getAdviceNameRef());
 	}

	//TODO why are these at all necessary?
	eq BodyDecl.getChild(int i).allAdviceNameToVars() { throw new Error("Missing equation for allAdviceNameToVars()"); }
	eq TypeDecl.getChild(int i).allAdviceNameToVars() { throw new Error("Missing equation for allAdviceNameToVars()"); }

}
