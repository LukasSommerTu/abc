/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Eric Bodden
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */
 
import java.util.HashMap;

public aspect AdviceNameRefs{

	syn Map<String,java.util.List<String>> AdviceDependency.stongAdviceToVars() {
		Map<String,java.util.List<String>> res = new HashMap<String,java.util.List<String>>();
		for(AdviceNameAccess access: getStrongNames()) {
			java.util.List<String> l = new ArrayList<String>();
			for(ArgVarRef a: access.getArgVarRefs()) {
				l.add(a.getAdviceVar());
			}
			res.put(access.getAdviceNameRef(),l);
		}	
		return res;
	}

	syn Map<String,java.util.List<String>> AdviceDependency.weakAdviceToVars() {
		Map<String,java.util.List<String>> res = new HashMap<String,java.util.List<String>>();
		for(AdviceNameAccess access: getWeakNames()) {
			java.util.List<String> l = new ArrayList<String>();
			for(ArgVarRef a: access.getArgVarRefs()) {
				l.add(a.getAdviceVar());
			}
			res.put(access.getAdviceNameRef(),l);
		}	
		return res;
	}

}