/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Eric Bodden
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

import abc.da.weaving.weaver.depadviceopt.ds.Bag;
import abc.da.weaving.weaver.depadviceopt.ds.HashBag;
import java.util.ArrayList;

aspect DependencyTypeChecks {

	syn Bag<String> AdviceDependency.varCount() {
		Bag<String> res = new HashBag<String>();
		for(int i=0; i<getNumStrongName(); i++) {
			AdviceNameAccess access = getStrongName(i);
			res.addAll(access.varCount());
		}
		for(int i=0; i<getNumStrongName(); i++) {
			AdviceNameAccess access = getWeakName(i);
			res.addAll(access.varCount());
		}
		return res;
	}
	
	syn Bag<String> AdviceNameAccess.varCount() {
		Bag<String> res = new HashBag<String>();
		for(int i=0; i<getNumArgVarRef(); i++) {
			ArgVarRef ref = getArgVarRef(i);
			res.add(ref.getAdviceVar());						
		} 
		return res;
	}
	

	inh Bag<String> AdviceNameAccess.allVarCount();
	eq AdviceDependency.getStrongName(int i).allVarCount() = varCount(); 
	eq AdviceDependency.getWeakName(int i).allVarCount() = varCount();

	public void AdviceNameAccess.typeCheck() {
		if(!hasDefaultVariables()) {
			for(int i=0; i<getNumArgVarRef(); i++) {
				ArgVarRef ref = getArgVarRef(i);
				if(!ref.isWildcard()) {
					String var = ref.getAdviceVar();
					if(allVarCount().countOf(var)<2) {
					 	//variable exists apparently at least one time
						assert allVarCount().countOf(var)>0;
						warning("Variable "+var+" only referenced once. Consider using wildcard '*' instead."); 
					}
				}
			}
			
			if(adviceVars().size()!=getNumArgVarRef()) {
				error("Advice with name '"+getAdviceNameRef()+"' has "+adviceVars().size()+
				      " arguments but here "+getNumArgVarRef()+" arguments were given.");
			}			
		}
	}
	
	public boolean ArgVarRef.isWildcard() {
		return getAdviceVar().startsWith(abc.ja.da.parse.JavaParser.WILDCARD);
	}
	
	syn lazy java.util.List<AdviceDecl> AspectDecl.namedAdvice() {
		java.util.List<AdviceDecl> res = new ArrayList<AdviceDecl>(); 
		for(BodyDecl b: getBodyDecls()) {
			if(b instanceof AdviceDecl) {
				AdviceDecl a = (AdviceDecl) b;
				if(a.hasName()) {
					res.add(a);									
				}
			}
		}	
		return res;
	}

	//TODO causes infinite recursion	
	refine AspectErrorCheck public void AspectDecl.typeCheck() {
		AspectErrorCheck.AspectDecl.typeCheck();
		for(AdviceDecl a: namedAdvice()) {
			for(AdviceDecl b: namedAdvice()) {
				if(a==b) continue;
				if(a.getName().equals(b.getName())) {
					error("Two advice declarations with the same name '"+a.getName()+"'!");
				}
			}			
		}
	}
	
}