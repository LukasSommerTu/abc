/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Eric Bodden
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

import abc.da.weaving.weaver.depadviceopt.ds.Bag;
import abc.da.weaving.weaver.depadviceopt.ds.HashBag;
import java.util.ArrayList;

/*
 * Implements type checks for dependent advice. Since dependent advice can also be generated
 * directly in the backend (e.g. by a tracematch) some type checks are performed there:
 * abc.da.weaving.aspectinfo.DAInfo.consistencyCheckForDependentAdvice()
 */
aspect DependencyTypeChecks {

    /* Performs the following type checks:
     * (1) an advice referred to in the dependency declaration does not exist (under the given name)
     * (2) if the variables were not set to the default variables
     *     a) a variable only occurs once in the entire dependency declaration and it's not a wildcard
     *        then we give a warning that it should be a wildcard.
     *     b) the number of variables stated is not the same as the number of actual advice variables
     */
 	public void AdviceNameAccess.typeCheck() {
		if(!allAdviceNames().contains(getAdviceNameRef())) {
			error("There is no advice with name '"+getAdviceNameRef()+"' defined.");
		}
			
		if(!hasDefaultVariables()) {
			for(int i=0; i<getNumArgVarRef(); i++) {
				ArgVarRef ref = getArgVarRef(i);
				if(!ref.isWildcard()) {
					String var = ref.getAdviceVar();
					if(allVarCount().countOf(var)<2) {
					 	//variable exists apparently at least one time
						assert allVarCount().countOf(var)>0;
						warning("Variable "+var+" only referenced once. Consider using wildcard '*' instead."); 
					}
				}
			}
			
			if(adviceVars()!=null && adviceVars().size()!=getNumArgVarRef()) {
				error("Advice with name '"+getAdviceNameRef()+"' has "+adviceVars().size()+
				      " arguments but here "+getNumArgVarRef()+" arguments were given. Did you forget about the returning/throwing variable?");
			}			
		}
	}
	
    /* Performs the following type check:
     * In each dependency declaration each advice name should occur at most once.
     */
	public void AdviceDependency.typeCheck() {
		Bag<String> nameCount = new HashBag<String>();
		for(AdviceNameAccess a: getStrongNames()) {
			nameCount.add(a.getAdviceNameRef());
		}
		for(AdviceNameAccess a: getWeakNames()) {
			nameCount.add(a.getAdviceNameRef());
		}
		for(String adviceName: new HashSet<String>(nameCount)) {
			if(nameCount.countOf(adviceName)>1) {
				error("Advice name '"+adviceName+"' referenced multiple times.");
			}
		}
	}	
	
 	syn lazy java.util.List<String> AdviceNameAccess.adviceVars() {
 		Map<String,java.util.List<String>> all = (Map<String,java.util.List<String>>)allAdviceNameToVars();
 		return all.get(getAdviceNameRef());
 	}

	syn lazy Bag<String> AdviceDependency.varCount() {
		Bag<String> res = new HashBag<String>();
		for(int i=0; i<getNumStrongName(); i++) {
			AdviceNameAccess access = getStrongName(i);
			res.addAll(access.varCount());
		}
		for(int i=0; i<getNumStrongName(); i++) {
			AdviceNameAccess access = getWeakName(i);
			res.addAll(access.varCount());
		}
		return res;
	}
	
	syn lazy Bag<String> AdviceNameAccess.varCount() {
		Bag<String> res = new HashBag<String>();
		for(int i=0; i<getNumArgVarRef(); i++) {
			ArgVarRef ref = getArgVarRef(i);
			res.add(ref.getAdviceVar());						
		} 
		return res;
	}
	

	inh Bag<String> AdviceNameAccess.allVarCount();
	eq AdviceDependency.getStrongName(int i).allVarCount() = varCount(); 
	eq AdviceDependency.getWeakName(int i).allVarCount() = varCount();

 	
 	syn lazy java.util.Collection<String> AdviceNameAccess.allAdviceNames() {
 		Map<String,java.util.List<String>> all = (Map<String,java.util.List<String>>)allAdviceNameToVars();
 		return all.keySet();
 	}
 	
	public boolean ArgVarRef.isWildcard() {
		return getAdviceVar().startsWith(abc.ja.da.parse.JavaParser.WILDCARD);
	}
	
	syn lazy java.util.List<AdviceDecl> AspectDecl.namedAdvice() {
		java.util.List<AdviceDecl> res = new ArrayList<AdviceDecl>(); 
		for(BodyDecl b: getBodyDecls()) {
			if(b instanceof AdviceDecl) {
				AdviceDecl a = (AdviceDecl) b;
				if(a.hasGivenName()) {
					res.add(a);									
				}
			}
		}	
		return res;
	}
	
	
}