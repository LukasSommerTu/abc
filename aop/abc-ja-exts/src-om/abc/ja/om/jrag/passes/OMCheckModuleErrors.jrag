import abc.ja.om.modulestruct.*;
import abc.ja.om.*;
import abc.om.modulestruct.ModuleNode;
import abc.ja.om.modulestruct.JAOpenClassFlagSet.OCFType;
import java.util.*;

aspect OMCheckModuleErrors {
	
	//dependent on ErrorCheck.CompilationUnit.errors/warnings
  	public void Program.initErrHandling(Collection err, Collection warn) {
  		err.clear();
  		warn.clear();
  		
  		for (CompilationUnit cu : getCompilationUnitList()) {
  			if(cu.fromSource()) {
  				cu.initErrHandling();
  			}
  		}
  	}
  	
  	public void CompilationUnit.initErrHandling() {
  		errors.clear();
  		warnings.clear();
  	}
  
  	public void Program.collectModuleErrors(Collection err, Collection warn) {
  		for (Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
  			CompilationUnit cu = (CompilationUnit)iter.next();
  			if(cu.fromSource()) {
  				cu.collectModuleErrors(err, warn);
  			}
  		}
  	}
  	
  	public void CompilationUnit.collectModuleErrors(Collection err, Collection warn) {
  		err.addAll(errors);
  		warn.addAll(warnings);
  	}	
	
	//methods called from here must do their own traversal. This is run before the single checks
	public void Program.barrierCheckModuleErrors1() {
	}
	
	//methods called from here must not traverse, the traversal is done
	//by singleCheckModuleErrors 
	public void ASTNode.singleCheckModuleErrors() {
		//add error checks here
		checkModuleCycles();
		checkDuplicateClassInclude();
		checkDuplicateFriendInclude();
		markFriendMemberExistence();
		checkModuleITDErrors();
		
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).singleCheckModuleErrors();
		}
	}
	
	//methods called from here must do their own traversal. This is run after the single checks
	public void Program.barrierCheckModuleErrors2() {
		collectNonexistentFriendAspects();
	}
	
	//throws an exception if any errors are queued up. Add more things later if needed
	public void ASTNode.checkUnrecoverableErrors() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).checkUnrecoverableErrors();
		}
	}
	public void CompilationUnit.checkUnrecoverableErrors() {
		if (this.errors.size() > 0) {
			throw new OMUnrecoverableSemanticError("Unrecoverable errors found");
		}
	}
	
	//check module cycles
	public void ASTNode.checkModuleCycles() {}
	public void OMModuleDecl.checkModuleCycles() {
		JAModuleNodeModule moduleNode = 
			(JAModuleNodeModule) this.getModuleStructNode();
		assert moduleNode != null : "null JAModuleNodeModule in OMModuleDecl.checkModuleCycles()";
		
		HashSet parents = new HashSet();
		while (moduleNode.getParent() != null) {
			moduleNode = (JAModuleNodeModule)moduleNode.getParent();
			if (parents.contains(moduleNode)) {
				error("module " + getModuleName() + " involved in circular inclusion.");
				break;
			}
			parents.add(moduleNode);
		}
	}
	
	//duplicate class include
	public void ASTNode.checkDuplicateClassInclude() {}
	public void TypeDecl.checkDuplicateClassInclude() {
		JAModuleStructure moduleStruct = getOMAbcExtension().moduleStruct;
		if (moduleStruct.hasMultipleOwners(this)) {
			error("class " + this.getID() + " included in more than one module.");
		}
	}
	
	//duplicate aspect friend (aspect is a friend in more than one module
	public void ASTNode.checkDuplicateFriendInclude() {}
	public void AspectDecl.checkDuplicateFriendInclude() {
		JAModuleStructure moduleStruct = getOMAbcExtension().moduleStruct;
		if (moduleStruct.hasMultipleFriendOwners(this)) {
			error("aspect " + this.getID() + " included in more than one module.");
		}
	}
	//check for wildcards in friend member patterns
	public void ASTNode.checkFriendAspectWildcard() {}
	public void NamePattern.checkFriendAspectWildcard() {
		if (getHostModule() == null) { //if not in module, continue to next
			return;
		}
		if (containsWildcard()) {
			error("Wildcards are not allowed in friend aspects.");
		}
	}
	
	//Check for non-existent aspect (traverse AspectDecls, marking off 
	//OMFriendMembers as they match. Then do another pass to check if the friend aspects
	//were found)
	public void ASTNode.markFriendMemberExistence() {}
	public void AspectDecl.markFriendMemberExistence() {
		Collection aspectNodes = getOMAbcExtension().moduleStruct.getAspectNodes();
		for (Iterator i = aspectNodes.iterator(); i.hasNext();) {
			JAModuleNodeAspect aspectNode = (JAModuleNodeAspect)i.next();
			if (aspectNode.getCPEPattern().matchesType(this)) {
				aspectNode.setFound(true);
			}
		}
	}

	//pass to collect all the friend members that don't match an aspect	
	public void ASTNode.collectNonexistentFriendAspects() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).collectNonexistentFriendAspects();
		}
	}
	public void CompilationUnit.collectNonexistentFriendAspects() {
	}
	public void OMCompilationUnit.collectNonexistentFriendAspects() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).collectNonexistentFriendAspects();
		}
	}
	public void NamePattern.collectNonexistentFriendAspects() {
		//if not in a module member or not a friend aspect
		if (getHostOMModuleMember() == null ||
			!(getHostOMModuleMember().isFriendMember())) {
			return;
		}
		//if not the root name pattern
		if (namePatternRoot() != this) {
			return;
		}
		JAModuleNodeAspect aspectNode = (JAModuleNodeAspect)getOMAbcExtension().moduleStruct.getNode(
					this.toString(), 
					ModuleNode.TYPE_ASPECT);
		if (!aspectNode.isFound()) {
			error("Friend aspect " + this.toString() + " does not exist.");
		}
		
		//arguable if this is needed at all
		super.collectNonexistentFriendAspects();
	}
	
	//Single pass
	public void ASTNode.checkModuleITDErrors() {}
	public void TypeDecl.checkModuleITDErrors() {
		ModuleNode owner = getOMAbcExtension().moduleStruct.getOwner(this);
		if (owner == null) {
			return;
		}
		//Check fields
		for (Iterator i = fieldsIterator(); i.hasNext(); ){
			ASTNode node = (ASTNode) i.next();
			if (node instanceof IntroducedFieldDeclaration) {
				checkITDField((IntroducedFieldDeclaration) node ,owner);
			}
		}
		
		//Check methods
		for (Iterator i = methodsIterator(); i.hasNext(); ){
			ASTNode node = (ASTNode) i.next();
			if (node instanceof IntertypeMethodDecl) {
				checkITDMethod((IntertypeMethodDecl) node ,owner);
			}
		}
		
		//Check constructors
		for (Iterator i = constructors().iterator(); i.hasNext(); ){
			ASTNode node = (ASTNode) i.next();
			if (node instanceof IntertypeConstructorDecl) {
				checkITDConstructor((IntertypeConstructorDecl) node ,owner);
			}
		}
		
		//check parents
		checkITDParents(owner);
	}

	protected void TypeDecl.checkITDField(IntroducedFieldDeclaration field, ModuleNode owner) {
		OMModuleDecl ownerDecl = getHostProgram().getModuleFromModuleNode(owner);
		//check for friendship
		if (getOMAbcExtension()
				.moduleStruct
				.isInSameModuleSet(
					((AspectDecl)(field.aspectType())).getModuleStructNode(),
					ownerDecl.getModuleStructNode()
				)
			) {
			return;
		}
		
		IntertypeFieldDeclaration origField = null; 
		dance: 
		for (Iterator i = field.aspectType().memberFields(field.getOriginalName()).iterator(); i.hasNext();) {
			IntertypeFieldDeclaration itfd = (IntertypeFieldDeclaration) i.next();
			
			//TODO: Divide this method into InterfaceDecl and ClassDecl
			//check superclass
			if (this instanceof ClassDecl) {
				ClassDecl thisClass = (ClassDecl) this;
				if (thisClass.hasSuperclass()) {
					if (((TypeAccess)(itfd.getTargetType())).type() == thisClass.superclass()) {
						origField = (IntertypeFieldDeclaration) itfd;
						break dance;
					}
				}
				//check interfaces
				for (Iterator outerIter = thisClass.interfacesIterator(); outerIter.hasNext(); ) {
					TypeDecl type = (TypeDecl)outerIter.next();
					if (((TypeAccess)(itfd.getTargetType())).type() == type) {
						origField = (IntertypeFieldDeclaration) itfd;
						break dance;
					}
				}
			} else if (this instanceof InterfaceDecl) {
				InterfaceDecl thisClass = (InterfaceDecl) this;
				//check interfaces
				for (Iterator outerIter = thisClass.superinterfacesIterator(); outerIter.hasNext(); ) {
					TypeDecl type = (TypeDecl)outerIter.next();
					if (((TypeAccess)(itfd.getTargetType())).type() == type) {
						origField = (IntertypeFieldDeclaration) itfd;
						break dance;
					}
				}
			}
			if (((TypeAccess)(itfd.getTargetType())).type() == this) {
				origField = (IntertypeFieldDeclaration) itfd;
			}
		}
		assert (origField != null) : "Cannot find original IntertypeFieldDecl for an IntroducedFieldDeclaration";
		
		JAOpenClassContext context = 
			new JAOpenClassContextField(this, (AspectDecl)(field.aspectType()));
		if (!ownerDecl.getOpenClassExpr().isAllowed(OCFType.FIELD, context)) {
			origField.error("Inter-type field introduced by aspect " + 
                            field.aspectType().fullName() +
                            " to class " + this.fullName() +
                            " not allowed by class' owning module " +
                            ownerDecl.getModuleName());
		}
		
	}
	protected void TypeDecl.checkITDMethod( IntertypeMethodDecl method, ModuleNode owner) {
		OMModuleDecl ownerDecl = getHostProgram().getModuleFromModuleNode(owner);
		//check for friendship
		if (getOMAbcExtension()
				.moduleStruct
				.isInSameModuleSet(
					((AspectDecl)(method.hostAspect())).getModuleStructNode(),
					ownerDecl.getModuleStructNode()
				)
			) {
			return;
		}
		JAOpenClassContext context = 
			new JAOpenClassContextMethod(this, ((AspectDecl)(method.hostAspect())));
		if (!ownerDecl.getOpenClassExpr().isAllowed(OCFType.METHOD, context)) {
			method.error("Inter-type method introduced by aspect " +
        	                method.hostAspect().fullName() +
        	                " to class " + this.fullName() +
        	                " not allowed by class' owning module " +
        	                ownerDecl.getModuleName());
		}
	}
	protected void TypeDecl.checkITDConstructor(IntertypeConstructorDecl cons, ModuleNode owner) {
		OMModuleDecl ownerDecl = getHostProgram().getModuleFromModuleNode(owner);
		//check for friendship
		if (getOMAbcExtension()
				.moduleStruct
				.isInSameModuleSet(
					((AspectDecl)(cons.hostAspect())).getModuleStructNode(),
					ownerDecl.getModuleStructNode()
				)
			) {
			return;
		}
		JAOpenClassContext context = 
			new JAOpenClassContextMethod(this, ((AspectDecl)(cons.hostAspect())));
		if (!ownerDecl.getOpenClassExpr().isAllowed(OCFType.METHOD, context)) {
			cons.error("Inter-type constructor introduced by aspect " +
        	                cons.hostAspect().fullName() +
        	                " to class " + this.fullName() +
        	                " not allowed by class' owning module " +
        	                ownerDecl.getModuleName());
		}
	}
	
	protected void TypeDecl.checkITDParents(ModuleNode owner) {}
	protected void ClassDecl.checkITDParents(ModuleNode owner) {
		TypeDecl intSuper = introducedSuperclass();
		if (intSuper != null) {
			for (DeclareParentsExtends dp : getDeclareParentsExtendsDecls(this, intSuper)) {
				for (Access a : dp.getTypeAccessList()) {
					TypeAccess t = (TypeAccess) a;
					checkDeclareParentVsModule(owner, (AspectDecl)dp.hostType(),t.type(), dp); 
				}
			}
		}
		checkITDParentsInterfaces(owner);
	}
	protected void InterfaceDecl.checkITDParents(ModuleNode owner) {
		checkITDParentsInterfaces(owner);
	}
	protected void TypeDecl.checkITDParentsInterfaces(ModuleNode owner) {
		for (Iterator i = introducedInterfaces().iterator(); i.hasNext(); ){
			InterfaceDecl idecl = (InterfaceDecl)i.next();
			for (DeclareParentsImplements dp : getDeclareParentsImplementsDecls(this, idecl)) {
				for (Access a : dp.getTypeAccessList()) {
					TypeAccess t = (TypeAccess) a;
					checkDeclareParentVsModule(owner, (AspectDecl)dp.hostType(), t.type(), dp); 
				}
			}
		}
	}
	
	protected void TypeDecl.checkDeclareParentVsModule(ModuleNode owner, AspectDecl hostAspect, TypeDecl declaredParent, BodyDecl dpDecl) {
		OMModuleDecl ownerDecl = getHostProgram().getModuleFromModuleNode(owner);
		//check for friendship
		if (getOMAbcExtension()
				.moduleStruct
				.isInSameModuleSet(
					hostAspect.getModuleStructNode(),
					ownerDecl.getModuleStructNode()
				)
			) {
			return;
		}
		
		JAOpenClassContextParent context = new JAOpenClassContextParent(this, hostAspect, declaredParent);
		if (!ownerDecl.getOpenClassExpr().isAllowed(OCFType.PARENT, context)) {
			dpDecl.error("declare parents not allowed by the parent module " + 
	                            ownerDecl.getModuleName() +
	                            " of class " + this.fullName());
		}
	}
	
	//really should only return one, just kept it for consistency
	protected Collection<DeclareParentsExtends> TypeDecl.getDeclareParentsExtendsDecls(TypeDecl child, TypeDecl parent) {
		Collection<DeclareParentsExtends> ret = new HashSet<DeclareParentsExtends>();
		//extends
		for (Iterator i = declareParentsExtends().iterator(); i.hasNext(); ) {
			DeclareParentsExtends dp = (DeclareParentsExtends) i.next();
			if (!dp.getPattern().matchesType(child)) {
				continue;
			}
			for (Access a : dp.getTypeAccessList()) {
				TypeAccess t = (TypeAccess)a;
				if (t.type() == parent) {
					ret.add(dp);
				}
			}
		}
		return ret;
	}
	
	protected Collection<DeclareParentsImplements> TypeDecl.getDeclareParentsImplementsDecls(TypeDecl child, TypeDecl parent) {
		Collection<DeclareParentsImplements> ret = new HashSet<DeclareParentsImplements>();
		//implements
		for (Iterator i = declareParentsImplements().iterator(); i.hasNext(); ) {
			DeclareParentsImplements dp = (DeclareParentsImplements) i.next();
			if (!dp.getPattern().matchesType(child)) {
				continue;
			}
			for (Access a : dp.getTypeAccessList()) {
				TypeAccess t = (TypeAccess)a;
				if (t.type() == parent) {
					ret.add(dp);
				}
			}
		}
		return ret;
	}
}