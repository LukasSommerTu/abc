/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Neil Ongkingco
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

import abc.ja.om.modulestruct.*;
import abc.ja.om.*;

aspect OMCollectModuleMembers {
	public void ASTNode.collectModuleMembers() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).collectModuleMembers();
		}
	}
	public void CompilationUnit.collectModuleMembers() {
	}
	public void OMCompilationUnit.collectModuleMembers() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).collectModuleMembers();
		}
	}
	
	public void OMIncludeMember.collectModuleMembers() {
		JAModuleNodeModule parent_node = 
				(JAModuleNodeModule) getHostModule().getModuleStructNode();
		for (OMIncludeMemberID incMemID : getOMIncludeMemberIDList()) {
			String includeID = incMemID.getID();
			JAModuleNodeModule node = 
				(JAModuleNodeModule)getOMAbcExtension().moduleStruct.getNode(
					includeID, 
					ModuleNode.TYPE_MODULE);
			//Module not found
			if (node == null) {
				error("Included module " + includeID + " not found");
				return;
			}
			//Root module included
			if (node.isRoot()) {
				error("Included module " + includeID + " is root");
				return;
			}
			//Multiple module include
			if (node.getParent() != null) {
				error("Module " + node.name() + " already included in module " + node.getParent().name());
			}
			if (getOMIncludeMemberType().getID().matches("constrain")) {
				node.setIsConstrained(true);
			}
			getOMAbcExtension().moduleStruct.addMember(
				parent_node.name(), 
				node);
		}
	}
	
	public void OMFriendMember.collectModuleMembers() {
		for (Pattern pat : getNamePatternList()) {
			String name = pat.toString();
			abc.om.modulestruct.ModuleNode node = getOMAbcExtension().moduleStruct.addAspectNode(name, pat, pos());
			if (node == null) {
				error("Aspect " + pat.toString() + " is already a friend in another module");
				continue;
			}
			getOMAbcExtension().moduleStruct.addMember(getHostModule().getModuleName(), node);
		}
		super.collectModuleMembers();
	}
	public void OMClassMember.collectModuleMembers() {
		for (Pattern pat : getPatternList()) {
			String name = getHostModule().getModuleName();
			abc.om.modulestruct.ModuleNode node = getOMAbcExtension().moduleStruct.addClassNode(name, pat, pos());
			getOMAbcExtension().moduleStruct.addMember(getHostModule().getModuleName(), node);
		}
		super.collectModuleMembers();
	}
}