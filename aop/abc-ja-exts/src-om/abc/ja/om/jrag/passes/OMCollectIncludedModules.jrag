import abc.ja.om.aspectinfo.*;

aspect OMCollectIncludedModules {
	public void ASTNode.collectIncludedModules() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).collectIncludedModules();
		}
	}
	public void CompilationUnit.collectIncludedModules() {
	}
	public void OMCompilationUnit.collectIncludedModules() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).collectIncludedModules();
		}
	}
	
	public void OMIncludeMember.collectIncludedModules() {
		JAModuleNodeModule parent_node = 
				(JAModuleNodeModule)getOMAbcExtension().moduleStruct.getNode(
					getHostModule().getModuleName(), 
					ModuleNode.TYPE_MODULE);
		for (OMIncludeMemberID incMemID : getOMIncludeMemberIDList()) {
			String includeID = incMemID.getID();
			JAModuleNodeModule node = 
				(JAModuleNodeModule)getOMAbcExtension().moduleStruct.getNode(
					includeID, 
					ModuleNode.TYPE_MODULE);
			//Module not found
			if (node == null) {
				error("Included module " + includeID + " not found");
				return;
			}
			//Root module included
			if (node.isRoot()) {
				error("Included module " + includeID + " is root");
				return;
			}
			//Multiple module include
			if (node.getParent() != null) {
				error("Module " + node.name() + " already included in module " + node.getParent().name());
			}
			if (getOMIncludeMemberType().getID().matches("constrain")) {
				node.setIsConstrained(true);
			}
			getOMAbcExtension().moduleStruct.addMember(
				parent_node.name(), 
				node);
		}
	}
}