//declaration of global functions over the openmod AST nodes
import abc.ja.om.modulestruct.*;
import abc.ja.om.OMParentModule;

aspect OMGlobals {

	//convenience method for abcextension
	syn abc.ja.om.AbcExtension Program.getOMAbcExtension() = ((abc.ja.om.AbcExtension)abc.main.Main.v().getAbcExtension());
	eq Program.getChild(int i).getOMAbcExtension() = ((abc.ja.om.AbcExtension)abc.main.Main.v().getAbcExtension()); 
	inh abc.ja.om.AbcExtension OMModuleDecl.getOMAbcExtension();
	inh abc.ja.om.AbcExtension OMModuleMember.getOMAbcExtension();
	inh abc.ja.om.AbcExtension TypeDecl.getOMAbcExtension();
	inh abc.ja.om.AbcExtension NamePattern.getOMAbcExtension();
	
	eq Program.getChild(int i).getHostModule() = null;
	eq OMModuleDecl.getChild(int i).getHostModule() = this;
	inh OMModuleDecl OMModuleDecl.getHostModule();
	inh OMModuleDecl OMModuleMember.getHostModule();
	inh OMModuleDecl NamePattern.getHostModule();
	inh OMModuleDecl OMIncludeMemberID.getHostModule();
	
	eq Program.getChild(int i).getHostOMModuleMember() = null;
	eq OMModuleMember.getChild(int i).getHostOMModuleMember() = this;
	inh OMModuleMember NamePattern.getHostOMModuleMember();
	
	eq Program.getChild(int i).getHostProgram() = this;
	inh Program OMModuleDecl.getHostProgram();
	inh Program OMModuleMember.getHostProgram();
	inh Program OMOpenClassFlag.getHostProgram();
	inh Program OMToClause.getHostProgram();
	inh Program TypeDecl.getHostProgram();
	
	syn boolean OMModuleMember.isFriendMember() = false;
	syn boolean OMModuleMember.isClassMember() = false;
	syn boolean OMModuleMember.isOpenClassMember() = false;
	syn boolean OMModuleMember.isIncludeMember() = false;
	syn boolean OMFriendMember.isFriendMember() = true;
	syn boolean OMClassMember.isClassMember() = true;
	syn boolean OMOpenClassMember.isOpenClassMember() = true;
	syn boolean OMIncludeMember.isIncludeMember() = true;
	
	syn abc.om.modulestruct.ModuleNode OMModuleDecl.getModuleStructNode() {
		JAModuleNodeModule moduleNode = 
			(JAModuleNodeModule)getOMAbcExtension()
				.moduleStruct
				.getNode(getModuleName(), ModuleNode.TYPE_MODULE);
		return moduleNode;
	}
	syn abc.om.modulestruct.ModuleNode AspectDecl.getModuleStructNode() {
		JAModuleNodeAspect aspectNode = (JAModuleNodeAspect)getOMAbcExtension().moduleStruct.getNode(
					this.fullName(), 
					ModuleNode.TYPE_ASPECT);
		return aspectNode;
	}
	
	//get a moduledecl given its name
	syn lazy OMModuleDecl ASTNode.getModuleFromName(String moduleName) {
		OMModuleDecl ret = null;
		for (int i = 0 ; i < getNumChild(); i++) {
			ret = getChild(i).getModuleFromName(moduleName);
			if (ret != null) {
				return ret;
			}
		}
		return null;
	}
	syn lazy OMModuleDecl CompilationUnit.getModuleFromName(String moduleName) {
		return null;
	}
	syn lazy OMModuleDecl OMCompilationUnit.getModuleFromName(String moduleName) {
		OMModuleDecl ret = null;
		for (int i = 0 ; i < getNumChild(); i++) {
			ret = getChild(i).getModuleFromName(moduleName);
			if (ret != null) {
				return ret;
			}
		}
		return null;
	}
	syn lazy OMModuleDecl OMModuleDecl.getModuleFromName(String moduleName) {
		if (getModuleName().matches(moduleName)) {
			return this;
		} else {
			//no nested modules
			return null;
		}
	}
	
	//get a module's parent and type of inclusion. Null if no parent
	syn lazy OMParentModule ASTNode.getModuleParent(OMModuleDecl module) {
		OMParentModule ret = null;
		for (int i = 0 ; i < getNumChild(); i++) {
			ret = getChild(i).getModuleParent(module);
			if (ret != null) {
				return ret;
			}
		}
		return null;
	}
	syn lazy OMParentModule CompilationUnit.getModuleParent(OMModuleDecl module) {
		return null;
	}
	syn lazy OMParentModule OMCompilationUnit.getModuleParent(OMModuleDecl module) {
		OMParentModule ret = null;
		for (int i = 0 ; i < getNumChild(); i++) {
			ret = getChild(i).getModuleParent(module);
			if (ret != null) {
				return ret;
			}
		}
		return null;
	}
	syn lazy OMParentModule OMIncludeMember.getModuleParent(OMModuleDecl module) {
		for (OMIncludeMemberID moduleID : getOMIncludeMemberIDList()) {
			if (moduleID.getID().matches(module.getModuleName())) {
				return new OMParentModule(getOMIncludeMemberType(), getHostModule());
			}
		}
		return null;
		//don't call super anymore
	}
	
	syn lazy OMModuleDecl ASTNode.getModuleFromModuleNode(ModuleNode moduleNode) {
		OMModuleDecl ret = null;
		for (int i = 0 ; i < getNumChild(); i++) {
			ret = getChild(i).getModuleFromModuleNode(moduleNode);
			if (ret != null) {
				return ret;
			}
		}
		return null;
	}
	syn lazy OMModuleDecl CompilationUnit.getModuleFromModuleNode(ModuleNode moduleNode) {
		return null;
	}
	syn lazy OMModuleDecl OMCompilationUnit.getModuleFromModuleNode(ModuleNode moduleNode) {
		OMModuleDecl ret = null;
		for (int i = 0 ; i < getNumChild(); i++) {
			ret = getChild(i).getModuleFromModuleNode(moduleNode);
			if (ret != null) {
				return ret;
			}
		}
		return null;
	}
	syn lazy OMModuleDecl OMModuleDecl.getModuleFromModuleNode(ModuleNode moduleNode) {
		if (getModuleStructNode() == moduleNode) {
			return this;
		} else {
			return null;
		}
	}
}