import abc.ja.om.jrag.*;

aspect OMPrettyPrint {
	
	public void ASTNode.printModule() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).printModule();
		}
	}
	public void OMModuleDecl.printModule() {
		System.out.println(toString());
		super.printModule();
	}
	
	public void OMModuleDecl.toString(StringBuffer s) {
		if (isRoot()) {
			s.append("root ");
		}
		s.append("module ");
		s.append(getModuleName());
		s.append(" {\n");
		for (OMModuleMember member : getOMModuleMemberList()) {
			s.append("\t");
			member.toString(s);
			s.append("\n");
		}
		s.append("}\n");
	}
	public void OMClassMember.toString(StringBuffer s) {
		s.append("class ");
		boolean first = true;
		for (Pattern pat : getPatternList()) {
			if (!first) {
				s.append(", ");
			}
			
			pat.toString(s);
			
			if (first) {
				first = false;
			}
		}
		s.append(";");
	}
	public void OMPointcutMember.toString(StringBuffer s) {
		for (Modifier m : getModifiers().getModifiers()) {
			m.toString(s);
			s.append(" ");
		}
		getOMPointcutMemberType().toString(s);
		s.append(" ");
		getOMToClause().toString(s);
		s.append(" : ");
		getPointcutExpr().toString(s);
		s.append(";");
	}
	public void OMPointcutMemberType.toString(StringBuffer s) {
		s.append(getID());
	}
	public void OMToClause.toString(StringBuffer s) {
		s.append("to ");
		getPattern().toString(s);
	}
	public void OMIncludeMember.toString(StringBuffer s) {
		getOMIncludeMemberType().toString(s);
		s.append(" ");
		boolean first = true;
		for (OMIncludeMemberID id : getOMIncludeMemberIDList()) {
			if (!first) {
				s.append(", ");
			}
			id.toString(s);
			if (first) {
				first = false;
			}
		}
		s.append(";");
	}
	public void OMIncludeMemberType.toString(StringBuffer s) {
		s.append(getID());
	}
	public void OMIncludeMemberID.toString(StringBuffer s) {
		s.append(getID());
	}
	public void OMFriendMember.toString(StringBuffer s) {
		s.append("friend ");
		boolean first = true;
		for (NamePattern pat : getNamePatternList()) {
			if (!first) {
				s.append(", ");
			}
			pat.toString(s);
			if (first) {
				first = false;
			}
		}
		s.append(";");
	}
	
	public void OMOpenClassMember.toString(StringBuffer s) {
		s.append("openclass ");
		boolean first = true;
		for (OMOpenClassFlag omFlag : 
				getOMOpenClassFlagList().getOMOpenClassFlagList()) {
			if (!first) {
				s.append(", ");
			}
			
			omFlag.toString(s);
			
			if (first) {
				first = false;
			}
		}
		s.append(" ");
		getOMToClause().toString(s);
		s.append(" : ");
		getPattern().toString(s);
		s.append(";");
	}
	
	public abstract void OMOpenClassFlag.toString(StringBuffer s);
	
	public void OMOpenClassField.toString(StringBuffer s) {
		s.append("field");
	}
	public void OMOpenClassParent.toString(StringBuffer s) {
		s.append("parent(");
		getParentAspects().toString(s);
		s.append(")");
	}
	public void OMOpenClassMethod.toString(StringBuffer s) {
		s.append("method");
	}
	
	public void ModPattern.toString(StringBuffer s) {
		for (ModifierPattern pat : getModifierPatternList()) {
			pat.toString(s);
			s.append(" ");
		}
		getPattern().toString(s);
	}
}