/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Neil Ongkingco
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */


aspect OMSyntacticContext {

	syn boolean TypeDecl.isModuleDecl() = false;
	syn boolean OMModuleDecl.isModuleDecl() = true;

	//host type (for named pointcuts, cflow)
	eq OMModuleDecl.getOMModuleMember(int index).hostType() = this;
	
	//nameType for patterns without wildcards
	eq OMFriendMember.getNamePattern(int index).nameType() = NameType.TYPE_NAME;
	eq OMClassMember.getPattern(int index).nameType() = NameType.TYPE_NAME;
	eq OMToClause.getPattern().nameType() = NameType.TYPE_NAME;
	eq OMOpenClassMember.getPattern().nameType() = NameType.TYPE_NAME;
	eq OMOpenClassParent.getParentAspects().nameType() = NameType.TYPE_NAME;

	//force privileged access from modules
	refine Privileged eq TypeDecl.accessibleFrom(TypeDecl type) {
		if (type.isModuleDecl()) {
			return true;
		}
		return Privileged.TypeDecl.accessibleFrom(type);
	}
	
	//denotesMember for conversion of friend members to explicit type patterns see (abc-ja Patterns.jrag)
	eq OMFriendMember.getNamePattern(int index).denotesMember() = true;
	eq OMClassMember.getPattern(int index).denotesMember() = true;
	
	//Manually set IDstart and IDend so line numbers on OMModuleDecls work
	//properly. Is needed since the ID passed is a String "<ModuleName>$DummyAspect"
	//instead of a symbol.
	public ASTNode OMModuleDecl.setModuleIDStart(int idstart) {
		this.IDstart = idstart;
		return this;
	}
	
	public ASTNode OMModuleDecl.setModuleIDEnd(int idend) {
		this.IDend = idend;
		return this;
	}
}