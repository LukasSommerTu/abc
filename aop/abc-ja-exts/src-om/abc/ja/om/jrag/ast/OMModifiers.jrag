/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Neil Ongkingco
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

aspect OMModifiers {
	//pointcut modifiers
	eq OMPointcutMember.getModifiers().mayBePrivate() = true;
	
	//module root modifier
	inh boolean Modifiers.mayBeRoot();

	eq Program.getChild().mayBeRoot() = false;
	eq TypeDecl.getBodyDecl().mayBeRoot() = false;
	eq OMModuleDecl.getModifiers().mayBeRoot() = true;
	
	syn lazy boolean Modifiers.isRoot() = numModifier("root") != 0;
	
	syn lazy boolean OMModuleDecl.isRoot() = getModifiers().isRoot();
	
	refine Privileged public void Modifiers.checkModifiers() {
		Privileged.Modifiers.checkModifiers();
	    if(numModifier("root") > 1)
      		error("only one root allowed");
		if (isRoot() && !mayBeRoot()) {
			error("modifier root not allowed in this context");
		}
	}
	
}