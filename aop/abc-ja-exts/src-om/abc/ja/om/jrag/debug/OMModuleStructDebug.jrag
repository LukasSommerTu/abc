/* abc - The AspectBench Compiler
 * Copyright (C) 2008 Neil Ongkingco
 *
 * This compiler is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This compiler is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this compiler, in the file LESSER-GPL;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

import abc.om.modulestruct.ModuleStructure;
import abc.om.modulestruct.ModuleNodeModule; 
import abc.om.modulestruct.ModuleNode; 

aspect OMModuleStructDebug {
	public void ASTNode.printModuleStructure() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).printModuleStructure();
		}
	}
	public void CompilationUnit.printModuleStructure() {}
	public void OMCompilationUnit.printModuleStructure() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).printModuleStructure();
		}
	}
	public void OMModuleDecl.printModuleStructure() {
        ModuleNodeModule n = (ModuleNodeModule) this.getModuleStructNode();
        assert(n != null) : "Node is null";
        //print the module name
        System.out.println("module " + n.name() + "{");
        System.out.println("\tparent : " + n.getParent());
        System.out.println("\tisConstrained = " + n.isConstrained());
        for (Object objMember : n.getMembers()) {
        	ModuleNode member = (ModuleNode) objMember;
            switch (member.type()) {
	            case ModuleNode.TYPE_CLASS:
	            	System.out.print("\tclass " + member.name() + " cpe = ");
	            	System.out.print(((JAModuleNodeClass)member).getCPEPattern().toString());
	            	System.out.println(" class: " + ((JAModuleNodeClass)member).getCPEPattern().getClass().toString() + ";");
	                break;
	            case ModuleNode.TYPE_ASPECT:
	                System.out.print("\taspect " + member.name() + " cpe = ");
	                System.out.print(((JAModuleNodeAspect)member).getCPEPattern().toString());
	                System.out.println(" class: " + ((JAModuleNodeAspect)member).getCPEPattern().getClass() + ";");
	                break;
	            case ModuleNode.TYPE_MODULE:
	                if (((JAModuleNodeModule)member).isConstrained()) {
	                	System.out.print("\tconstrain ");
	                } else {
	                	System.out.print("\topen ");
	                }
	                System.out.println(member.name());
	                break;
            }
	    }
	    System.out.println("\textPointcut = " + n.getExtPointcut().toString());
	    System.out.println("\tsigPointcut = " + n.getSigAIPointcut().toString());
	    System.out.println("\tprivateSigPointcut = " + n.getPrivateSigAIPointcut().toString());
	    //Print out the open class member expressions
	    super.printModuleStructure();
	    //Print out the parent
	    System.out.println("\tParent:");
	    System.out.println("\t\t" + getHostProgram().getModuleParent(this));
	    //Print out get module decl from name
	    System.out.println("\tgetModuleFromName:");
	    System.out.println("\t\t" + getHostProgram().getModuleFromName(getModuleName()).getModuleName());
	    System.out.println("\tOMModuleDecl.getOpenClassExpr()");
	    System.out.println("\t\t" + getOpenClassExpr());
	    System.out.println("}");
	}
	public void OMOpenClassMember.printModuleStructure() {
		System.out.println("\t" + getOpenClassExpr());
	}
}