CompilationUnit goal =
	om_compilation_unit.ocu;

OMCompilationUnit om_compilation_unit =
	module_decl_list.ml 
	{:
		return new OMCompilationUnit("", new List(), ml);
	:}
	;

List module_decl_list =
	module_decl.m
	{:
		return new List().add(m);
	:}
	|
	module_decl_list.l module_decl.m
	{:
		return l.add(m);
	:}
	;

OMModuleDecl module_decl = 
	modifiers.ml? MODULE.m IDENTIFIER LBRACE module_member_list.mml RBRACE 
	{:
		OMModuleDecl ret = new OMModuleDecl(
			(String)(IDENTIFIER.value) + "$DummyAspect", //classname
			new List(), //body decls
			new Opt(), //superclass
			new List(), //interfaces
			new Opt(), //perclause
			new Modifiers(ml), 
			(String)(IDENTIFIER.value), 
			mml);
		ret.setModuleIDStart(IDENTIFIER.getStart());
		ret.setModuleIDEnd(IDENTIFIER.getEnd());
		return ret;
	:}
	|
	modifiers.ml? MODULE.m IDENTIFIER LBRACE RBRACE 
	{:
		OMModuleDecl ret = new OMModuleDecl(
			(String)(IDENTIFIER.value) + "$DummyAspect", //classname
			new List(), //body decls
			new Opt(), //superclass
			new List(), //interfaces
			new Opt(), //perclause
			new Modifiers(ml), 
			(String)(IDENTIFIER.value), 
			new List());
		ret.setModuleIDStart(IDENTIFIER.getStart());
		ret.setModuleIDEnd(IDENTIFIER.getEnd());
		return ret;
	:}
	;

Modifier modifier =
	ROOT
	{:
		return new Modifier("root");
	:}
	;
	

List module_member_list =
	module_member_list.mml module_member.mm
	{:
		return mml.add(mm);
	:}
	|
	module_member.mm
	{:
		return new List().add(mm);
	:}
	;

OMModuleMember module_member = 
	class_member.cm 
	{:
		return cm;
	:}
	|
	pc_member.pcm
	{:
		return pcm;
	:}
	|
	include_member.im
	{:
		return im;
	:}
	|
	friend_member.fm
	{:
		return fm;
	:}
	|
	open_class_member.oc
	{:
		return oc;
	:}
	;

OMClassMember class_member =
	CLASS.c classname_pattern_expr_list.cpe SEMICOLON.sc
	{:
		return new OMClassMember(cpe);
	:}
	;
	
OMPointcutMember pc_member =
	modifiers.ml? pc_member_type.type to_clause.tc COLON pointcut_expr.pc SEMICOLON.sc
	{:
		return new OMPointcutMember(new Modifiers(ml), type, tc, pc);
	:} 
	;

OMPointcutMemberType pc_member_type =
	EXPOSE.s 
	{: return new OMPointcutMemberType("expose"); :}
	|
	ADVERTISE.s 
	{: return new OMPointcutMemberType("advertise"); :}
	;

OMToClause to_clause =
	{:
		return new OMToClause(new SimpleNamePattern("*"));
	:}
	|
	TO.t classname_pattern_expr.cpe
	{:
		return new OMToClause(cpe);
	:}
	;
	
OMIncludeMember include_member =
	include_member_type.type include_member_id_list.idlist SEMICOLON.sc
	{:
		return new OMIncludeMember(type, idlist);
	:}
	;
	
OMIncludeMemberType include_member_type =
	OPEN.o
	{:
		return new OMIncludeMemberType("open");
	:}
	|
	CONSTRAIN.c
	{:
		return new OMIncludeMemberType("constrain");
	:}
	;
	
List include_member_id_list = 
	include_member_id.imd
	{:
		return new List().add(imd);
	:}
	|
	include_member_id_list.idl COMMA.c include_member_id.imd
	{:
		return idl.add(imd);
	:}
	;
	
OMIncludeMemberID include_member_id =
	IDENTIFIER
	{:
		return new OMIncludeMemberID(IDENTIFIER); 
	:}
	;

OMFriendMember friend_member =
	FRIEND.f name_pattern_list.pl SEMICOLON.sc
	{:
		return new OMFriendMember(pl);
	:}
	;
	
List name_pattern_list =
	name_pattern.pat
	{:
		return new List().add(pat);
	:}
	|
	name_pattern_list.pl COMMA name_pattern.pat
	{:
		return pl.add(pat);
	:}
	;
	
//open class members
OMOpenClassMember open_class_member =
	OPENCLASS open_class_flag_list.ocfl to_clause.tc COLON classname_pattern_expr.cpe SEMICOLON
	{:
		return new OMOpenClassMember(ocfl, tc, cpe);
	:}
	;
	
OMOpenClassFlagList open_class_flag_list =
	//default allows all
	{:
		List defaultList = new List();
		defaultList.add(new OMOpenClassField());
		defaultList.add(new OMOpenClassParent(new SimpleNamePattern("*")));
		defaultList.add(new OMOpenClassMethod());
		return new OMOpenClassFlagList(defaultList);
	:}
	|
	open_class_flag.ocf
	{:
		return new OMOpenClassFlagList(new List().add(ocf));
	:}
	|
	open_class_flag_list.ocfl COMMA open_class_flag.ocf  
	{:
		ocfl.getOMOpenClassFlagList().add(ocf);
		return ocfl;
	:}
	;
	
OMOpenClassFlag open_class_flag =
	FIELD
	{:
		return new OMOpenClassField();
	:}
	|
	PARENT 
	{:
		return new OMOpenClassParent(new SimpleNamePattern("*"));
	:}
	|
	PARENT LPAREN classname_pattern_expr.cpe RPAREN
	{:
		return new OMOpenClassParent(cpe);
	:}
	|
	METHOD
	{:
		return new OMOpenClassMethod();
	:}
	;
	
//replace unary classname patterns to add modifier patterns
Pattern unary_classname_pattern_expr :=
      mod_classname_pattern_expr.a
        {: ParserTrace.parserTrace("unary_classname_pattern_expr is a  mod_classname_pattern");
           return a;
        :}
   |  PC_NOT.x mod_classname_pattern_expr.a 
        {: ParserTrace.parserTrace("! unary_classname_pattern_expr");
           return new NegPattern(a);
        :}
   ;

Pattern mod_classname_pattern_expr =
	basic_classname_pattern.a
	{: 
		ParserTrace.parserTrace("unary_classname_pattern_expr is a  basic_classname_pattern");
   		return a;
	:}
   	|
   	//just add l/rbrack for now, fix later (not really part of openmod as published)
   	LBRACK modifier_pattern_expr.modlist RBRACK mod_classname_pattern_expr.a
	{:
		ParserTrace.parserTrace("[modifier list] mod_classname_pattern_expr");
		return new ModPattern(modlist, a);
	:}
	;
    
//disallow aspectj reserved keywords in class patterns
SimpleNamePattern simple_name_pattern := 
     PC_MULT.m
        {: ParserTrace.parserTrace("name_pattern is a star: ");
           return new SimpleNamePattern("*");
        :}
   | IDENTIFIERPATTERN.a
        {: ParserTrace.parserTrace("name_pattern is simple name pattern: " + a);
           return new SimpleNamePattern(a);
        :}
   | IDENTIFIER
        {: ParserTrace.parserTrace("name_pattern is identifer: " + IDENTIFIER.value);
           return new SimpleNamePattern(IDENTIFIER);
        :}
   ;
	