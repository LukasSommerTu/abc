<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<!-- <?xml-stylesheet type="text/xsl" href="abc_options.xsl"  ?>-->
<options>
  <intro>
    <p>
You can write some introduction to the options document here
if you want. Use <tt>HTML</tt>-style tags if you need to.
Just be sure to close them and nest them properly.
    </p>
    <p>
The HTML-like stuff will be converted to the equivalent latex for you.
Hopefully, you won't have anything complicated.
    </p>
  </intro>
  <section>
<!--
I think it's useful to organize the options into sections (for
readability. If that's too hard, just put them all into one section. You
can make up tags for things that you think are useful information. For
example, it might be useful to tag options which are the same as ajc
options with something like <ajc/>
-->
    <name>General Options</name>
    <!-- Give each section a name. The options in the section follow. -->
    <boolopt>
      <alias>h</alias>
      <alias>help</alias>
      <ajc/>
      <short_desc>Print the usage screen for abc.</short_desc>
      <long_desc>
Prints the usage screen for abc.
<!-- Notice that there are two aliases, -h and -help, so
the XML file has two alias tags. -->
      </long_desc>
    </boolopt>
    <boolopt>
      <alias>v</alias>
      <alias>version</alias>
      <ajc/>
      <short_desc>Print the abc version number.</short_desc>
      <long_desc>
	Print the abc version number. The underlying 
	versions of soot and polyglot, which form part of abc, are also
	printed.
      </long_desc>
    </boolopt>
    <boolopt>
      <alias>verbose</alias>
      <short_desc>Verbose output.</short_desc>
      <long_desc>
	Display information about what abc is doing as it runs.
      </long_desc>
    </boolopt>
    <stringopt>
      <alias>argfile</alias>
      <alias>@</alias> <!-- needs fixing, probably -->
      <set_arg_label>filename</set_arg_label>
      <short_desc>Read arguments from a file.</short_desc>
      <long_desc>Read a list of arguments from the file <use_arg_label/>
	and behave as if they had been passed directly on the command-line.
      </long_desc>
    </stringopt>
  </section>
  <section>
    <name>Input Options</name>
    <pathopt>
      <alias>sourceroots</alias>
<!--
In Soot, we found it useful to have both short documentation and long
documentation for each option. The short is a one-line thing used in
the usage screen. The long is used in the printed documentation.
If that's too much work, just do one of them.
-->
      <set_arg_label>path</set_arg_label>
      <short_desc>Use classes in dirs in <use_arg_label/> as source.</short_desc>
      <long_desc>
<use_arg_label/> should be a list of directories. Tells abc to compile all
.java files found in <use_arg_label/> and any of its subclasses.
      </long_desc>
<!--
For the set_arg_label/use_arg_label thing, you also don't have to do that
if you don't want to. We found it quite useful, because we set it in 
all caps in the usage screen, and in \em in latex. (for abc, in the usage
screen, we probably want to set it in angle brackets for consistency
with ajc)
The idea is that it will come up something like the following in the usage
screen:
  -sourceroots  <path>              Use classes in dirs in <path> as source.
-->
    </pathopt>
    <pathopt>
      <alias>injars</alias>
      <set_arg_label>jar list</set_arg_label>
      <short_desc>Use class files from the jars in 
	<use_arg_label/> as source.</short_desc>
      <long_desc>Use all the class files in the jar files specified by 
	<use_arg_label/> as source. 
      </long_desc>
    </pathopt>
    <pathopt>
      <alias>inpath</alias>
      <set_arg_label>dir list</set_arg_label>
      <short_desc>Use class files found in the directories in <use_arg_label/> 
	as source.</short_desc>
      <long_desc>Use all the class files in the directories specified by 
	<use_arg_label/> as source. 
      </long_desc>
    </pathopt>
    <pathopt>
      <alias>cp</alias>
      <alias>classpath</alias>
      <set_arg_label>classpath</set_arg_label>
      <short_desc>Specify the class path to be used when searching for 
	libraries.</short_desc>
      <long_desc><use_arg_label/> gives a list of zips, 
	jars and directories that will be used when searching for libraries
	referred to in the code being compiled.
      </long_desc>
    </pathopt>
  </section>
  <section>
    <name>Output Options</name>
    <boolopt>
      <alias>dava</alias>
      <default>false</default>
      <short_desc>Decompile instead of outputing classes.
      </short_desc>
      <long_desc>After weaving, run the Dava decompiler to produce
      Java source files of the woven code rather than outputing class files.
      </long_desc>
    </boolopt>
    <stringopt>
      <alias>outjar</alias>
      <set_arg_label>jar</set_arg_label>
      <short_desc>Write output class files into a jar file.</short_desc>
      <long_desc>Write output class files into the jar file specified by
         <use_arg_label/>.</long_desc>
    </stringopt>
    <pathopt>
      <alias>d</alias>
      <set_arg_label>path</set_arg_label>
      <short_desc>Write output class files into a directory.</short_desc>
      <long_desc>Write output class files into the directory specified by
         <use_arg_label/>.</long_desc>
    </pathopt>
  </section>
  <section>
    <name>Warning/Error Reporting Options</name>
    <boolopt>
      <alias>warn-unused-advice</alias>
      <default>true</default>
      <short_desc>Warn if a piece of advice doesn't apply anywhere.
      </short_desc>
      <long_desc>If a piece of advice does not apply at any join point shadow,
	generate a warning. 
      </long_desc>
    </boolopt>
  </section>
  <section>
    <name>Language Options</name>
    <boolopt>
      <alias>nested-comments</alias>
      <short_desc>Allow nested comments.</short_desc>
      <long_desc>If this option is enabled, comments of the form 
	/* ... /* ... */ ... */ will be allowed.
      </long_desc>
    </boolopt>
    <stringopt>
       <alias>ext</alias>
       <set_arg_label>package name</set_arg_label>
       <short_desc>Load a language extension.</short_desc>
       <long_desc>Load the AspectJ language extension defined in the package
           given by <use_arg_label/>. For example, abc.eaj specifies the
           EAJ language extension supplied with abc.
       </long_desc>
    </stringopt>
    <!-- should -1.3 and -1.4 be boolopts? -->
    <boolopt>
      <alias>1.3</alias>
      <ajc/>
      <short_desc>Java 1.3 compliance mode.</short_desc>
      <long_desc>Switch to Java 1.3 compliance mode. The default is 1.4.
      </long_desc>
    </boolopt>
    <boolopt>
      <alias>1.4</alias>
      <ajc/>
      <short_desc>Java 1.4 compliance mode.</short_desc>
      <long_desc>Use Java 1.3 compliance mode. This is the default.
      </long_desc>
    </boolopt>
  </section>
  <section>
    <name>Optimization Options</name>
    <intopt>
      <alias>O</alias>
      <default>1</default>
      <short_desc>Set the general optimization level.</short_desc>
      <long_desc>Set the general optimization level. 0 means no optimizations,
	1 means the standard intra-procedural options, and 3 means the
	standard inter-procedural options. 2 currently has the same effect
	as 1.
      </long_desc>
    </intopt>
  </section>
  <section>
  <undocumented/>
    <name>Debug options</name>
    <debugopt>
      <undocumented/>
<!--
The fact that this option is undocumented will probably just be
implied by the fact that it's a debugopt, but it may be nice to
specify it explicitly, so that we can later make other options
(non-debug) options undocumented if we wish.
-->
      <alias>ajcCompliance</alias>
      <default>false</default>
      <short_desc>foo</short_desc>
      <long_desc>
Makes abc bug-for-bug compatible with ajc.
      </long_desc>
    </debugopt>
<!--
If you think of things other than pathopt/debugopt/boolopt, just start
using them (as long as you use them consistently)
-->
  </section>
<!--
you can put more sections here
actually, it probably makes sense to put all the debug options in their
own section
-->
</options>
