package abc.impact.analysis;

import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import soot.Hierarchy;
import soot.Scene;
import soot.SootClass;
import soot.SootField;
import soot.SootMethod;
import abc.impact.utils.ImpactUtil;
import abc.weaving.aspectinfo.FieldSig;
import abc.weaving.aspectinfo.GlobalAspectInfo;
import abc.weaving.aspectinfo.InAspect;
import abc.weaving.aspectinfo.IntertypeConstructorDecl;
import abc.weaving.aspectinfo.IntertypeFieldDecl;
import abc.weaving.aspectinfo.IntertypeMethodDecl;
import abc.weaving.aspectinfo.MethodSig;

/**
 * Gather noise and targe fields/methods caused by itd injection
 * @author Dehua Zhang
 *
 */
public final class ITDNoiseAnalysis {
	
	private Map<SootMethod, InAspect> noiseMethods = new HashMap<SootMethod, InAspect>();
	private Map<SootField, InAspect> noiseFields = new HashMap<SootField, InAspect>();
	private Map<SootMethod, InAspect> targetMethods = new HashMap<SootMethod, InAspect>();
	private Map<SootField, InAspect> targetFields = new HashMap<SootField, InAspect>();
	private static ITDNoiseAnalysis instance = null;

	private ITDNoiseAnalysis() {
		gatherNoiseAndTarget();
	}
	
	public static ITDNoiseAnalysis v() {
		if (instance == null) instance = new ITDNoiseAnalysis();
		return instance;
	}
	
	public static void reset() {
		instance = null;
	}
	
	public void rerunAnalysis() {
		gatherNoiseAndTarget();
	}
	
	public Map<SootField, InAspect> getNoiseFields() {
		return Collections.unmodifiableMap(noiseFields);
	}

	public Map<SootMethod, InAspect> getNoiseMethods() {
		return Collections.unmodifiableMap(noiseMethods);
	}

	public Map<SootField, InAspect> getTargetFields() {
		return Collections.unmodifiableMap(targetFields);
	}

	public Map<SootMethod, InAspect> getTargetMethods() {
		return Collections.unmodifiableMap(targetMethods);
	}
	
	@Override
	public String toString() {
		StringBuffer result = new StringBuffer("\n");
		result.append("noise fields: " + noiseFields + "\n");
		result.append("noise methods: " + noiseMethods + "\n");
		result.append("target fields: " + targetFields + "\n");
		result.append("target methods: " + targetMethods + "\n");
		return result.toString();
	}

	private void gatherNoiseAndTarget() {
		//gather noise fields and methods generated by IntertypeAdjuster
		//       target fields and methods generated for itd injection
		GlobalAspectInfo globalAspectInfo = abc.main.Main.v().getAbcExtension().getGlobalAspectInfo();
		noiseMethods = new HashMap<SootMethod, InAspect>();
		noiseFields = new HashMap<SootField, InAspect>();
		targetMethods = new HashMap<SootMethod, InAspect>();
		targetFields = new HashMap<SootField, InAspect>();
		gatherFromITDField(globalAspectInfo);
		gatherFromITDMethod(globalAspectInfo);
		gatherFromITDConstructor(globalAspectInfo);
		// System.out.println(this);
	}

	private void gatherFromITDMethod(GlobalAspectInfo globalAspectInfo) {
		for (Iterator itdMethodDeclIt = globalAspectInfo.getIntertypeMethodDecls().iterator(); itdMethodDeclIt.hasNext(); ) {
			IntertypeMethodDecl itdMethodDecl = (IntertypeMethodDecl)itdMethodDeclIt.next();
			MethodSig itdMethodSig = itdMethodDecl.getTarget();
			SootClass itdMethodClass = itdMethodSig.getDeclaringClass().getSootClass();
			boolean isNoise =  ImpactUtil.isInvisibleITDMethod(itdMethodDecl);
			
			//System.out.println(itdMethodSig);
			//TODO put getImpl into noise??
			SootMethod target = ImpactUtil.getITDMethodTarget(itdMethodSig);

			if (isNoise) {
				if (target != null) noiseMethods.put(target, itdMethodDecl);
			} else {
				if (target != null) targetMethods.put(target, itdMethodDecl);
			}
			
			if (itdMethodClass.isInterface()) {
				Hierarchy hierarchy = Scene.v().getActiveHierarchy();
				List implementors = hierarchy.getImplementersOf(itdMethodClass);
				
				for (Iterator childClassIt = implementors.iterator(); childClassIt
						.hasNext();) {
					final SootClass childClass = (SootClass) childClassIt.next();
					if (childClass.isInterface())
						continue;
					if (childClass.hasSuperclass()
							&& implementors.contains(childClass.getSuperclass()))
						continue;
					
					SootMethod itarget = null;
					if (target != null) {
						try {
							itarget = childClass.getMethod(target.getName(), target.getParameterTypes());
						} catch (RuntimeException e) {/*do not want the exception thrown by getMethod interrupts the gather process*/}
						if (itarget != null) {
							if (isNoise) {
								noiseMethods.put(itarget, itdMethodDecl);
							} else {
								targetMethods.put(itarget, itdMethodDecl);
							}
						}
					}
				}
			}
		}
	}

	private void gatherFromITDConstructor(GlobalAspectInfo globalAspectInfo) {
		for (Iterator<IntertypeConstructorDecl> itdConstructorDeclIt = globalAspectInfo.getIntertypeConstructorDecls().iterator(); itdConstructorDeclIt.hasNext(); ) {
			IntertypeConstructorDecl itdConstructorDecl = itdConstructorDeclIt.next();
			
			boolean isNoise =  ImpactUtil.isInvisibleITDConstructor(itdConstructorDecl);
			//TODO put getBody into noise??
			SootMethod target = ImpactUtil.getITDConstructorTarget(itdConstructorDecl);
			
			if (isNoise) {
				if (target != null) noiseMethods.put(target, itdConstructorDecl);
			} else {
				if (target != null) targetMethods.put(target, itdConstructorDecl);
			}
		}
	}

	private void gatherFromITDField(GlobalAspectInfo globalAspectInfo) {

		for (Iterator itdFieldDeclIt = globalAspectInfo.getIntertypeFieldDecls().iterator(); itdFieldDeclIt.hasNext(); ) {
			IntertypeFieldDecl itdFieldDecl = (IntertypeFieldDecl)itdFieldDeclIt.next();
			FieldSig itdFieldSig = itdFieldDecl.getTarget();
			SootClass itdFieldClass = itdFieldSig.getSootField().getDeclaringClass();
			boolean isNoise = ImpactUtil.isInvisibleITDField(itdFieldDecl);

			FieldSig targetSig = itdFieldDecl.getTarget();
			SootField target = null;
			if (targetSig != null) target = targetSig.getSootField();
			MethodSig getterSig = itdFieldDecl.getGetter();
			SootMethod getter = null;
			if (getterSig != null) getter = getterSig.getSootMethod();
			MethodSig setterSig = itdFieldDecl.getSetter();
			SootMethod setter = null;
			if (setterSig != null) setter = setterSig.getSootMethod();
			MethodSig initSig = itdFieldDecl.getInit();
			SootMethod init = null;
			if (initSig != null) init = initSig.getSootMethod();
			
			if (getter != null) noiseMethods.put(getter, itdFieldDecl);
			if (setter != null) noiseMethods.put(setter, itdFieldDecl);
			if (init != null) noiseMethods.put(init, itdFieldDecl);
			
			if (isNoise) {
				if (target != null) noiseFields.put(target, itdFieldDecl);
			} else {
				if (target != null) targetFields.put(target, itdFieldDecl);
			}
			
//			System.out.println("1. " + noiseMethods);
			
			if (itdFieldClass.isInterface()) {
				Hierarchy hierarchy = Scene.v().getActiveHierarchy();
				List implementors = hierarchy.getImplementersOf(itdFieldClass);
				
				for (Iterator childClassIt = implementors.iterator(); childClassIt
						.hasNext();) {
					final SootClass childClass = (SootClass) childClassIt
							.next();
					if (childClass.isInterface())
						continue;
					if (childClass.hasSuperclass()
							&& implementors
									.contains(childClass.getSuperclass()))
						continue;
					
					SootMethod igetter = null;
					if (getter != null) {
						try {
							igetter = childClass.getMethod(getter.getName(), getter.getParameterTypes());
						} catch (RuntimeException e) {/*do not want the exception thrown by getMethod interrupts the gather process*/}
						if (igetter != null) {
							noiseMethods.put(igetter, itdFieldDecl);
						}
					}
					SootMethod isetter = null;
					if (setter != null) {
						try {
							isetter = childClass.getMethod(setter.getName(), setter.getParameterTypes());
						} catch (RuntimeException e) {/*do not want the exception thrown by getMethod interrupts the gather process*/}
						if (isetter != null) {
							noiseMethods.put(isetter, itdFieldDecl);
						}
					}
					SootMethod iinit = null;
					if (init != null) {
						try {
							iinit = childClass.getMethod(init.getName(), init.getParameterTypes());
						} catch (RuntimeException e) {/*do not want the exception thrown by getMethod interrupts the gather process*/}
						if (iinit != null) {
							noiseMethods.put(iinit, itdFieldDecl);
						}
					}
					
					SootField itarget = null;
					if (target != null) {
						try {
							itarget = childClass.getField(target.getName(), target.getType());
						} catch (RuntimeException e) {/*do not want the exception thrown by getField interrupts the gather process*/}
						if (itarget != null) {
							if (isNoise) {
								noiseFields.put(itarget, itdFieldDecl);
							} else {
								targetFields.put(itarget, itdFieldDecl);
							}
						}
					}
				}
			}
//			System.out.println("2. " + noiseMethods);

		}
	}

}
