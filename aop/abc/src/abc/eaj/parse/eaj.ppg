include "../../aspectj/parse/aspectj.ppg"

package abc.eaj.parse;

import abc.eaj.ast.*;
import abc.eaj.types.EAJTypeSystem;

import polyglot.ext.jl.parse.Name;

parser Grm extends abc.aspectj.parse.Grm {:
    public final EAJTypeSystem ts;
    public final EAJNodeFactory nf;

    public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
        super(l, t, n, q);
        ts = (EAJTypeSystem) t;
        nf = (EAJNodeFactory) n;
    }
:};


// ------- new tokens ------------------------------

terminal Token PC_CAST;
terminal Token GLOBAL;

// ------- new non-terminals -----------------------

non terminal GlobalPointcutDecl global_pointcut_decl;




start with goal;

extend basic_pointcut_expr ::=

        PRIVATE:x LPAREN formal_parameter_list_opt:a RPAREN LPAREN pointcut_expr:b RPAREN:y
        {:
            Grm.parserTrace("PRIVATE formal_parameter_list, pointcut_expr");
            RESULT = parser.nf.PCLocalVars(parser.pos(x,y), a, b);
        :}
    |
        PC_CAST:x LPAREN type_pattern_expr:a RPAREN:y
        {:
            Grm.parserTrace("CAST pointcut");
            RESULT = parser.nf.PCCast(parser.pos(x,y), a);
        :}
    ;

extend class_member_declaration ::=
        global_pointcut_decl:a
        {:
            Grm.parserTrace("class_member_declaration is a global_pointcut_decl");
            List l = new TypedList(new LinkedList(), ClassMember.class, false);
            l.add(a);
            RESULT = l;
        :}
    ;

extend interface_member_declaration ::=
        global_pointcut_decl:a
        {:
            Grm.parserTrace("class_member_declaration is a global_pointcut_decl");
            List l = new TypedList(new LinkedList(), ClassMember.class, false);
            l.add(a);
            RESULT = l;
        :}
    ;


global_pointcut_decl ::=
        GLOBAL:x COLON name_pattern:a COLON pointcut_expr:b SEMICOLON:y
        {:
            Grm.parserTrace("PUBLIC type_pattern_expr, pointcut_expr");
            TypeNode voidn = parser.nf.CanonicalTypeNode(parser.pos(x),
                                                        parser.ts.Void());
            String name = UniqueID.newID("global");
            RESULT = parser.nf.GlobalPointcutDecl(parser.pos(x,y),
                                                  a, b, name, voidn);
        :}
    ;
