package abc.tm.weaving.weaver;

import abc.tm.weaving.aspectinfo.*;
import abc.tm.weaving.matching.TMStateMachine;

/**
 * Fills in method stubs for tracematch classes.
 * @author Pavel Avgustinov
 */
public class TraceMatchCodeGen {
    // TODO: Perhaps have a dedicated flag for tracematch codegen
    private static void debug(String message)
    { if (abc.main.Debug.v().aspectCodeGen)
        System.err.println("ACG*** " + message);
    }

    /**
     * Create the classes needed to keep constraints for a given tracematch. Classes are
     * the Constraint set of disjuncts and the disjunct class, plus any helper classes.
     * Could, at some point, specialise the constraints to each FSA state.
     * @param tm The relevant tracematch
     */
    protected void createConstraintClasses(TraceMatch tm) {
        
    }
    
    /**
     * Fills in the method stubs that have been generated for this tracematch.
     * @param tm the tracematch in question
     */
    protected void fillInAdviceBodies(TraceMatch tm) {
        
    }
    
    /**
     * Fills in the method stubs generated by the frontend for a given tracematch.
     * @param tm the tracecmatch to deal with.
     */
    public void fillInTraceMatch(TraceMatch tm) {
        TMStateMachine tmsm = (TMStateMachine)tm.getState_machine();
        // need to pass in the collection of names of declared symbols for some of the FSA
        // transformations.
        tmsm.prepareForMatching(tm.getSymbols());
        
        // Create the constraint class(es). A constraint is represented in DNF as a set of
        // disjuncts, which are conjuncts of positive or negative bindings. For now, we 
        // only create one kind of disjunct class for each tracematch, specialised to have
        // fields for the tracecmatch variables. A potential optimisation is to specialise
        // the disjunct class to each state, as negative bindings needn't be kept for all
        // states in general -- this may/will be done in time.
        createConstraintClasses(tm);
        
        // Fill in the advice bodies. The method stubs have been created by the frontend and
        // can be obtained from the TraceMatch object; code to keep track of changing 
        // constraints and to run the tracematch advice when appropriate, with the necessary
        // bindings, should be added.
        fillInAdviceBodies(tm);
    }
}
