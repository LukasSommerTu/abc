<!DOCTYPE suite SYSTEM "../tests/abcTestSuite.dtd"> 
 <suite> 
 <ajc-test dir="base/test100"
      abccomment="I have put this comment in as a test, and this is a very
         long one over multiple lines too. LJH"
      title="static and non-static before methods -- one file"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test101"
      title="static and non-static before methods -- many files"
      keywords="from-base">
        <compile files="Driver.java,Foo.java,Bar.java,Pos.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test102"
      title="this redirection in non-static before methods" keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test103" title="DEPRECATED: introductions"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test104" title="before constructors -- one file"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test105"
      title="advise weaves find methods typed to builtins or non-woven classes"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test106"
      title="make sure new weaves work inside of packages" keywords="from-base">
        <compile files="Driver.java,pkg/Obj.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test107"
      title="make sure new weaves work inside of packages (again)"
      keywords="from-base">
        <compile
          files="Driver.java,C1.java,C2.java,pack1/Foo.java,pack2/Foo.java,pack3/Foo.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test108"
      title="Inheritance of class and aspect vars in weaves"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test109"
      title="Accessibility of class and aspect members from inside weaves"
      keywords="from-base">
        <compile files="Driver.java,Aspect.java,Foo.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test110"
      title="Packaged aspects referring to packaged classes"
      keywords="from-base">
        <compile files="Driver.java,pAspect/Aspect.java,pClass/Class.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test111"
      title="Inheritance of methods advised by aspects" keywords="from-base">
        <compile
          files="Driver.java,SubClass.java,SuperClass.java,SuperAspect.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test112" title="Inherited weaves on constructor"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test113" title="Initializers in Aspect and Class Bodies"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test114"
      title="Weaver Resolution of method names in method calls passed as args"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test115"
      title="DEPRECATED: Introduce constructor with class inheritance"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test116"
      title="empty and singular patterns on modifiers and throws"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="new" pr="417"
      title="Making sure full names stay on static inner classes"
      keywords="from-java,purejava">
        <compile files="PR417b.java"/>
        <run class="PR417b"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="401"
      title="The current AspectJ compiler cannot parse qualified superclass constructor invocations"
      keywords="from-java">
        <compile files="QualifiedSuperClassConstructorInvocations_PR401.java"/>
        <run class="QualifiedSuperClassConstructorInvocations_PR401"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="421"
      title="More thourough test of static members using full names"
      keywords="from-java">
        <compile
          files="Statics.java,StaticMembers_PR421.java,p1/C1.java,p1/P1Statics.java,p1/subp1/SubC1.java,p1/p2/P1P2Statics.java"/>
        <run class="StaticMembers_PR421"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="421"
      title="More thourough test of static members using imports"
      keywords="from-java">
        <compile
          files="Statics.java,StaticMembersImports_PR421.java,p1/C1.java,p1/P1Statics.java,p1/subp1/SubC1.java,p1/p2/P1P2Statics.java"/>
        <run class="StaticMembersImports_PR421"/>
    </ajc-test>
<ajc-test dir="pureJava/conflictingPackageNames" pr="437"
      title="Looking in class Java for java.lang.String WITH separate compilation"
      keywords="from-java">
        <compile files="Java.java"/>
        <compile files="Main.java"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="pureJava/conflictingPackageNames" pr="437"
      title="Looking in class Java for java.lang.String WITHOUT separate compilation"
      keywords="from-java">
        <compile files="Main.java,Java.java"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="pureJava/conflictingPackageNamesWithPackages" pr="437"
      title="Looking in class Java for java.lang.String WITH separate compilation with packages"
      keywords="from-java">
        <compile files="Java.java"/>
        <compile files="Main.java"/>
        <run class="conflictingPackageNamesWithPackages.Main"/>
    </ajc-test>
<ajc-test dir="pureJava/conflictingPackageNamesWithPackages" pr="437"
      title="Looking in class Java for java.lang.String WITHOUT separate compilation with packages"
      keywords="from-java">
        <compile files="Main.java,Java.java"/>
        <run class="conflictingPackageNamesWithPackages.Main"/>
    </ajc-test>
<ajc-test dir="design/intro"
      title="scope issues with introduction (needs more work)"
      keywords="from-design">
        <compile files="p1/ScopeIssues.java,p1/C1.java"/>
        <run class="p1.ScopeIssues"/>
    </ajc-test>
<ajc-test dir="new" pr="96"
      title="field from implemented interface not found in advice"
      keywords="from-resolved_10x">
        <compile files="FieldFromImplementsNotFound.java"/>
        <run class="FieldFromImplementsNotFound"/>
    </ajc-test>
<ajc-test dir="new" title="new around construct"
      keywords="from-resolved_10x">
        <compile files="AroundAdvice.java"/>
        <run class="AroundAdvice"/>
    </ajc-test>
<ajc-test dir="new" pr="65" title="aspect redefines a parameter"
      keywords="from-resolved_10x">
        <compile files="AspectRedefinesParam.java"/>
        <run class="AspectRedefinesParam"/>
    </ajc-test>
<ajc-test dir="new"
      title="beautiful recursive computation of factorial with around is now supported"
      keywords="from-resolved_10x">
        <compile files="CircularAdvice.java"/>
        <run class="CircularAdvice"/>
    </ajc-test>
<ajc-test dir="new" pr="632"
      title="multi-dispatch not used for named pcd references"
      keywords="from-resolved_10x">
        <compile files="MultiDispatchCf.java">
            <message kind="error" line="54"/>
            <message kind="error" line="57"/>
            <message kind="error" line="60"/>
            <message kind="error" line="71"/>
        </compile>
    </ajc-test>
<ajc-test dir="new"
      title="unrecognized aspect should not net Cloneable and Serializable warnings"
      keywords="from-resolved_10x">
        <compile files="UnrecognizedAspectCE.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="694" title="after returning advice order"
      keywords="from-resolved_10x">
        <compile files="Cricket.java"/>
        <run class="Cricket"/>
    </ajc-test>
<ajc-test dir="new" pr="695"
      title="! and declaring types with callee-side call join points"
      keywords="from-resolved_10x">
        <compile files="NotAndDeclaringTypes.java" options="-Xlint:ignore"/>
        <run class="NotAndDeclaringTypes"/>
    </ajc-test>
<ajc-test dir="new" pr="479"
      title=". Binding the wrong arguments in withincode(..)."
      keywords="from-resolved_10x">
        <compile files="BindingArgumentsInWithincode.java"/>
        <run class="BindingArgumentsInWithincode"/>
    </ajc-test>
<ajc-test dir="new" pr="479"
      title=". Matching arguments in cflow correctly."
      keywords="from-resolved_10x">
        <compile files="MatchingArgumentsInCflow.java"/>
        <run class="MatchingArgumentsInCflow"/>
    </ajc-test>
<ajc-test dir="new" pr="480"
      title=". Binding variables with numbers in their name with pertarget(..)'s."
      keywords="from-resolved_10x">
        <compile files="PerTargetAndVariablesWithNumbersInTheirNames.java"/>
        <run class="PerTargetAndVariablesWithNumbersInTheirNames"/>
    </ajc-test>
<ajc-test dir="new" pr="554"
      title="second arg in formal on shared joinpoint with pcd if() causes verify error ??"
      keywords="from-resolved_10rc3">
        <compile files="PR554.java"/>
        <run class="PR554"/>
    </ajc-test>
<ajc-test dir="new/packageAccessPR556" pr="556"
      title="aspects should get package access outside the file"
      keywords="from-resolved_10rc3">
        <compile files="base1/p/C1.java,base2/p/C2.java"/>
        <run class="p.C1"/>
    </ajc-test>
<ajc-test dir="new" pr="573"
      title="pertarget stack overflow getting name of anonymous (Object) class"
      keywords="from-resolved_10rc3">
        <compile files="PR573_1.java"/>
        <run class="PR573_1"/>
    </ajc-test>
<ajc-test dir="new" pr="573"
      title="pertarget runtime stack overflow (getting name of anonymous (Object) class?)"
      keywords="from-resolved_10rc3">
        <compile files="PR573_2.java"/>
        <run class="PR573_2"/>
    </ajc-test>
<ajc-test dir="new"
      title="PR584 Can construct inner classes using qualified expressions"
      keywords="from-resolved_10rc3,purejava">
        <compile files="PR584.java"/>
        <run class="PR584"/>
    </ajc-test>
<ajc-test dir="new" pr="685"
      title="subaspect method declaration on superaspect inner interface (names)"
      keywords="from-resolved_104">
        <compile files="InnerInterfaceNames.java"/>
        <run class="InnerInterfaceNames"/>
    </ajc-test>
<ajc-test dir="new" pr="685"
      title="subaspect method declaration on superaspect inner interface (access)"
      keywords="from-resolved_104">
        <compile files="InnerInterfaceAccess.java"/>
        <run class="InnerInterfaceAccess"/>
    </ajc-test>
<ajc-test dir="new" pr="685"
      title="subaspect method declaration on superaspect inner interface (types)"
      keywords="from-resolved_104">
        <compile files="InnerInterfaceTypes.java,InnerInterfaceTypesHelper.java"/>
        <run class="InnerInterfaceTypes"/>
    </ajc-test>
<ajc-test dir="new/PR569" pr="569"
      title="anon class written to wrong directory" 
   keywords="from-resolved_104,from-resolved_104">
        <compile files="a/IntroAnon.java,a/MyInterface.java,b/Dest.java"/>
        <run class="a.IntroAnon"/>
    </ajc-test>
<ajc-test dir="new" pr="603"
      title="unqualified transitive pointcut references not resolved"
      keywords="from-resolved_104">
        <compile files="PointcutQualification.java"/>
        <run class="PointcutQualification"/>
    </ajc-test>
<ajc-test dir="new" pr="603"
      title="unqualified transitive pointcut references not resolved - 2"
      keywords="from-resolved_104">
        <compile files="PointcutQualification2.java"/>
        <run class="PointcutQualification2"/>
    </ajc-test>
<ajc-test dir="new" pr="619"
      title="direct use outside aspect of defined abstract pointcut"
      keywords="from-resolved_104">
        <compile files="AbstractPointcutAccess.java"/>
        <run class="AbstractPointcutAccess"/>
    </ajc-test>
<ajc-test dir="new" pr="658"
      title="simple call join point tests for JoinPoint SourceLocation context"
      keywords="from-resolved_104">
        <compile files="SourceLocationCall.java"/>
        <run class="SourceLocationCall"/>
    </ajc-test>
<ajc-test dir="new" pr="661"
      title="!target with second advice on casted call"
      keywords="from-resolved_104">
        <compile files="CallNotTarget.java"/>
        <run class="CallNotTarget"/>
    </ajc-test>
<ajc-test dir="new" pr="715" title="incrementing objects, arrays"
      keywords="from-resolved_104,purejava">
        <compile files="ArrayInc.java"/>
        <run class="ArrayInc"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="737"
      title="no circularity errors simply because of inners (1)"
      keywords="from-resolved_105,purejava">
        <compile files="circle/Test1CP.java"/>
        <run class="circle.Test1CP"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="737"
      title="no circularity errors simply because of inners (2)"
      keywords="from-resolved_105,purejava">
        <compile files="circle/Test2CP.java"/>
        <run class="circle.Test2CP"/>
    </ajc-test>
<ajc-test dir="new/pr728" pr="728" title="file order in type searching"
      keywords="from-resolved_105">
        <compile files="AnotherClass.java,Interface.java"/>
        <run class="AnotherClass"/>
    </ajc-test>
<ajc-test dir="pureJava" title="try requires block JLS 14.19"
      keywords="from-resolved_105,purejava,messages-vary">
        <compile files="TryBlockRequiredCE.java"
               options="!eclipse">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" pr="739"
      title="final local variables may be accessed from inner class"
      keywords="from-resolved_105,purejava">
        <compile files="LocalsFromInnerCP.java"/>
        <run class="LocalsFromInnerCP"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="723" title="missing package identifier"
      keywords="from-resolved_105,purejava">
        <compile files="MissingPackageCE.java">
            <message kind="error" line="2"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" title="simple declare warning (NPE)"
      keywords="from-resolved_105">
        <compile files="DeclareWarningMain.java">
            <message kind="warning" line="5"/>
        </compile>
        <run class="DeclareWarningMain"/>
    </ajc-test>
<ajc-test dir="new"
      title="initializer can throw so long as all constructors declare so"
      keywords="from-resolved_105,purejava">
        <compile files="InitializerWithThrow.java"/>
        <run class="InitializerWithThrow"/>
    </ajc-test>
<ajc-test dir="new" pr="755"
      title="ajc dies on cflow into field init anon class see knownbugs.txt"
      keywords="from-resolved_105">
        <compile files="CflowOfFieldInitAnonMethods.java" options="!eclipse">
        </compile>
        <run class="CflowOfFieldInitAnonMethods" options="!eclipse"/>
    </ajc-test>
<ajc-test dir="new" pr="771" title="static initializer member name"
      keywords="from-resolved_105">
        <compile files="StaticInitName.java"/>
        <run class="StaticInitName"/>
    </ajc-test>
<ajc-test dir="new" pr="764"
      title="testing and binding args with single indeterminate prefix and suffix"
      keywords="from-resolved_105">
        <compile files="IndeterminateArg.java"/>
        <run class="IndeterminateArg"/>
    </ajc-test>
<ajc-test dir="pureJava"
      title="Locals inside other locals, ordering of processing [eh]"
      abccomment="Verify error in abc and j2j (when --app used).
                  Reported to Jennifer, July 1/04 LJH, Fixed July 2/04"
      keywords="from-resolved_105">
        <compile files="LocalInners2.java"/>
        <run class="LocalInners2"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="752"
      title="subclass access to enclosing super class private members"
      keywords="from-resolved_105,purejava,fail-unimplemented">
        <compile files="SubclassAccessToEnclosingSuperClassPrivate.java"/>
        <run class="SubclassAccessToEnclosingSuperClassPrivate"/>
    </ajc-test>
<ajc-test dir="new"
      title="method-local class defined in around return statement"
      keywords="from-resolved_105">
        <compile files="MethodLocalAroundReturns.java"/>
        <run class="MethodLocalAroundReturns"/>
    </ajc-test>
<ajc-test dir="new" title="advising field get/sets when accessing via super"
      keywords="from-resolved_105">
        <compile files="SuperField.java"/>
        <run class="SuperField"/>
    </ajc-test>
<ajc-test dir="new" title="accessing private members in outer types"
      keywords="from-resolved_105">
        <compile files="FieldInnerAccess.java"/>
        <run class="FieldInnerAccess"/>
    </ajc-test>
<ajc-test dir="pureJava" title="various tests of switch bounds"
      keywords="from-resolved_106,purejava">
        <compile files="SwitchBounds.java"/>
        <run class="SwitchBounds"/>
    </ajc-test>
<ajc-test dir="new" pr="601"
      title="VerifyError if nested sync returning result"
      comment="XXX inconsistent behavior?"
      keywords="from-resolved_10final,purejava">
        <compile files="NestedSyncWithResult.java"/>
        <run class="NestedSyncWithResult"/>
    </ajc-test>
<ajc-test dir="new" pr="853"
      title="declare interface implements class">
        <compile files="DeclareInterfaceImplementsClass.java">
           <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="assert flow - 2"
      keywords="from-14tests,purejava">
        <compile options="-source,1.4" files="AssertsCF2.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="assert typing"
      keywords="from-14tests,purejava,fail-publicType">
        <compile options="-source,1.4" files="AssertsCF1.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="asserts" keywords="from-14tests">
        <compile options="-source,1.4" files="Asserts.java"/>
        <run class="Asserts" vm="1.4"/>
    </ajc-test>
<ajc-test dir="base/test131"
      title="various forms of package name pattern matching work"
      keywords="from-broken14usejavac">
        <compile files="Driver.java,p1/C1.java,p1/p2/C2.java" />
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="new" pr="829"
      title="CE expected when declaring fields on arrays" keywords="tofix">
        <compile files="ArrayFieldDeclarationCE.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" pr="866"
      title="non-constant static final fields marked as final in .class">
        <compile files="FinalStaticField.java"/>
        <run class="FinalStaticField"/>
    </ajc-test>
<ajc-test dir="new" pr="883"
      title="signature of handler join point">
        <compile files="HandlerSignature.java"/>
        <run class="HandlerSignature"/>
    </ajc-test>
<ajc-test dir="new" pr="885"
      title="source locations within expressions">
        <compile files="SourceLocationWithinExpr.java"/>
        <run class="SourceLocationWithinExpr"/>
    </ajc-test>
<ajc-test dir="new" pr="889"
      title="after returning advice on interface constructor - error">
        <compile files="AfterReturningInterfaceConstructorCE.java">
        	<message kind="error" line="26"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="900"
      title="after advice on static call join point">
        <compile files="AfterStaticCall.java"/>
        <run class="AfterStaticCall"/>
    </ajc-test>
<ajc-test dir="bugs" pr="901"
      title="incompatible class change error"
      comment="XXX Jim and Erik found/fixed this - need basis">
        <compile files="IncompatibleClassChangeErrorBug.java"/>
        <run class="IncompatibleClassChangeErrorBug"/>
    </ajc-test>
<ajc-test dir="bugs" pr="903"
      title="simple cflow of method execution">
        <compile files="ExecutionCflow.java"/>
        <run class="ExecutionCflow"/>
    </ajc-test>
<ajc-test dir="bugs" pr="909"
      title="using instance as class reference to constant field"
      comment="XXX need to verify run">
        <compile files="InstanceAsClassRefToConstant.java"/>
    </ajc-test>
<ajc-test dir="options/deprecated" 
      title="options -warn:deprecation not enabled">
        <compile files="WarnDeprecated.java,OldStuff.java"
        	options="!eclipse">
        </compile>
    </ajc-test>
<ajc-test dir="options" 
      title="options declare field on bad type">
        <compile files="XLintTypeDeclareField.java" options="!eclipse">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="options" 
      title="options declare method on bad type">
        <compile files="XLintTypeDeclareMethod.java" options="!eclipse">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="options" 
      title="options negative -Xlint declare parent" 
      keywords="lint">
        <compile files="XLintTypeDeclareParent.java" options="-Xlint:ignore"/>
    </ajc-test>
<ajc-test dir="options/injars/simple" 
      title="source for options -injars">
        <compile files="Simple.java,Main.java"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="new/options11" 
      comment="XXX not validated correct yet"
      title="testing new options">
        <compile files="Main.java,injar.jar,Aspect.java" 
            aspectpath="aspectlib1.jar,aspectlib2.jar"/>
        
    </ajc-test>
<ajc-test dir="new" pr="774"
      title="interface self-reference in anonymous instance">
        <compile files="AnonymousSelfReference.java"/>
        <run class="AnonymousSelfReference"/>
    </ajc-test>
<ajc-test dir="new"
      title="subtype pattern in dominates will conflict with type pattern">
        <compile files="DominatesTypePatternCE.java">
        	<message kind="error" line="15"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="832"
      title="after throwing advice with non-throwable formal">
        <compile files="AfterThrowingNonThrowable.java">
            <message kind="error" line="41"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="853"
      title="declare interface implements interface">
        <compile files="DeclareInterfaceImplementsInterface.java">
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="28702" title="percflow code hangs compiler">
        <compile files="CloseConnectionsCflow.java">
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="28703" title="assert and pertarget crashes compiler">
        <compile files="EnsureOverriding.java" options="-source,1.4"/>
        <run class="EnsureOverriding" vm="1.4"/>
    </ajc-test>
<ajc-test dir="bugs" pr="28852"
      title="Verification error tracing constructor that takes arguments">
        <compile files="ConstructorArgTracing.java"/>
        <run class="ConstructorArgTracing"/>
    </ajc-test>
<ajc-test dir="bugs" pr="29106" title="declared exceptions in inter-type decls">
        <compile files="ExceptionsOnInters.java"/>
        <run class="ExceptionsOnInters"/>
    </ajc-test>
<ajc-test dir="new/PR852" pr="852"
      title="declaring method on superclass and subclass">
        <compile files="aspectPack/Aspect.java,target/SubClass.java,target/SuperClass.java">
          <dir-changes added="target.SubClass,target.SuperClass"/>
        </compile>
        <run class="aspectPack.Aspect"/>
    </ajc-test>
<ajc-test dir="new/finalfield" pr="28974"
      title="introducing final fields (simple)">
        <compile files="Introducer.java,Receiver.java,User1.java"/>
        <run class="User1"/>
    </ajc-test>
<ajc-test dir="new/finalfield" pr="28974"
      title="introducing final fields and using as constants">
        <compile files="Introducer.java,Receiver.java,User2.java"/>
        <run class="User2"/>
    </ajc-test>
<ajc-test dir="new/finalfield" pr="28974"
      title="introducing final fields and checking errors">
        <compile files="Introducer.java,Receiver.java,UserCf.java">
            <message kind="error" line="6"/>        
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="29691"
    		title="Static inner aspects cannot reference user defined pointcuts">
        <compile files="PcdLookup.java" />
        <run class="PcdLookup"/>
    </ajc-test>
<ajc-test dir="bugs" pr="29691"
    		title="Static inner aspects cannot reference user defined pointcuts">
        <compile files="SoftWithin.java" />
        <run class="SoftWithin"/>
    </ajc-test>
<ajc-test dir="bugs" pr="29689"
    		title="Declare precedence should not allow multiple * patterns">
        <compile files="CircularPrecedence.java">
            <message kind="error" line="14"/> 
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="804"
      title="aspect static initializers should run before instance constructed"
      keywords="tofix">
        <compile files="AspectStaticInit.java"/>
        <run class="AspectStaticInit"/>
    </ajc-test>
<ajc-test dir="bugs/crashes" pr="30168" 
    		title="Error with certain combination of advice">
        <compile files="test/Test3.java"/>
        <run class="test.Test3"/>
    </ajc-test>
<ajc-test dir="bugs" pr="31423" 
    		title="Pointcut adviceexecution() does not work">
        <compile files="AdviceExec.java"/>
        <run class="AdviceExec"/>
    </ajc-test>
<ajc-test dir="bugs" pr="32463" 
    		title="ajc reports error when encountering static declaration of nested classes">
        <compile files="WeaveLocal.java"/>
        <run class="WeaveLocal"/>
    </ajc-test>
<ajc-test dir="bugs" pr="32428" 
    		title="can't use pointcuts defined in inner aspects ">
        <compile files="InnerPointcut.java"/>
        <run class="InnerPointcut"/>
    </ajc-test>
<ajc-test dir="bugs" pr="34210" 
    		title="thisJoinPoint.getArgs() causes IncompatibleClassChangeError">
        <compile files="ThisJoinPointAndVerifier.java"/>
        <run class="ThisJoinPointAndVerifier"/>
    </ajc-test>
<ajc-test dir="errors"  keywords="error"
    		title="inter-type declaration of void field">
        <compile files="VoidFieldDeclarationCE.java">
			<message kind="error" line="7"/>
        </compile>
    </ajc-test>
<ajc-test dir="binding"
      title="no such constructor for proceed argument (error)">
        <compile files="UnfoundConstructor.java">
        	<message kind="error" line="25"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"  
    		title="type not imported in around advice">
        <compile files="TypeNotImportedInAroundCE.java">
        	<message kind="error" line="10"/>
        </compile>
	</ajc-test>
<ajc-test dir="errors"  
    		title="type not imported in aspect">
        <compile files="TypeInAspectNotImportedCE.java">
        	<message kind="error" line="6"/>
        </compile>
	</ajc-test>
<ajc-test dir="bugs/interInherit" pr="35725"
      title="Inter type declaration to base class not seen by derived class">
        <compile files="a_impl/AImpl.java,a_impl/Af.java,a_intf/A.java,b_impl/BImpl.java,b_intf/B.java"/>
        <run class="b_impl.BImpl"/>
    </ajc-test>
<ajc-test dir="new" pr="36736"
      title="implemented abstract pointcut">
        <compile files="AbstractImplementedPointcut.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="29665"
      title="Inconsistant stack height with around">
        <compile files="StackError.java"/>
        <run class="StackError"/>
    </ajc-test>
<ajc-test dir="new" pr="36778"
      title="advise join points in subclass of empty interface">
        <compile files="EmptyInterface.java"/>
        <run class="EmptyInterface"/>
    </ajc-test>
<ajc-test dir="bugs" title="lame error message: negation doesn't allow binding"
      pr="30663">
        <compile files="BadBindingError.java">
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs/interSpecials" pr="36936"
      title="Error when introducing members of type Class">
        <compile files="Trg.java,Asp.java"/>
        <run class="Trg"/>
    </ajc-test>
<ajc-test dir="new"
      comment="this is a pureJava test, but we always want to run it"
      title="arrays via Class.forName()">
        <compile files="ClassForName.java"/>
        <run class="ClassForName"/>
    </ajc-test>
<ajc-test dir="bugs" pr="37325"  
      title="Weaver fails with NPE for very large source files ">
        <compile files="LongFile.java"/>
        <run class="LongFile"/>
    </ajc-test>
<ajc-test dir="harness" keywords="command-line-error"
      title="CLE: no sources">
        <compile badInput="true">
            <message kind="error" text="no sources"/>
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>
<ajc-test dir="harness" 
    	keywords="command-line-error,knownLimitation-ajctaskCompiler,knownLimitation-ajdeCompiler"
    	comment="ajde omits usage"
      title="CLE: bad filename">
        <compile  badInput="true" files="NoSuchFile.java">
            <message kind="error" text="NoSuchFile.java"/>
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="37304"
   	 title="public static fields being ignored">
        <compile files="FinalFields.java"/>
        <run class="FinalFields"/>
    </ajc-test>
<ajc-test dir="harness" 
        title="XLint:ignore suppresses XLint warnings">
        <compile files="XLintWarningTest.java" options="-Xlint:ignore"/>
    </ajc-test>
<ajc-test dir="new/binaryWarnings/src" pr="37020" keywords="knownLimitation"
   	 title="declare warnings on main - constructor execution">
        <compile files="aspects/ConstructorExecutionWarning.java,app/Main.java">
        	<message kind="warning" file="app/Main.java"
        	  line="23" text="execution(Main.new())"/>
        </compile>
        <run class="app.Main"/>
    </ajc-test>
<ajc-test dir="harness" pr="38134" keywords="knownLimitation"
   		comment="behavior is correct for 1.1 - revisit for 1.2"
        title="-nowarn suppresses XLint warnings">
        <compile files="XLintWarningTest.java" options="-nowarn"/>
    </ajc-test>
<ajc-test dir="harness" pr="38134" keywords="knownLimitation"
   		comment="behavior is correct for 1.1 - revisit for 1.2"
        title="warn:none suppresses XLint warnings">
        <compile files="XLintWarningTest.java" options="-warn:none"/>
    </ajc-test>
<ajc-test dir="bugs" pr="38345"
   	 title="try switch VerifyError, InconsistentStackHeight">
        <compile files="TrySwitch.java"/>
        <run class="TrySwitch"/>
    </ajc-test>
<ajc-test dir="bugs" pr="39460"
   	 title="Missing import crashes compiler">
        <compile files="MissingImport.java">
            <message kind="error" line="13"/>       
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="40109"
   	 title="switch statement in aspects crashes weaving">
        <compile files="SwitchInAround.java"/>
        <run class="SwitchInAround"/>
    </ajc-test>
<ajc-test dir="bugs"
   	 title="using super in method introduced on interface with multiple supertypes">
        <compile files="MultipleSuperCf.java">
        	<message kind="error" line="14"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs"
		pr="40876"
		title="subtype-qualified pointcut reference">
		<compile files="PointcutLibraryTest.java"/>
		<run class="PointcutLibraryTest"/>
	</ajc-test>
<ajc-test dir="bugs"
		pr="40805" 
		title="interface call signatures when declaring method in aspect">
		<compile files="DeclareWarningAndInterfaceMethodCW.java">
			<message kind="warning" line="27" text="call getSomething"/>
			<message kind="warning" line="27" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="31" text="call getSomething"/>
			<message kind="warning" line="31" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="33" text="call getSomething"/>
			<message kind="warning" line="33" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="35" text="call getSomething"/>
			<message kind="warning" line="35" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="38" text="call getSomething"/>
			<message kind="warning" line="38" text="call ICanGetSomething.getSomething"/>
		</compile>
	</ajc-test>
<ajc-test dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - baseline">
		<compile files="lib/LibraryInterface.java,
						Client.java,
						LibraryAspect.java"/>
		<run class="Client"/>
		</ajc-test>
<ajc-test dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnly.jar,aspectOnly.jar"
		comment="weaving required for implementations of interface? 
		         XXX Would prefer to support javac compiles of Client here, mimicked with classpath only"
		>
		<compile 
			files="Client.java" 
			classpath="aspectedInterfaceOnly.jar,aspectOnly.jar">
			<message kind="error" line="9"/>
			</compile>
		</ajc-test>
<ajc-test dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnlyBinary.jar,aspectOnly.jar"
		comment="works if aspect is only on the classpath?, i.e., no weaving XXX need javac run"
		>
		<compile 
			files="Client.java" 
			classpath="aspectedInterfaceOnlyBinary.jar,aspectOnly.jar">
			<message kind="error" line="9"/>
			</compile>
		</ajc-test>
<ajc-test 
		dir="bugs/interfaceLibrary"
		title="exception clause for aspect-declared interface methods - positive">
		<compile files="Client.java,LibraryAspect.java,lib/LibraryInterface.java"/>
		<run class="Client"/>
		</ajc-test>
<ajc-test 
		dir="bugs/interfaceLibrary"
		title="exception clause for aspect-declared interface methods - negative">
		<compile files="ClientCE.java,LibraryAspect.java,lib/LibraryInterface.java">
			<message kind="error" file="ClientCE.java" line="5"/>
			</compile>
		</ajc-test>
<ajc-test 
		dir="bugs/interfaceLibrary"
		title="exception clause for aspect-declared class methods - negative">
		<compile files="ClassClientCE.java,LibraryClassAspect.java,lib/LibraryClass.java">
			<message kind="error" file="ClassClientCE.java" line="5"/>
			</compile>
		</ajc-test>
<ajc-test dir="bugs/moreInterfaceLibrary"
		pr="41123"
		title="Weaving failure when using injars (no jars)">
		<compile
			files="lib/ExecutionMonitor.aj,model/BusObj.java,model/MonitorBusObj.java">
		</compile>
	</ajc-test>
<ajc-test dir="bugs/moreInterfaceLibrary"
		pr="41123"
		title="Weaving failure when using injars (on aspectpath)">
		<compile
			files="model/BusObj.java,model/MonitorBusObj.java"
			aspectpath="lib.jar">
		</compile>
	</ajc-test>
<ajc-test dir="bugs" pr="42652"
   	 title="perthis and signature bad interaction">
        <compile files="InterPerCall.java"/>
        <run class="InterPerCall"/>
    </ajc-test>
<ajc-test dir="bugs" pr="43194"
   	 title="Non-functional concretezation of ReferencePointcut">
        <compile files="AdviceInteraction.java"/>
        <run class="AdviceInteraction"/>
    </ajc-test>
<ajc-test dir="bugs/jpOptimization" 
    	pr="45441"
    	title="JoinPoint Optimization when targetting 1.4">
        <compile 
        	files="de/test/MyMain.java,
        		   de/test/MyAspect.java"
            options="-1.4"/>
        <run class="de.test.MyMain"/>
    </ajc-test>
<ajc-test dir="bugs/extdirs" 
		pr="42574"
		title="zip and jar suffixes for extdirs entries">
		<compile files="extdirs-src/main/Main.java"
			extdirs="lib/lowercase"/>
	</ajc-test>
<ajc-test dir="bugs" pr="49250"
      title="alias getCause for getWrappedThrowable in SoftException">
        <compile files="GetCauseOnSoftException.java" options="-Xlint:warning">
        </compile>
        <run vm="1.3" class="GetCauseOnSoftException"/>
    </ajc-test>
<ajc-test dir="bugs"
		title="XLint warning for call PCD's using subtype of defining type (-1.3 -Xlint:ignore)"
		pr="41952"
		>
		<compile
			options="-Xlint:ignore,-1.3" 
			files="DeclaringTypeWarning.java" >
		</compile>
	</ajc-test>
<ajc-test dir="bugs" pr="46750" title="inner aspect containing declare soft">
       <compile files="TestSoftening.java">
       </compile>
    </ajc-test>
<ajc-test dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on interface not implemented by subtype (weave altogether)">
        <compile files="interface/C.java,interface/A.java,interface/B.java" />
        <run class="C"/>
    </ajc-test>
<ajc-test dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on abstract class not implemented by subtype (single source file)">
        <compile files="singlesource/C.java">
        	<message kind="error" line="9"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on abstract class with introduced concrete method (single source file)">
        <compile files="singlesource/C1.java"/>
        <run class="C1"/>
    </ajc-test>
<ajc-test dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on abstract class with existing concrete method (single source file)">
        <compile files="singlesource/C2.java"/>
        <run class="C2"/>
    </ajc-test>
<ajc-test dir="bugs/interAbstract" 
		pr="49784"
		comment="working in 1.1.1 - keep with others?"
		title="aspect declares interface method (public abstract)">
        <compile files="InterfaceMethodDeclarationFull.java" />
        <run class="InterfaceMethodDeclarationFull"/>
    </ajc-test>
<ajc-test dir="bugs/interfaceDefinition" 
    	pr="43972"
    	title="Use class implementing interface via aspect (weave all together)">
        <compile 
        	files="pack/DefineInterface.java,
        		   pack/InterfaceDefinition.java,
        		   pack/MyInterface.java,
        		   Main.java"/>
        <run class="pack.InterfaceDefinition"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="bugs" pr="44587"
      title="Erroneous exception conversion">
        <compile files="ErroneousExceptionConversion.java">
        </compile>
        <run class="ErroneousExceptionConversion"/>
    </ajc-test>
<ajc-test dir="bugs" pr="34206"
      title="before():execution(new(..)) does not throw NoAspectBoundException">
        <compile files="ErroneousExceptionConversion1.java">
        </compile>
        <run class="ErroneousExceptionConversion1"/>
    </ajc-test>
<ajc-test dir="bugs" pr="50570"
      title="CatchClauseSignature has broken operation">
        <compile files="HandlerSig.java"/>
        <run class="HandlerSig"/>
    </ajc-test>
<ajc-test dir="new" pr="42668"
   	 title="after returning with parameter: matching rules">
        <compile files="AfterReturningParamMatching.java" />
        <run class="AfterReturningParamMatching"/>
    </ajc-test>
</suite> 
