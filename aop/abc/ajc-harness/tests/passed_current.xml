<!DOCTYPE suite SYSTEM "../tests/ajcTestSuite.dtd"> 
 <suite> 
     <ajc-test dir="base/test106"
      title="make sure new weaves work inside of packages" keywords="from-base">
        <compile files="Driver.java,pkg/Obj.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="base/test107"
      title="make sure new weaves work inside of packages (again)"
      keywords="from-base">
        <compile
          files="Driver.java,C1.java,C2.java,pack1/Foo.java,pack2/Foo.java,pack3/Foo.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="base/test120" title="unicodes and literals"
      keywords="from-base,purejava">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="base/test126" title="For Statement"
      keywords="from-base,purejava">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="base/test127"
      title="advice uses its own formals to get actuals" keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="base/test128"
      title="DEPRECATED:  introduce weaves can use this" keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="base/test130"
      title="multiple arounds successfully intercept and return own values"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="base/test133"
      title="correct super call lookup for method().name()"
      keywords="from-base,purejava">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="base/test137"
      title="operations on private and protected aspect members (++, -- in partciular)"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="base/test138" title="only register things once"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="base" pr="384"
      title="allow one argument calls even when there's a comma in the arglist"
      keywords="from-base">
        <compile files="OneArgCallsIsOkay.java"/>
        <run class="OneArgCallsIsOkay"/>
    </ajc-test>
    <ajc-test dir="new"
      title="advice on calls to static methods even works when called on super"
      keywords="from-base">
        <compile files="SuperStaticCallJoinPoint.java"/>
        <run class="SuperStaticCallJoinPoint"/>
    </ajc-test>
    <ajc-test dir="new" pr="99"
      title="combined logic expression (handling coericions vs. parens)"
      keywords="from-java,purejava">
        <compile files="CombinedLogic.java"/>
        <run class="CombinedLogic"/>
    </ajc-test>
    <ajc-test dir="new" pr="108" title="multi-dimensional array initializers"
      keywords="from-java,purejava">
        <compile files="MultiArrays.java"/>
        <run class="MultiArrays"/>
    </ajc-test>
    <ajc-test dir="new" pr="125"
      title="probelm with the generated names of exceptions"
      keywords="from-java,purejava">
        <compile files="ExceptionNames.java"/>
        <run class="ExceptionNames"/>
    </ajc-test>
    <ajc-test dir="new/volatileKeyword" pr="151"
      title="advice on a static method" keywords="from-java">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="new/paramWidening" pr="195"
      title="widening of method parameters to match javac" keywords="from-java">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="pureJava/equalsMethOnStr" pr="214"
      title="equals method on quoted strings" keywords="from-java">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="new" pr="313"
      title="parenthesized string literals matching primitive type names"
      keywords="from-java">
        <compile files="ParenPrimitive.java"/>
        <run class="ParenPrimitive"/>
    </ajc-test>
    <ajc-test dir="new" title="simple type coercions tests" keywords="from-java">
        <compile files="TypeCoercions.java"/>
        <run class="TypeCoercions"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="parsing of parenthesized 'this' (in returns)" keywords="from-java">
        <compile files="ReturnThis.java"/>
        <run class="ReturnThis"/>
    </ajc-test>
    <ajc-test dir="new" title="Scanner non recognizing strictfp."
      keywords="from-java">
        <compile files="StrictFp.java"/>
        <run class="StrictFp"/>
    </ajc-test>
    <ajc-test dir="pureJava" title="Cast binds tighter than equality tests"
      keywords="from-java">
        <compile files="CastAndBinary.java"/>
        <run class="CastAndBinary"/>
    </ajc-test>
    <ajc-test dir="pureJava" title="Boundary base values can be parsed"
      keywords="from-java">
        <compile files="BoundaryNums.java"/>
        <run class="BoundaryNums"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="?: expressions should typecheck in interesting ways"
      keywords="from-java">
        <compile files="TriTestTypecheck.java"/>
        <run class="TriTestTypecheck"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="cast expressions should allow casts to/from interfaces at compile-time."
      keywords="from-java">
        <compile files="InterfaceCast.java"/>
        <run class="InterfaceCast"/>
    </ajc-test>
    <ajc-test dir="new"
      title="Doesn't parse an array-returning method that throws an exception"
      keywords="from-java,purejava">
        <compile files="ArrayMethod.java"/>
        <run class="ArrayMethod"/>
    </ajc-test>
    <ajc-test dir="new"
      title="Crashes when a lot of zeros are in front of a double variable [!!! purejava]"
      keywords="from-java">
        <compile files="Zeros.java"/>
        <run class="Zeros"/>
    </ajc-test>
    <ajc-test dir="pureJava" title="Various comment syntaxes should be handled."
      keywords="from-java">
        <compile files="CommentSyntax.java"/>
        <run class="CommentSyntax"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="remember to cast folded values down to the proper types."
      keywords="from-java">
        <compile files="CastingFoldedValues.java"/>
        <run class="CastingFoldedValues"/>
    </ajc-test>
    <ajc-test dir="pureJava" title="Lifting locals in switch statements."
      keywords="from-java">
        <compile files="SwitchStmtLocals.java"/>
        <run class="SwitchStmtLocals"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Not recognizing the chars '\0', '\1', '\2', '\3', '\4', '\5', '\6', '\7'"
      keywords="from-java">
        <compile files="Chars.java"/>
        <run class="Chars"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Test chars '\0', '\1', '\2', '\3', '\4', '\5', '\6', '\7' with a case statement"
      keywords="from-java">
        <compile files="CaseClauses.java"/>
        <run class="CaseClauses"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Not recognizing the octal chars '\0', '\1', '\2', '\3', '\4', '\5', '\6', '\7'"
      keywords="from-java">
        <compile files="OctalChars.java"/>
        <run class="OctalChars"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Members with the same name as their package cause confusion with fully-qualified names."
      keywords="from-java">
        <compile files="samenames/Main.java,samenames/Other.java"/>
        <run class="samenames.Main"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Not lifting types correctly with bytes and shorts with ternary ops"
      keywords="from-java">
        <compile files="TernaryPrimitiveOps.java"/>
        <run class="TernaryPrimitiveOps"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Resolving extended classes with array parameters"
      keywords="from-java">
        <compile files="ResolvingArrayParameters.java"/>
        <run class="ResolvingArrayParameters"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Assignments as second arguments in ternary operators."
      keywords="from-java">
        <compile files="TernaryAssignments.java"/>
        <run class="TernaryAssignments"/>
    </ajc-test>
    <ajc-test dir="pureJava" title="confusions of casts and parens"
      keywords="from-java">
        <compile files="CastVsParen.java"/>
        <run class="CastVsParen"/>
    </ajc-test>
    <ajc-test dir="pureJava" title="return;;; is not really legal"
      keywords="from-java,purejava">
        <compile files="ReachableEmpty.java">
            <message kind="error" line="5"/>
            <message kind="error" line="9"/>
            <message kind="error" line="13"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new"
      title="ajc treating Throwable as checked, issuing error if not found"
      keywords="from-java,purejava">
        <compile files="FalseThrowsCE.java"/>
        <run class="FalseThrowsCE"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="breaking out of a labeled block inside of an if"
      keywords="from-java">
        <compile files="Breaks.java"/>
        <run class="Breaks"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="abstractifying a method and getting it back through super"
      keywords="from-java">
        <compile files="Abstracts.java"/>
        <run class="Abstracts"/>
    </ajc-test>
    <ajc-test dir="new" pr="328"
      title="package protected classes becoming public"
      keywords="from-java,purejava">
        <compile files="PR328.java"/>
        <run class="PR328"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Returning primitive values matching method return type (minimal)"
      keywords="from-java">
        <compile files="ReturnTypes.java"/>
        <run class="ReturnTypes"/>
    </ajc-test>
    <ajc-test dir="pureJava" title="Flow analysis and if(true)"
      keywords="from-java">
        <compile files="Flow.java"/>
        <run class="Flow"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Implicit this for new inner instance must be avaliable"
      keywords="from-java">
        <compile files="ImplicitThisMissing.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new"
      title="NullPointerException (not compiler error) when extending non-static inner class"
      keywords="from-java,purejava">
        <compile files="ExtendInnerCE.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new"
      title="compiler flags final static variable as indefinite in member assignment."
      keywords="from-java,purejava">
        <compile files="DefiniteStatic.java"/>
        <run class="DefiniteStatic"/>
    </ajc-test>
    <ajc-test dir="new"
      title="confirm no IOException on windows if nul used as identifier"
      keywords="from-java,purejava">
        <compile files="NulIOException2.java"/>
        <run class="NulIOException2"/>
    </ajc-test>
    <ajc-test dir="pureJava" title="Parenthesized true and false don't parse"
      keywords="from-java">
        <compile files="ParenKeywords.java"/>
        <run class="ParenKeywords"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Constant values should be stored with the correct type of their fields"
      keywords="from-java">
        <compile files="ConstantValueConversion.java"/>
        <run class="ConstantValueConversion"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Local variables in initializers should not be treated as blank final fields"
      keywords="from-java">
        <compile files="LocalInitializerVariableNotBlank.java"/>
        <run class="LocalInitializerVariableNotBlank"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Binops aren't allowed as update stmts in for loops"
      keywords="from-java">
        <compile files="NonStmtInFor.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Can't avoid doing division in case of div by zero"
      keywords="from-java">
        <compile files="DivOpMustHappen.java"/>
        <run class="DivOpMustHappen"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Testing frames w/greater than FF locals and 7F incs (i.e., WIDE instruction)"
      keywords="from-java">
        <compile files="BigFrameTest.java"/>
        <run class="BigFrameTest"/>
    </ajc-test>
    <ajc-test dir="pureJava" title="correct numeric literals"
      keywords="from-java">
        <compile files="LiteralsCp.java"/>
        <run class="LiteralsCp"/>
    </ajc-test>
    <ajc-test dir="pureJava" pr="538"
      title="inner types can't have the same simple name as an enclosing type"
      keywords="from-java">
        <compile files="InnerNameConflictsCf.java">
            <message kind="error" line="9"/>
            <message kind="error" line="14"/>
            <message kind="error" line="20"/>
            <message kind="error" line="21"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new"
      title="final constructor parameter causes incorrect compiler error"
      keywords="from-java,purejava">
        <compile files="FinalConstructorParm.java"/>
        <run class="FinalConstructorParm"/>
    </ajc-test>
    <ajc-test dir="new" pr="558"
      title="class name for identifier as String should provoke error"
      keywords="from-java,purejava">
        <compile files="PR558.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava/nameConflicts"
      title="type and package name conflicts are resolved happily (2)"
      keywords="from-java">
        <compile files="p1/Main2.java,p1/p2/Foo.java"/>
        <run class="p1.Main2"/>
    </ajc-test>
    <ajc-test dir="new/protectedStatic" pr="585"
      title="subclass unable to access protected static methods using type-qualified references"
      keywords="from-java,purejava">
        <compile files="SubClass.java,pack/SuperClass.java"/>
        <run class="SubClass"/>
    </ajc-test>
    <ajc-test dir="new" pr="588" title="Undefined inner class constructor"
      keywords="from-java,purejava">
        <compile files="UndefinedInner.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="try statements work sorta like scoped items for exception flow control"
      keywords="from-java">
        <compile files="TryWorksLikeEnvironment.java"/>
        <run class="TryWorksLikeEnvironment"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="qualified this must work exactly, not based on subtypes"
      keywords="from-java">
        <compile files="QualifiedThisExactness.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="631" title="expecting CE for ambiguous reference"
      keywords="from-java,purejava">
        <compile files="AmbiguousClassReference.java">
            <message kind="error" line="11"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="643" title="try without catch or finally"
      keywords="from-java,purejava,message-vary">
        <compile files="TryNoCatchCE.java"
               options="!eclipse">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="642" title="invalid floating-point constant"
      keywords="from-java,purejava,messages-vary">
        <compile files="ParsingFloatCE.java"
               options="!eclipse">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new"
      title="super reference used to disambiguate names of different but compatible types"
      keywords="from-java,purejava">
        <compile files="SuperDisambiguatingType.java"/>
        <run class="SuperDisambiguatingType"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="Overruning the lineStarts buffer, DO NOT EDIT THIS FILE!!!!"
      keywords="from-java,purejava">
        <compile files="AJError.java"/>
        <run class="AJError"/>
    </ajc-test>
    <ajc-test dir="new" pr="701" title="no CE for unambiguous type reference"
      keywords="from-java,purejava">
        <compile files="UnambiguousClassReference3CP.java"/>
        <run class="UnambiguousClassReference3CP"/>
    </ajc-test>
    <ajc-test dir="new" pr="701"
      title="CE for ambiguous type reference (two type declarations)"
      keywords="from-java,purejava,messages-vary">
        <compile files="AmbiguousClassReference3CE.java"
               options="!eclipse">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="709" title="final assignment in loop"
      keywords="from-java,purejava">
        <compile files="FinalInLoop.java"/>
        <run class="FinalInLoop"/>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="nested interface does not require new qualifier (8)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier8CE.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="nested interface does not require new qualifier (9)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier9CE.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="nested interface does not require new qualifier (10)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier10CE.java">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="nested interface does not require new qualifier (14)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier14CE.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="nested interface does not require new qualifier (15)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier15CE.java">
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="nested interface does not require new qualifier (16)"
      keywords="from-java,purejava">
        <compile files="InvalidNewQualifier16CE.java">
            <message kind="error" line="16"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="reasonable error for introduction on type whose source isn't found"
      keywords="from-errors">
        <compile files="NoSource.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="check that constructor name's match the enclosing type"
      keywords="from-errors,purejava">
        <compile files="BadConstructorName.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="handle errors in crosscut designators, insist that they end with a semicolon"
      keywords="from-errors">
        <compile files="BadDesignator.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="errors for not applicable or accessible methods"
      keywords="from-errors,purejava">
        <compile files="MethodsNotFound.java">
            <message kind="error" line="4"/>
            <message kind="error" line="8"/>
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="130"
      title="the designator has a wildcard for method name but no return type specified"
      keywords="from-errors">
        <compile files="NoReturnTypeInDesignator.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="the designator for the introduction has no type after the | charcter"
      keywords="from-errors">
        <compile files="BadIntroductionDesignator.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="140" title="crosscut signature does not match"
      keywords="from-errors">
        <compile files="BadCCutSig.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="proper exit conditions when errors fall through to javac"
      keywords="from-errors">
        <compile files="FromJavac.java">
            <message kind="error" line="11"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="209" title="Non-static advice silently ignored"
      keywords="from-errors">
        <compile files="BadPointcutName.java">
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="218"
      title="import statement within class body crashes compiler"
      keywords="from-errors,purejava">
        <compile files="ImportWithinClassBody.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="219" title="extra closing brace"
      keywords="from-errors">
        <compile files="ExtraClosingBrace.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="eachobject: can't extend a concrete aspect"
      keywords="from-errors,fail-unimplemented">
        <compile files="SubAspectsCantExtendNonAbstractAspects.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="271" title="instanceof used without a class"
      keywords="from-errors">
        <compile files="InstanceofWithoutClass.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="280" title="wildcard used for returns clause"
      keywords="from-errors">
        <compile files="WildcardForReturns.java">
            <message kind="error" line="17"/>           
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="280" title="no return statement in around advice"
      keywords="from-errors,new-messages-vary">
        <compile files="NoReturnStatement.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="286"
      title="inner aspects must be static (no longer matches PR#286)"
      keywords="from-errors,fail-unimplemented">
        <compile files="AbstractAspectOf.java">
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Casting class declarations as interfaces"
      keywords="from-errors">
        <compile files="InterfaceCast.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Not generating an error for using new as a method name"
      keywords="from-errors">
        <compile files="New.java">
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="ClassCastException on the int literal"
      keywords="from-errors">
        <compile files="IntLiteral.java">
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new"
      title="Wrong strictfp keyword usage in field declaration [TODO: move to errors]"
      keywords="from-errors">
        <compile files="StrictFpCErr2.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new"
      title="Wrong strictfp keyword usage in constructor declaration [TODO: move to errors]"
      keywords="from-errors">
        <compile files="StrictFpCErr3.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Incorrect static casts to primitively foldable arguments should not crash the compiler."
      keywords="from-errors">
        <compile files="BadStaticCast.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="Dominates with commas should signal an error."
      keywords="from-errors">
        <compile files="DominatesWithCommas.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="95"
      title="stack overflow with recursive crosscut specifier"
      keywords="from-errors">
        <compile files="RecursiveCCutSpecifier.java">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Throwing a NullPointerException when formals can't be bound in named pointcut"
      keywords="from-errors">
        <compile files="BadFormalsToCalls.java">
            <message kind="error" line="22"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="pre 0.7 introduction form outside aspect body causes an EmptyStackException"
      keywords="from-errors">
        <compile files="BadIntroduction.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="a before() clause at the class-level causes an EmptyStackException"
      keywords="from-errors">
        <compile files="TopLevelBefore.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="an after() clause at the class-level causes an EmptyStackException"
      keywords="from-errors">
        <compile files="TopLevelAfter.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="an around() clause at the class-level causes an EmptyStackException"
      keywords="from-errors">
        <compile files="TopLevelAround.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="Crashes when a cast is within another cast"
      keywords="from-errors,purejava">
        <compile files="CastInCast.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Crashes when a method name is missing in a call -- e.g. 'System.out.();'"
      keywords="from-errors,purejava">
        <compile files="NoMethodName.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="Crashes when a bad r-value appears."
      keywords="from-errors,purejava">
        <compile files="BadValue.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="Two underscores as a variables causes a crash"
      keywords="from-errors,purejava">
        <compile files="BadVar.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Crashes when assigning to a final static in an intializer and declaration"
      keywords="from-errors,purejava">
        <compile files="FinalStatic.java">
            <message kind="error" line="13"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="Crashes when two dots appear instead of one"
      keywords="from-errors,purejava">
        <compile files="TwoDots.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="Crashes when there're stray dots"
      keywords="from-errors,purejava">
        <compile files="StrayDot.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="Colon instead of a semi-colon causes a crash"
      comment="XXX public class in wrong file"
      keywords="from-errors,purejava">
        <compile files="Colon.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="type error in initializer caught by ajc, not javac"
      keywords="from-errors,purejava">
        <compile files="ArrayInitializerType.java">
            <message kind="error" line="2"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Circular inheritance with classes causes a stack overflow."
      keywords="from-errors,purejava">
        <compile files="CircularExtends.java">
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="Doesn't detect cyclic inheritance of aspects."
      keywords="from-errors">
        <compile files="CircularExtendsAspect.java">
            <message kind="error" line="18"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="ambiguous formal in formals pattern"
      keywords="from-errors">
        <compile files="AmbiguousFormal.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="Missing ;" keywords="from-errors,purejava">
        <compile files="PR405.java">
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="errors in aspect inheritance - 1"
      keywords="from-errors">
        <compile files="AspectInheritance1.java">
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Implementing a non-interface used to crash the compiler."
      keywords="from-errors,purejava">
        <compile files="PR333.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Should issue an error for using 'class' instead of 'aspect'"
      keywords="from-errors">
        <compile files="NoAspect.java">
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Should signal an error when we need an exposed value but don't provide it"
      keywords="from-errors">
        <compile files="MissingExposure.java">
            <message kind="error" line="13"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Introducing protected methods is causing a crash"
      keywords="from-errors">
        <compile files="ProtectedIntro.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Introducing protected fields is causing a crash"
      keywords="from-errors">
        <compile files="ProtectedFieldIntro.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="396"
      title="Undefined pointcuts were throwing exceptions in 07b11 [callsto]"
      keywords="from-errors">
        <compile files="UndefinedPointCut_PR396.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Whoops, I forgot to put a class in the field access PCD."
      keywords="from-errors">
        <compile files="BadGetPCD.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="138"
      title="the arounds return something but there is no returns statement"
      keywords="from-errors">
        <compile files="MissingReturns.java">
            <message kind="error" line="14"/>
            <message kind="error" line="20"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava" title="simple tests of throws and for stmt typing"
      keywords="from-errors">
        <compile files="SimpleSpec.java">
            <message kind="error" line="4"/>
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="error of no return statement detected not by ajc but by javac (line 4)"
      keywords="from-errors,purejava">
        <compile files="NoReturnStatementSimple.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="types in throws clauses"
      keywords="from-errors,purejava">
        <compile files="ThrowsClause.java">
            <message kind="error" line="2"/>
            <message kind="error" line="4"/>
            <message kind="error" line="13"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="bad switch syntax"
      keywords="from-errors,purejava">
        <compile files="Switch.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new"
      title="javac correct compiler error if there is no return in around returning result"
      keywords="from-errors">
        <compile files="NoReturnInProceed.java">
            <message kind="error" line="16"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava" title="test for not folding circular constants"
      keywords="from-errors">
        <compile files="CircularFolding.java">
            <message kind="error" line="6"/>
            <message kind="error" line="7"/>
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava"
      title="qualified this to non-inner should be caught"
      keywords="from-errors">
        <compile files="BadQualifiedNew.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="Some expressions are illegal expression statements"
      keywords="from-errors,purejava">
        <compile files="BadExpressionStatement.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" title="illegal synchronized stmts"
      keywords="from-errors,purejava,messages-vary">
        <compile files="BadSynchronized.java"
               options="!eclipse">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="534"
      title="aspect as member of interface (private and protected)"
      keywords="from-errors">
        <compile files="AspectInInterfaceCF.java">
            <message kind="error" line="11"/>
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="inner classes may not have static non-constant members"
      keywords="from-errors,purejava">
        <compile files="InnerMembers.java">
            <message kind="error" line="8"/>
            <message kind="error" line="9"/>
            <message kind="error" line="10"/>
            <message kind="error" line="11"/>
            <message kind="error" line="16"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"
      title="explicit constructor calls can throw exceptions"
      keywords="from-errors">
        <compile files="ExplicitConstructorThrows.java">
            <message kind="error" line="3"/>
            <message kind="error" line="12"/>
            <message kind="error" line="18"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors" pr="664" title="bad proceed args good error messages"
      keywords="from-errors">
        <compile files="ProceedArgsCE.java">
            <message kind="error" line="13"/>
            <message kind="error" line="16"/>
            <message kind="error" line="19"/>
        </compile>
    </ajc-test>
    <ajc-test dir="design/intro"
      title="declared exceptions are checked correctly on intros">
        <compile files="ExceptionsCP.java"/>
        <run class="ExceptionsCP"/>
    </ajc-test>
    <ajc-test dir="new" pr="96"
      title="field from implemented interface not found in advice"
      keywords="from-resolved_10x">
        <compile files="FieldFromImplementsNotFound.java"/>
        <run class="FieldFromImplementsNotFound"/>
    </ajc-test>
    <ajc-test dir="new" pr="65" title="aspect redefines a parameter"
      keywords="from-resolved_10x">
        <compile files="AspectRedefinesParam.java"/>
        <run class="AspectRedefinesParam"/>
    </ajc-test>
    <ajc-test dir="new" title="advice on * *(..) not mapping to initializers"
      keywords="from-resolved_10x">
        <compile files="InitializerAdvice.java"/>
        <run class="InitializerAdvice"/>
    </ajc-test>
    <ajc-test dir="new" pr="126"
      title="checks that methods are introduced on the topmost class implemented"
      keywords="from-resolved_10x">
        <compile files="TopmostImplements.java"/>
        <run class="TopmostImplements"/>
    </ajc-test>
    <ajc-test dir="new/arndAdvRet" pr="140"
      title="a couple different returns from around advice"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="new/adviceOnStaticMeth" pr="221"
      title="and PR#201 advice on static methods fails javac compile with this"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="new/scopeTypingBug" pr="191"
      title="bad type resolution when var reassigned in same scope"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="new/thisUsedInMain" pr="262"
      title="javac fails when this is referenced in the static main method"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="new/badCast" pr="275"
      title="and 276 cast error generated by ajc when type not in signature"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
    <ajc-test dir="new" pr="191"
      title="Confused referring to instance variables and locals"
      keywords="from-resolved_10x">
        <compile files="ScopesAndFields_PR191.java"/>
        <run class="ScopesAndFields_PR191"/>
    </ajc-test>
    <ajc-test dir="new" title="Crashes with privileged aspect."
      keywords="from-resolved_10x">
        <compile files="Privileged.java"/>
        <run class="Privileged"/>
    </ajc-test>
    <ajc-test dir="new" title="Introducing synchronized methods on interfaces."
      keywords="from-resolved_10x">
        <compile files="SynchronizedMethodsOnInterfaces.java"/>
        <run class="SynchronizedMethodsOnInterfaces"/>
    </ajc-test>
    <ajc-test dir="new" title="strictfp modifier allowed on advice"
      keywords="from-resolved_10x">
        <compile files="StrictFPAdvice.java"/>
        <run class="StrictFPAdvice"/>
    </ajc-test>
    <ajc-test dir="new"
      title="Null pointer on gets advice showing the case causing the error"
      keywords="from-resolved_10x">
        <compile files="NullPointerOnGetsSimple.java"/>
        <run class="NullPointerOnGetsSimple"/>
    </ajc-test>
    <ajc-test dir="new"
      title="try to make sure that dynamic JoinPoint objects aren't generated when used inside of if (false) { ... }"
      keywords="from-resolved_10x">
        <compile files="IfdefsAndAdvice.java"/>
        <run class="IfdefsAndAdvice"/>
    </ajc-test>
    <ajc-test dir="new"
      title="Crashing when looking up the type of array members."
      keywords="from-resolved_10x">
        <compile files="ArrayCasts.java"/>
        <run class="ArrayCasts"/>
    </ajc-test>
    <ajc-test dir="new"
      title="pcd if() NPE in compiler when unwinding assignment in pcd if(expr)"
      keywords="from-resolved_10x">
        <compile files="IfPCDExprAssignUnparseFailure.java"/>
        <run class="IfPCDExprAssignUnparseFailure"/>
    </ajc-test>
    <ajc-test dir="new"
      title="pcd if() dup methods produced when pointcut after advice etc (javac)"
      keywords="from-resolved_10x">
        <compile files="IfPCDDupMethod.java"/>
        <run class="IfPCDDupMethod"/>
    </ajc-test>
    <ajc-test dir="new/pr456" pr="456" title="advice on advice in usejavac mode"
      keywords="from-resolved_10x">
        <compile options="-usejavac"
          files="Test_AroundVarBug.java,AroundVarBug.java"/>
        <run class="Test_AroundVarBug"/>
    </ajc-test>
    <ajc-test dir="new" pr="476" title="initialization order with this"
      keywords="from-resolved_10x">
        <compile files="InitializationOrder.java"/>
        <run class="InitializationOrder"/>
    </ajc-test>
    <ajc-test dir="new"
      title="get/set join points run for complex assignment operators (+=, etc.) (working)"
      keywords="from-resolved_10x">
        <compile files="AssignOps.java"/>
        <run class="AssignOps"/>
    </ajc-test>
    <ajc-test dir="new" pr="595"
      title="variable slots and finally/catch causing verify errors"
      keywords="from-resolved_10final,from-resolved_10x">
        <compile files="AfterFinally.java"/>
        <run class="AfterFinally"/>
    </ajc-test>
    <ajc-test dir="new" pr="635" title="Named within pointcuts failing"
      keywords="from-resolved_10x">
        <compile files="NamedWithinPointcuts.java"/>
        <run class="NamedWithinPointcuts"/>
    </ajc-test>
    <ajc-test dir="new" pr="632"
      title="multi-dispatch not used for named pcd references"
      keywords="from-resolved_10x">
        <compile files="MultiDispatchCf.java">
            <message kind="error" line="54"/>
            <message kind="error" line="57"/>
            <message kind="error" line="60"/>
            <message kind="error" line="71"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new"
      title="unrecognized aspect should not net Cloneable and Serializable warnings"
      keywords="from-resolved_10x">
        <compile files="UnrecognizedAspectCE.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="479"
      title=". Binding the wrong arguments in withincode(..)."
      keywords="from-resolved_10x">
        <compile files="BindingArgumentsInWithincode.java"/>
        <run class="BindingArgumentsInWithincode"/>
    </ajc-test>
    <ajc-test dir="new" pr="479"
      title=". Matching arguments in cflow correctly."
      keywords="from-resolved_10x">
        <compile files="MatchingArgumentsInCflow.java"/>
        <run class="MatchingArgumentsInCflow"/>
    </ajc-test>
    <ajc-test dir="new" pr="603"
      title="unqualified transitive pointcut references not resolved - 2"
      keywords="from-resolved_104">
        <compile files="PointcutQualification2.java"/>
        <run class="PointcutQualification2"/>
    </ajc-test>
    <ajc-test dir="new" pr="658"
      title="simple call join point tests for JoinPoint SourceLocation context"
      keywords="from-resolved_104">
        <compile files="SourceLocationCall.java"/>
        <run class="SourceLocationCall"/>
    </ajc-test>
    <ajc-test dir="new" pr="661"
      title="!target with second advice on casted call"
      keywords="from-resolved_104">
        <compile files="CallNotTarget.java"/>
        <run class="CallNotTarget"/>
    </ajc-test>
    <ajc-test dir="new" pr="677"
      title="around name-binding in cflows using factorial"
      keywords="from-resolved_104">
        <compile files="FactorialCflow.java"/>
        <run class="FactorialCflow"/>
    </ajc-test>
    <ajc-test dir="new" pr="715" title="incrementing objects, arrays"
      keywords="from-resolved_104,purejava">
        <compile files="ArrayInc.java"/>
        <run class="ArrayInc"/>
    </ajc-test>
    <ajc-test dir="pureJava" title="try requires block JLS 14.19"
      keywords="from-resolved_105,purejava,messages-vary">
        <compile files="TryBlockRequiredCE.java"
               options="!eclipse">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava" pr="722" title="loop expressions not declarations"
      keywords="from-resolved_105,purejava,messages-vary">
        <compile files="DeclarationsInLoopsCE.java"
                options="!eclipse">
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="663"
      title="no error when public class is in file of a different name"
      keywords="from-resolved_105,purejava">
        <compile options="-strict" files="PublicClassWrongFilename.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava" pr="723" title="missing package identifier"
      keywords="from-resolved_105,purejava">
        <compile files="MissingPackageCE.java">
            <message kind="error" line="2"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="770" title="cflow pcd syntax error"
      keywords="from-resolved_105">
        <compile files="IllegalCflowCE.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava" title="various tests of switch bounds"
      keywords="from-resolved_106,purejava">
        <compile files="SwitchBounds.java"/>
        <run class="SwitchBounds"/>
    </ajc-test>
    <ajc-test dir="new" pr="853"
      title="declare interface implements class">
        <compile files="DeclareInterfaceImplementsClass.java">
           <message kind="error" line="10"/>
        </compile>
    </ajc-test>
    <ajc-test dir="pureJava" title="compiling asserts in methods"
      keywords="from-14tests,purejava">
        <compile options="-source,1.4,-usejavac" files="AssertInMethod.java"/>
        <run class="AssertInMethod" vm="1.4"/>
    </ajc-test>
    <ajc-test dir="pureJava" pr="725"
      title="asserts in aspect and declared methods [requires 1.4]"
      keywords="from-14tests,purejava">
        <compile options="-source,1.4,-usejavac"
          files="IntroducedAssertion.java"/>
        <run class="IntroducedAssertion" vm="1.4"/>
    </ajc-test>
    <ajc-test dir="design/around"
      title="around and return types + inlining optimizations"
      comment="-XOcodeSize not in 1.1, source uses 1.4 APIs"
      keywords="from-14tests,knownLimitation">
        <compile options="-XOcodeSize,-source,1.4"
          files="ReturnCastProceed.java,StackChecker.java">
            <message kind="warning" line="68"/>
        </compile>
        <run class="ReturnCastProceed" vm="1.4"/>
    </ajc-test>
    <ajc-test dir="new" pr="829"
      title="CE expected when declaring fields on arrays" keywords="tofix">
        <compile files="ArrayFieldDeclarationCE.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="888"
      title="crashes given method in declared method">
        <compile files="DeclareMethodCE.java">
          <message kind="error" line="8"/>
        </compile>
    </ajc-test>
    <ajc-test dir="bugs" pr="909"
      title="using instance as class reference to constant field"
      comment="XXX need to verify run">
        <compile files="InstanceAsClassRefToConstant.java"/>
    </ajc-test>
    <ajc-test dir="options/deprecated" 
      title="options -warn:deprecation not enabled">
        <compile files="WarnDeprecated.java,OldStuff.java"
        	options="!eclipse">
        </compile>
    </ajc-test>
    <ajc-test dir="options" 
      title="options declare field on bad type">
        <compile files="XLintTypeDeclareField.java" options="!eclipse">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
    <ajc-test dir="options" 
      title="options declare method on bad type">
        <compile files="XLintTypeDeclareMethod.java" options="!eclipse">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
    <ajc-test dir="options" 
      title="options negative -Xlint args()" 
      keywords="lint">
        <compile files="XLintTypeArgsPCD.java" options="-Xlint:ignore"/>
    </ajc-test>
    <ajc-test dir="options" 
      title="options negative -Xlint declare parent" 
      keywords="lint">
        <compile files="XLintTypeDeclareParent.java" options="-Xlint:ignore"/>
    </ajc-test>
    <ajc-test dir="options" 
      title="options negative -Xlint target()" 
      keywords="lint">
        <compile files="XLintTypeTargetPCD.java" options="-Xlint:ignore"/>
    </ajc-test>
    <ajc-test dir="options" 
      title="options negative -Xlint this()" 
      keywords="lint">
        <compile files="XLintTypeThisPCD.java" options="-Xlint:ignore"/>
    </ajc-test>
    <ajc-test dir="options/injars/simple" 
      title="source for options -injars">
        <compile files="Simple.java,Main.java"/>
        <run class="Main"/>
    </ajc-test>
    <ajc-test dir="new/options11" 
      comment="XXX not validated correct yet"
      title="testing new options">
        <compile files="Main.java,injar.jar,Aspect.java" 
            aspectpath="aspectlib1.jar,aspectlib2.jar"/>
        <!-- can't run until we support classpath including the above jars
        <run class="Main"/>
        -->
    </ajc-test>
    <ajc-test dir="new" pr="832"
      title="after throwing advice with non-throwable formal">
        <compile files="AfterThrowingNonThrowable.java">
            <message kind="error" line="41"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="829" title="declare array field using postfix"
      keywords="tofix">
        <compile files="ArrayFieldDeclaration.java">
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
    <ajc-test dir="bugs" pr="902"
      title="circularity in declare dominates">
        <compile files="CircularDominates.java">
		  <message kind="error" line="18"/>
        </compile>
    </ajc-test>
    <ajc-test dir="bugs" pr="29106" title="declared exceptions in inter-type decls">
        <compile files="ExceptionsOnInters.java"/>
        <run class="ExceptionsOnInters"/>
    </ajc-test>
    <ajc-test dir="new/PR852" pr="852"
      title="declaring method on superclass and subclass">
        <compile files="aspectPack/Aspect.java,target/SubClass.java,target/SuperClass.java">
          <dir-changes added="target.SubClass,target.SuperClass"/>
        </compile>
        <run class="aspectPack.Aspect"/>
    </ajc-test>
    <ajc-test dir="new/finalfield" pr="28974"
      title="introducing final fields (simple)">
        <compile files="Introducer.java,Receiver.java,User1.java"/>
        <run class="User1"/>
    </ajc-test>
    <ajc-test dir="new/finalfield" pr="28974"
      title="introducing final fields and checking errors">
        <compile files="Introducer.java,Receiver.java,UserCf.java">
            <message kind="error" line="6"/>        
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="804"
      title="aspect static initializers should run before instance constructed"
      keywords="tofix">
        <compile files="AspectStaticInit.java"/>
        <run class="AspectStaticInit"/>
    </ajc-test>
    <ajc-test dir="bugs" pr="34210" 
    		title="thisJoinPoint.getArgs() causes IncompatibleClassChangeError">
        <compile files="ThisJoinPointAndVerifier.java"/>
        <run class="ThisJoinPointAndVerifier"/>
    </ajc-test>
    <ajc-test dir="errors"  keywords="error"
    		title="inter-type declaration of void field">
        <compile files="VoidFieldDeclarationCE.java">
			<message kind="error" line="7"/>
        </compile>
    </ajc-test>
    <ajc-test dir="binding"
      title="no such constructor for proceed argument (error)">
        <compile files="UnfoundConstructor.java">
        	<message kind="error" line="25"/>
        </compile>
    </ajc-test>
    <ajc-test dir="errors"  
    		title="type not imported in around advice">
        <compile files="TypeNotImportedInAroundCE.java">
        	<message kind="error" line="10"/>
        </compile>
	</ajc-test>
    <ajc-test dir="errors"  
    		title="type not imported in aspect">
        <compile files="TypeInAspectNotImportedCE.java">
        	<message kind="error" line="6"/>
        </compile>
	</ajc-test>
    <ajc-test dir="bugs" pr="34206" 
    	keywords="knownLimitation"
    	title="before():execution(new(..)) does not throw NoAspectBoundException"
    	comment="correct behavior of this case needs to be thought through">
        <compile files="AspectInitError.java"/>
        <run class="AspectInitError"/>
    </ajc-test>
    <ajc-test dir="bugs/interInherit" pr="35725"
      title="Inter type declaration to base class not seen by derived class">
        <compile files="a_impl/AImpl.java,a_impl/Af.java,a_intf/A.java,b_impl/BImpl.java,b_intf/B.java"/>
        <run class="b_impl.BImpl"/>
    </ajc-test>
    <ajc-test dir="new/declareParents" 
      title="Declare parents removing ancestor"
      keywords="from-new">
        <compile files="IllegalAdoption.java">
            <message kind="error" line="13"/>
        </compile>
    </ajc-test>
    <ajc-test dir="new" pr="36736"
      title="implemented abstract pointcut">
        <compile files="AbstractImplementedPointcut.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
    <ajc-test dir="bugs" pr="36803"
      title="cflow concretization causing assertion failure">
        <compile files="CflowConcrete.java"/>
        <run class="CflowConcrete"/>
    </ajc-test>
   <ajc-test dir="new/options11"  pr="36329"
   	  comment="the line number might change, we're really interested only in the files here"
      title="The compiler crashes when using aspect libraries created without using -noweave">
        <compile files="Main.java,injar.jar,Aspect.java,aspectlib1.jar,aspectlib2.jar">
            <message kind="error" line="0"/>
        </compile>
   </ajc-test>
    <ajc-test dir="bugs" title="lame error message: negation doesn't allow binding"
      pr="30663">
        <compile files="BadBindingError.java">
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>
    <ajc-test dir="harness" 
    	keywords="command-line-error,knownLimitation"
    	comment="can't test -help: has to abort, but returns 0, normal status"    
		title="CLE: -help usage">
        <compile  badInput="true" options="-help">
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>
    <ajc-test dir="harness" keywords="command-line-error"
      title="CLE: no sources">
        <compile badInput="true">
            <message kind="error" text="no sources"/>
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>
    <ajc-test dir="harness" 
    	keywords="command-line-error,knownLimitation-ajctaskCompiler,knownLimitation-ajdeCompiler"
    	comment="ajde omits usage"
      title="CLE: bad filename">
        <compile  badInput="true" files="NoSuchFile.java">
            <message kind="error" text="NoSuchFile.java"/>
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>
    <ajc-test dir="harness" keywords="command-line-error"
    	comment="XXX test skipped - harness ignores -sourceroot option"
      title="CLE: no dir specified for sourceroots">
        <compile badInput="true" files="ErrorTest.java" 
        	options="-sourceroots">
            <message kind="error" text="no sources specified"/>
            <message kind="error" text="bad sourceroot"/>
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>
    <ajc-test dir="harness" keywords="command-line-error,knownLimitation-ajdeCompiler"
    	comment="ajde has same errors, different wording"
      title="CLE: no sourceroot specified for incremental">
        <compile badInput="true" options="-incremental">
            <message kind="error" text="no sources specified"/>
            <message kind="error" text="specify a source root"/>
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>
    <ajc-test dir="harness" keywords="command-line-error,knownLimitation-ajdeCompiler"
    	comment="ajde has same errors, different wording"
      title="CLE: file specified with incremental">
        <compile badInput="true" files="ErrorTest.java"
        	options="-incremental">
            <message kind="error" text="incremental mode only handles source files using -sourceroots"/>
            <message kind="error" text="no sources specified"/>
            <message kind="error" text="specify a source root"/>
            <message kind="abort" text="Usage"/>
        </compile>
    </ajc-test>
    <ajc-test dir="bugs/lines" pr="37758"
   	 title="Weaving rt.jar results in stack overflow">
        <compile files="A.java,big.jar">
 			<!-- message no longer produced as a result of bug fix 44190
        	<message kind="warning" text="manifest not copied"/>
        	-->
        </compile>
        <run class="Big"/>
    </ajc-test>
    <ajc-test dir="harness" 
        title="XLint:ignore suppresses XLint warnings">
        <compile files="XLintWarningTest.java" options="-Xlint:ignore"/>
    </ajc-test>
   <ajc-test dir="harness" pr="38134" keywords="knownLimitation"
   		comment="behavior is correct for 1.1 - revisit for 1.2"
        title="-nowarn suppresses XLint warnings">
        <compile files="XLintWarningTest.java" options="-nowarn"/>
    </ajc-test>
   <ajc-test dir="harness" pr="38134" keywords="knownLimitation"
   		comment="behavior is correct for 1.1 - revisit for 1.2"
        title="warn:none suppresses XLint warnings">
        <compile files="XLintWarningTest.java" options="-warn:none"/>
    </ajc-test>
    <ajc-test dir="harness" pr="38134" keywords="knownLimitation"
   		comment="behavior is correct for 1.1 - revisit for 1.2"
        title="-nowarn suppresses declare warnings">
        <compile files="WarningTest.java" options="-nowarn"/>
    </ajc-test>
    <ajc-test dir="harness" pr="38134" keywords="knownLimitation"
   		comment="behavior is correct for 1.1 - revisit for 1.2"
        title="-warn:none suppresses declare warnings">
        <compile files="WarningTest.java" options="-warn:none"/>
    </ajc-test>
    <ajc-test dir="bugs" pr="38168" keywords="knownLimitation"
   	 title="insertion of lots of advice code can make branch offset for if too large">
        <compile files="WideJumps.java"/>
        <run class="WideJumps"/>
    </ajc-test>
    <ajc-test dir="bugs" pr="38345"
   	 title="try switch VerifyError, InconsistentStackHeight">
        <compile files="TrySwitch.java"/>
        <run class="TrySwitch"/>
    </ajc-test>
    <ajc-test dir="bugs" pr="39460"
   	 title="Missing import crashes compiler">
        <compile files="MissingImport.java">
            <message kind="error" line="13"/>       
        </compile>
    </ajc-test>
    <ajc-test dir="bugs" pr="39479"
   	 title="NPE in bcel.LazyMethodGen when delegating from one ctor to a second that includes a switch">
        <compile files="NewSwitch.java"/>
        <run class="NewSwitch"/>
    </ajc-test>
	<ajc-test dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - baseline">
		<compile files="lib/LibraryInterface.java,
						Client.java,
						LibraryAspect.java"/>
		<run class="Client"/>
		</ajc-test>
	<ajc-test dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnly.jar,aspectOnly.jar"
		comment="weaving required for implementations of interface? 
		         XXX Would prefer to support javac compiles of Client here, mimicked with classpath only"
		>
		<compile 
			files="Client.java" 
			classpath="aspectedInterfaceOnly.jar,aspectOnly.jar">
			<message kind="error" line="9"/>
			</compile>
		</ajc-test>
	<ajc-test dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnlyBinary.jar,aspectOnly.jar"
		comment="works if aspect is only on the classpath?, i.e., no weaving XXX need javac run"
		>
		<compile 
			files="Client.java" 
			classpath="aspectedInterfaceOnlyBinary.jar,aspectOnly.jar">
			<message kind="error" line="9"/>
			</compile>
		</ajc-test>
	<ajc-test dir="bugs/moreInterfaceLibrary"
		pr="41123"
		title="Weaving failure when using injars (no jars)">
		<compile
			files="lib/ExecutionMonitor.aj,model/BusObj.java,model/MonitorBusObj.java">
		</compile>
	</ajc-test>
	<ajc-test dir="bugs/moreInterfaceLibrary"
		pr="41123"
		title="Weaving failure when using injars (on aspectpath)">
		<compile
			files="model/BusObj.java,model/MonitorBusObj.java"
			aspectpath="lib.jar">
		</compile>
	</ajc-test>
    <ajc-test dir="bugs" pr="42652"
   	 title="perthis and signature bad interaction">
        <compile files="InterPerCall.java"/>
        <run class="InterPerCall"/>
    </ajc-test>
	<ajc-test dir="bugs/extdirs" 
		pr="42574"
		title="zip and jar suffixes for extdirs entries">
		<compile files="extdirs-src/main/Main.java"
			extdirs="lib/lowercase"/>
	</ajc-test>
   <ajc-test dir="bugs"
		title="XLint warning for call PCD's using subtype of defining type (-1.3 -Xlint:ignore)"
		pr="41952"
		>
		<compile
			options="-Xlint:ignore,-1.3" 
			files="DeclaringTypeWarning.java" >
		</compile>
	</ajc-test>
     <ajc-test dir="bugs" pr="45663"
      title="Bad parser error recovery in advice">
        <compile files="ParserRecoveryTest.java">
		  <message kind="error" line="7"/>
        </compile>
    </ajc-test>   
    <ajc-test dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on abstract class not implemented by subtype (single source file)">
        <compile files="singlesource/C.java">
        	<message kind="error" line="9"/>
        </compile>
    </ajc-test>
</suite> 
