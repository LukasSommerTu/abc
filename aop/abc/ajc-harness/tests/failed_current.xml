<!DOCTYPE suite SYSTEM "../tests/ajcTestSuite.dtd"> 
 <suite> 
 <ajc-test dir="base/test117" title="DEPRECATED: introduce of variables"
      keywords="from-base,knownLimitation">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test118" title="DEPRECATED: Introduce of constructors"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test121"
      title="advises on introduced methods and constructors"
      keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="base/test135"
      title="proper values for thisJoinPoint attributes" keywords="from-base">
        <compile
          files="Driver.java,JoinPointFields.java,TopFoo.java,pack/PackFoo.java,pack/JoinPointFields.java,pack/PackJoinPointFields.java"/>
        <run class="test135.Driver"/>
    </ajc-test>
<ajc-test dir="base/test140"
      title="aspect inheritance and advice, introduction" keywords="from-base">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="new"
      title="advice on calls to static methods even works when called on super"
      keywords="from-base">
        <compile files="SuperStaticCallJoinPoint.java"/>
        <run class="SuperStaticCallJoinPoint"/>
    </ajc-test>
<ajc-test dir="new" pr="99"
      title="comment after class closes (with no new line at end)"
      keywords="from-java,purejava">
        <compile files="CommentAfterClass.java"/>
        <run class="CommentAfterClass"/>
    </ajc-test>
<ajc-test dir="new" title="handle multiple nested inner classes"
      keywords="from-java">
        <compile files="InnerHell.java"/>
        <run class="InnerHell"/>
    </ajc-test>
<ajc-test dir="new" pr="109"
      title="checks if the class field can be used on all of the primitive types"
      keywords="from-java,purejava">
        <compile files="ClassFieldOnPrimitiveType.java"/>
        <run class="ClassFieldOnPrimitiveType"/>
    </ajc-test>
<ajc-test dir="new/innerConsSyntax" pr="192"
      title="inner constructor syntax causes compile error" keywords="from-java">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="new" title="order of type declarations shouldn't matter"
      keywords="from-java">
        <compile files="OrderOfTypes.java"/>
        <run class="OrderOfTypes"/>
    </ajc-test>
<ajc-test dir="pureJava"
      title="inner classes accessing outers and some more inner class names"
      keywords="from-java">
        <compile files="InnerAccess.java"/>
        <run class="InnerAccess"/>
    </ajc-test>
<ajc-test dir="pureJava"
      title="Checking character values with all the unicode chars."
      keywords="from-java">
        <compile files="CharsUnicode.java"/>
        <run class="CharsUnicode"/>
    </ajc-test>
<ajc-test dir="pureJava" title="Using 'aspect' as identifier is legal TODO"
      keywords="from-java,purejava">
        <compile files="KeywordAspect.java"/>
        <run class="KeywordAspect"/>
    </ajc-test>
<ajc-test dir="pureJava"
      title="Using 'pointcut' as identifier is legal TODO"
      keywords="from-java,purejava">
        <compile files="KeywordPointcut.java"/>
        <run class="KeywordPointcut"/>
    </ajc-test>
<ajc-test dir="new" pr="408"
      title="Not binding constructor when using more than one compilation"
      keywords="from-java,purejava">
        <compile files="OuterAbstract_PR408.java"/>
        <compile files="ExtendsOuterAbstract_PR408.java"/>
        <compile files="ConstructorNotFound_PR408.java"/>
        <run class="ConstructorNotFound_PR408"/>
    </ajc-test>
<ajc-test dir="pureJava"
      title="finally at the end of a method that needs to return"
      keywords="from-java">
        <compile files="FinallyAndReturns.java"/>
        <run class="FinallyAndReturns"/>
    </ajc-test>
<ajc-test dir="pureJava/innerDefaultConstructors"
      title="Default constructors have same access as their enclosing type"
      keywords="from-java">
        <compile files="pkg1/Main.java,pkg2/Foo.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava"
      title="packages and generated inner types (for I.class)"
      keywords="from-java">
        <compile files="InterfaceAndClass.java"/>
        <run class="p.InterfaceAndClass"/>
    </ajc-test>
<ajc-test dir="pureJava" title="A.this exprs match by exact type matching"
      keywords="from-java">
        <compile files="QualifiedThisMatchesExactly.java">
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava"
      title="Inners can reference protected fields of their outer's super."
      keywords="from-java">
        <compile
          files="protectedFieldRefInInner/Main.java,protectedFieldRefInInner/p1/C.java"/>
        <run class="protectedFieldRefInInner.Main"/>
    </ajc-test>
<ajc-test dir="new" title="IOException on windows if nul used as identifier"
      keywords="from-java,purejava">
        <compile files="NulIOException.java">
            <message kind="error" line="12"/>
            <message kind="error" line="14"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava"
      title="Primitives that special case for a constant arm should work"
      keywords="from-java">
        <compile files="OneArmedPrimitiveTests.java"/>
        <run class="OneArmedPrimitiveTests"/>
    </ajc-test>
<ajc-test dir="pureJava" title="invalid numeric literals"
      keywords="from-java">
        <compile files="LiteralsCf.java">
            <message kind="error" line="8"/>
            <message kind="error" line="9"/>
            <message kind="error" line="10"/>
            <message kind="error" line="11"/>
            <message kind="error" line="12"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
            <message kind="error" line="20"/>
            <message kind="error" line="21"/>
            <message kind="error" line="22"/>
            <message kind="error" line="23"/>
            <message kind="error" line="25"/>
            <message kind="error" line="27"/>
            <message kind="error" line="28"/>
            <message kind="error" line="29"/>
            <message kind="error" line="30"/>
            <message kind="error" line="32"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava"
      title="test the unops and binops with various values" keywords="from-java">
        <compile files="BigOps.java"/>
        <run class="BigOps"/>
    </ajc-test>
<ajc-test dir="pureJava"
      title="test + and += for strings and variously typed values"
      keywords="from-java">
        <compile files="BigString.java"/>
        <run class="BigString"/>
    </ajc-test>
<ajc-test dir="pureJava" title="test try/catch/finally statements"
      keywords="from-java">
        <compile files="TryCatchFinally.java"/>
        <run class="TryCatchFinally"/>
    </ajc-test>
<ajc-test dir="new" title="Error expected for field of type void"
      keywords="from-java,purejava">
        <compile files="VoidField.java">
            <message kind="error" line="2"/>
            <message kind="error" line="4"/>
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" title="Error expected for constructor in interfaces"
      keywords="from-java,purejava">
        <compile files="InterfaceConstructor.java">
            <message kind="error" line="2"/>
            <message kind="error" line="6"/>
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="567"
      title="cyclic interface inheritance not detected if no classes implement the interfaces"
      keywords="from-java,purejava,messages-vary">
        <compile files="CyclicInterfaceInheritance.java" 
               options="!eclipse">
            <message kind="error" line="14"/>
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="567" title="cyclic class inheritance"
      keywords="from-java,purejava">
        <compile files="CyclicClassInheritance.java">
            <message kind="error" line="11"/>
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="Type names are not expressions on their own"
      keywords="from-java,purejava">
        <compile files="TypeExprErrors.java">
            <message kind="error" line="10"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
            <message kind="error" line="20"/>
            <message kind="error" line="21"/>
            <message kind="error" line="22"/>
            <message kind="error" line="23"/>
            <message kind="error" line="24"/>
            <message kind="error" line="25"/>
            <message kind="error" line="26"/>
            <message kind="error" line="27"/>
            <message kind="error" line="28"/>
            <message kind="error" line="29"/>
            <message kind="error" line="30"/>
            <message kind="error" line="31"/>
            <message kind="error" line="32"/>
            <message kind="error" line="33"/>
            <message kind="error" line="34"/>
            <message kind="error" line="36"/>
            <message kind="error" line="37"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava/nameConflicts"
      title="type and package name conflicts caught as errors (1)"
      keywords="from-java,purejava">
        <compile files="p1/p2.java,p1/Main1.java,p1/Foo.java,p1/p2/Foo.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/packagePrefix" pr="574"
      title="classes that are package prefixes are illegal"
      keywords="from-java,purejava,messages-vary">
        <compile files="p/prefix.java,p/prefix/SomeClass.java"
               options="!eclipse">
            <message kind="error" line="2"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/introTypeMissing"
      title="valid type expressions for introduced type testing"
      keywords="from-java,purejava">
        <compile files="TargetClass.java,Util.java"/>
        <run class="TargetClass"/>
    </ajc-test>
<ajc-test dir="new/introTypeMissing"
      title="CF expected when enclosing class superclass used as this qualifier in inner class"
      keywords="from-java">
        <compile files="TargetClassCF.java,Util.java">
            <message kind="error" line="22"/>
            <message kind="error" line="23"/>
            <message kind="error" line="27"/>
            <message kind="error" line="28"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/introTypeMissing"
      title="enclosing class may be used as this qualifier in inner class"
      keywords="from-java">
        <compile files="TargetClassCP.java,Util.java"/>
        <run class="TargetClassCP"/>
    </ajc-test>
<ajc-test dir="new"
      title="PR591 compiler error expected when directly calling unimplemented abstract method using super"
      keywords="from-java,purejava">
        <compile files="AbstractMethodCall.java">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava"
      title="suggested by Jacks 15.28-qualified-namestr tests"
      keywords="from-java,purejava,messages-vary">
        <compile files="NonConstants.java" 
               options="!eclipse">
            <message kind="error" line="13"/>
            <message kind="error" line="14"/>
            <message kind="error" line="15"/>
            <message kind="error" line="16"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava"
      title="nested finally blocks have interesting frame location problems"
      keywords="from-java">
        <compile files="NestedFinally.java"/>
        <run class="NestedFinally"/>
    </ajc-test>
<ajc-test dir="pureJava"
      title="suggested by jacks 3.7-15 all comments must be closed"
      keywords="from-java,purejava">
        <compile files="OpenComment.java">
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/classaccess"
      title="package class access not enforced outside of package"
      keywords="from-java,purejava">
        <compile files="main/Main.java,pack1/Target.java">
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/subaspects" pr="647"
      title="concrete aspect unable to access abstract package-private method in parent for overriding"
      keywords="from-java,purejava,messages-vary"
      comment="XXX fix source - package-private">
        <compile files="parent/ParentMethodCE.java,child/ChildMethodCE.java"
               options="!eclipse">
            <message kind="warning" line="28"/>
            <message kind="error" line="27"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" pr="680"
      title="interfaces with non-explicitly static inner classes"
      keywords="from-java">
        <compile files="InterfaceAndInnerHelper.java"/>
        <compile files="InterfaceAndInner.java"
        	includeClassesDir="true"/>
        <run class="InterfaceAndInner"/>
    </ajc-test>
<ajc-test dir="new" pr="701"
      title="CE for ambiguous type reference (imports)"
      keywords="from-java,purejava">
        <compile files="AmbiguousClassReference2CE.java">
            <message kind="error" line="2"/>
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="701"
      title="CE for ambiguous type reference (two inner types)"
      keywords="from-java,purejava,messages-vary">
        <compile files="AmbiguousClassReference4CE.java"
               options="!eclipse">
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="private super access in inners"
      keywords="from-java,purejava">
        <compile files="PrivateSuperInnerAccess.java"/>
        <run class="PrivateSuperInnerAccess"/>
    </ajc-test>
<ajc-test dir="pureJava" title="Operands work correctly"
      keywords="from-bigjava">
        <compile files="Ops.java"/>
        <run class="Ops"/>
    </ajc-test>
<ajc-test dir="errors"
      title="reasonable error for crosscut reference with no formals specified"
      keywords="from-errors">
        <compile files="NoFormalsCrosscut.java">
            <message kind="error" line="6"/>
            <message kind="error" line="7"/>
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="try to return from a before, after, after throwing and after returning"
      keywords="from-errors">
        <compile files="InvalidReturn.java">
            <message kind="error" line="12"/>
            <message kind="error" line="16"/>
            <message kind="error" line="19"/>
            <message kind="error" line="22"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" pr="213"
      title="mismatched parens on advice (wasn't binding Tester)"
      keywords="from-errors">
        <compile files="MismatchedParens.java">
            <message kind="error" line="16"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" pr="219" title="extra closing brace"
      keywords="from-errors">
        <compile files="ExtraClosingBrace.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" pr="244"
      title="decent errors for around return type not matching target point"
      keywords="from-errors">
        <compile files="AroundReturnType.java">
            <message kind="error" line="3"/>
            <message kind="error" line="7"/>
            <message kind="error" line="16"/>
            <message kind="error" line="21"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="eachobject: can't call new on an aspect of"
      keywords="from-errors">
        <compile files="CantCallConstructorOnAspects.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="eachobject: only zero-argument constructors allowed in an aspect"
      keywords="from-errors,fail-unimplemented">
        <compile files="AspectsCantHaveYesArgumentConstructors.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>
<ajc-test dir="new"
      title="Wrong strictfp keyword usage in interface function prototype [TODO: move to errors]"
      keywords="from-errors">
        <compile files="StrictFpCErr1.java">
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="Accessing instance fields and instance methods statically."
      keywords="from-errors,purejava">
        <compile files="AccessingInstanceFieldsStatically.java">
            <message kind="error" line="15"/>
            <message kind="error" line="16"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="26"/>
            <message kind="error" line="27"/>
            <message kind="error" line="30"/>
            <message kind="error" line="38"/>
            <message kind="error" line="39"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" pr="385"
      title="disallow defining more than one pointcut with the same name"
      keywords="from-errors,fail-unimplemented">
        <compile files="OverloadedPointcuts.java">
            <message kind="error" line="4"/>
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="a class can't extend an aspect"
      keywords="from-errors,fail-unimplemented">
        <compile files="ClassExtendingAspect.java">
            <message kind="error" line="19"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="Crashes when a cast of the form )int) appears"
      keywords="from-errors,purejava,messages-vary">
        <compile files="BadCast.java"
               options="!eclipse">
            <message kind="error" line="9"/>
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="Crashes when the closing brace is reversed"
      keywords="from-errors,purejava,messages-vary">
        <compile files="ClosingBrace.java"
               options="!eclipse">
            <message kind="error" line="11"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="Stray characters cause a crash"
      comment="XXX public class in wrong file"
      keywords="from-errors,purejava">
        <compile files="StraySlash.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="Binds the pointcut formals to member variables instead of pointcut formals."
      keywords="from-errors">
        <compile files="PointcutFormals.java" options="-Xlint:warning">
            <message kind="error" line="14"/>
            <message kind="error" line="15"/>
            <message kind="warning" line="16"/>
            <message kind="warning" line="17"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="cast expressions should not allow casts between ifaces and array types"
      keywords="from-errors,purejava">
        <compile files="InterfaceArrayCast.java">
            <message kind="error" line="9"/>
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="parsing errors for various bad forms of NewArrayExprs."
      keywords="from-errors,purejava">
        <compile files="BadNewArrayExprs.java">
            <message kind="error" line="4"/>
            <message kind="error" line="5"/>
            <message kind="error" line="6"/>
            <message kind="error" line="7"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="good error for field name instead of type name"
      keywords="from-errors">
        <compile files="BadTypeName.java">
            <message kind="error" line="2"/>
            <message kind="error" line="4"/>
            <message kind="error" line="6"/>
            <message kind="error" line="8"/>
            <message kind="error" line="10"/>
            <message kind="error" line="12"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="good error for bad field and inner class references"
      keywords="from-errors,purejava">
        <compile files="BadReferences.java">
            <message kind="error" line="3"/>
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="errors in aspect inheritance - 2"
         keywords="from-errors">
        <compile files="AspectInheritance2.java">
            <message kind="error" line="8"/>
            <message kind="error" line="16"/>
            <message kind="error" line="20"/>
            <message kind="error" line="26"/>
            <message kind="error" line="30"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="errors in aspect inheritance - 3"
      keywords="from-errors">
        <compile files="AspectInheritance3.java">
            <message kind="error" line="19"/>
            <message kind="error" line="24"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="errors in aspect inheritance - 4"
      keywords="from-errors">
        <compile files="AspectInheritance4.java">
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="circular dominates leading to irresolvable advice precedence"
      keywords="from-errors">
        <compile files="CircularDominates.java">
            <message kind="error" line="12"/>
            <message kind="error" line="16"/>
            <message kind="error" line="20"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="StackOverFlowException with circular +implements's."
      keywords="from-errors">
        <compile files="CircularPlusImplementsIntros.java">
            <message kind="error" line="19"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" pr="388"
      title="two classes with the same fully-qualified names [eachjvm]"
      keywords="from-errors"
      comment="XXX error not flagging initial type">
        <compile files="DuplicatedNames.java">
            <message kind="error" line="3"/>
            <message kind="error" line="5"/>
            <message kind="error" line="7"/>
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" pr="240" title="advice on abstract pointcuts"
      keywords="from-errors">
        <compile files="StaticAdviceOnAbstract.java">
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="checking the contra-variant errors for typing of proceed"
      keywords="from-errors,knownLimitation">
        <compile files="BadAround.java">
            <message kind="error" line="12"/>
            <message kind="error" line="15"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
            <message kind="error" line="22"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="class and interface extension"
      keywords="from-errors,purejava,messages-vary">
        <compile files="BadExtension.java"
               options="!eclipse">
            <message kind="error" line="7"/>
            <message kind="error" line="9"/>
            <message kind="error" line="16"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
            <message kind="error" line="21"/>
            <message kind="error" line="35"/>
            <message kind="error" line="38"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="multiple conflicting introductions"
      keywords="from-errors">
        <compile files="MultipleIntros.java">
            <message kind="error" line="5"/>
            <message kind="error" line="16"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
            <message kind="error" line="22"/>
            <message kind="error" line="27"/>
            <message kind="error" line="30"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="referencing non-static pointcuts in outer aspects"
      keywords="from-errors">
        <compile files="StaticPointcutRefs.java">
            <message kind="error" line="8"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="should give an error for introducing two members with the same name"
      keywords="from-errors">
        <compile files="TwoIntros.java">
            <message kind="error" line="10"/>
            <message kind="error" line="14"/>
            <message kind="error" line="16"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="wimpy test for undeclared and uncaught exceptions"
      keywords="from-errors">
        <compile files="UndeclaredThrows.java">
            <message kind="error" line="12"/>
            <message kind="error" line="18"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="continue targets must be continuable"
      keywords="from-errors">
        <compile files="BadContinueTarget.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava"
      title="Referencing various things from static contexts"
      keywords="from-errors,purejava">
        <compile files="StaticContexts.java">
            <message kind="error" line="11"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
            <message kind="error" line="20"/>
            <message kind="error" line="21"/>
            <message kind="error" line="27"/>
            <message kind="error" line="28"/>
            <message kind="error" line="31"/>
            <message kind="error" line="35"/>
            <message kind="error" line="36"/>
        </compile>
    </ajc-test>
<ajc-test dir="new"
      title="Given non-matching TypePattern, CE flags use of non-introduced method rather than failure to introduce"
      keywords="from-errors">
        <compile
          files="typepatternmatch/pack1/IntroErrorLocation.java,typepatternmatch/pack2/TargetClass.java">
            <message kind="error" line="28"
              file="pack1/IntroErrorLocation.java"
              text="TargetClass cannot be resolved"/>
            <message kind="warning" line="33"
              file="pack1/IntroErrorLocation.java"
              text="no match for this type name: TargetClass"/>
            <message kind="error" line="39"
              file="pack1/IntroErrorLocation.java"
              text="undefined for the type TargetClass"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="457"
      title="Compiler should suggest using aspect when advice, pointcuts, or introduction is in a class"
      keywords="from-errors,poorErrorMessages">
        <compile files="RecognizeAspectCE.java">
            <message kind="error" line="3"  
            	file="RecognizeAspectCE.java"
            	text="Syntax error"/>
            <message kind="error" line="6"  
            	file="RecognizeAspectCE.java"
            	text="Syntax error"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="illegal forward reference"
      keywords="from-errors,purejava">
        <compile files="IllegalForwardReference.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="declare error working with pointcut and-not (amp,amp,bang)"
      keywords="from-errors">
        <compile files="DeclareError.java">
            <message kind="error" line="5"/>
            <message kind="error" line="19"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="protected accessibility"
      keywords="from-errors,purejava">
        <compile files="protectedAccess/Main.java,protectedAccess/p1/C1.java">
            <message kind="error" line="26"/>
            <message kind="error" line="28"/>
            <message kind="error" line="29"/>
            <message kind="error" line="31"/>
            <message kind="error" line="37"/>
            <message kind="error" line="45"/>
            <message kind="error" line="46"/>
            <message kind="error" line="54"/>
            <message kind="error" line="55"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="parse-time illegal modifiers"
      keywords="from-errors,purejava">
        <compile files="Modifiers1.java">
            <message kind="error" line="2"/>
            <message kind="error" line="3"/>
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors" title="check-time illegal modifiers"
      keywords="from-errors,purejava">
        <compile files="Modifiers.java">
            <message kind="error" line="2"/>
            <message kind="error" line="3"/>
            <message kind="error" line="4"/>
            <message kind="error" line="6"/>
            <message kind="error" line="7"/>
            <message kind="error" line="8"/>
            <message kind="error" line="9"/>
            <message kind="error" line="11"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="modifiers on interface members"
      keywords="from-errors,purejava">
        <compile files="InterfaceMembers.java">
            <message kind="error" line="2"/>
            <message kind="error" line="3"/>
            <message kind="error" line="4"/>
            <message kind="error" line="5"/>
            <message kind="error" line="7"/>
            <message kind="error" line="8"/>
            <message kind="error" line="9"/>
            <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="534"
      title="aspect as member of interface (private and protected)"
      keywords="from-errors">
        <compile files="AspectInInterfaceCF.java">
            <message kind="error" line="11"/>
            <message kind="error" line="14"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="good errors (and not too many) for missing members"
      comment="XXX import of class in default package"

      keywords="from-errors,purejava">
        <compile files="NotFound.java">
            <message kind="error" line="1"/>
            <message kind="error" line="2"/>
            <message kind="error" line="6"/>
            <message kind="error" line="9"/>
            <message kind="error" line="10"/>
            <message kind="error" line="14"/>
            <message kind="error" line="16"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="536"
      title="expecting compile failures with subclass narrowing scope of superclass methods or accessing private superclass variables"
      keywords="from-errors,purejava">
        <compile files="RestrictingVisibilityCF.java">
            <message kind="error" line="27"/>
            <message kind="error" line="29"/>
            <message kind="error" line="31"/>
            <message kind="error" line="39"/>
            <message kind="error" line="41"/>
            <message kind="error" line="46"/>
            <message kind="error" line="48"/>
            <message kind="error" line="53"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="494"
      title="introduced inner interfaces - compile should fail to bind interface name outside of Aspect or if implementing method is not public"
      keywords="from-errors">
        <compile files="IntroduceInnerInterfaceCF.java" options="-Xlint:ignore">
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
            <message kind="error" line="20"/>
            <message kind="error" line="24"/>
            <message kind="error" line="42"/>
            <message kind="error" line="45"/>
            <message kind="error" line="48"/>
            <message kind="error" line="50"/>
            <message kind="error" line="58"/>
        </compile>
    </ajc-test>
<ajc-test dir="errors"
      title="aspects may not implement Serializable or Cloneable"
      keywords="from-errors">
        <compile files="AspectInterfaces.java">
            <message kind="error" line="4"/>
            <message kind="error" line="5"/>
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="flow analysis with local types"
      keywords="from-errors,purejava">
        <compile files="InnerFlow.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>
<ajc-test dir="design/intro"
      title="within and introductions behaves correctly" keywords="from-design">
        <compile files="Within.java"/>
        <run class="Within"/>
    </ajc-test>
<ajc-test dir="design/intro"
      title="introduction of static methods and fields on classes and interfaces"
      keywords="from-design,knownLimitation">
        <compile files="Statics.java"/>
        <run class="Statics"/>
    </ajc-test>
<ajc-test dir="design/intro" pr="570"
      title="errors in inheritance of multiple concrete methods"
      keywords="from-design">
        <compile files="MultiInheritCF.java">
            <message kind="error" line="21"/>
            <message kind="error" line="41"/>
            <message kind="error" line="42"/>
            <message kind="error" line="43"/>
            <message kind="error" line="45"/>
            <message kind="error" line="46"/>
        </compile>
    </ajc-test>
<ajc-test dir="design/intro"
      title="declared exceptions are checked correctly on intros (errors)">
        <compile files="ExceptionsCF.java">
            <message kind="error" line="8"/>
            <message kind="error" line="23"/>
        </compile>
    </ajc-test>
<ajc-test dir="design/eachobject"
      title="eachobject: eachobject(receptions(...)) [eachobject]"
      keywords="from-design">
        <compile files="Tricky1.java"/>
        <run class="Tricky1"/>
    </ajc-test>
<ajc-test dir="design/reflect" title="Checking new joinpoints"
      keywords="from-design">
        <compile files="Coverage.java"/>
        <run class="Coverage"/>
    </ajc-test>
<ajc-test dir="design/eachobject"
      title="eachobject: simple test [eachobject] (still)"
      keywords="from-design">
        <compile files="Simple.java"/>
        <run class="Simple"/>
    </ajc-test>
<ajc-test dir="new"
      title="properly make choice between cast and parenthesis in parser"
      keywords="from-resolved_10x">
        <compile files="JoinPointFields.java"/>
        <run class="JoinPointFields"/>
    </ajc-test>
<ajc-test dir="new"
      title="make sure advice affects introduced methods and constructors"
      keywords="from-resolved_10x">
        <compile files="AdviceOnIntroduced.java"/>
        <run class="AdviceOnIntroduced"/>
    </ajc-test>
<ajc-test dir="new" title="introducing extends and implements"
      keywords="from-resolved_10x">
        <compile files="HierarchyIntroductions.java"/>
        <run class="HierarchyIntroductions"/>
    </ajc-test>
<ajc-test dir="new" pr="106" title="advice and package visibility"
      keywords="from-resolved_10x">
        <compile
          files="packagevisibility/PackagesAndAdvice.java,packagevisibility/testPackage/Class1.java,packagevisibility/testPackage/Class2.java"
          options="-Xlint:ignore"/>
        <run class="packagevisibility.PackagesAndAdvice"/>
    </ajc-test>
<ajc-test dir="new" pr="106" title="advice and package visibility"
      keywords="from-resolved_10x">
        <compile
          files="packagevisibility/PackagesAndAdviceCf.java,packagevisibility/testPackage/Class1.java,packagevisibility/testPackage/Class2.java"
          options="-Xlint:error">
        <message kind="error" line="29"/>
        </compile>
    </ajc-test>
<ajc-test dir="new"
      title="non-static advice on inner class defined inside of method body"
      keywords="from-resolved_10x">
        <compile files="MethodInner.java"/>
        <run class="MethodInner"/>
    </ajc-test>
<ajc-test dir="new" pr="242"
      title="generating the right throws clause for call-site advice (and around)"
      keywords="from-resolved_10x">
        <compile files="ComputedThrows.java"/>
        <run class="ComputedThrows"/>
    </ajc-test>
<ajc-test dir="new" pr="246"
      title="advice on calls to static methods using several syntax"
      keywords="from-resolved_10x">
        <compile files="StaticCalls.java"/>
        <run class="StaticCalls"/>
    </ajc-test>
<ajc-test dir="new" pr="248"
      title=", PR#249, PR#250 advice on constructor sites"
      keywords="from-resolved_10x">
        <compile files="NewSiteAdvice.java"/>
        <run class="NewSiteAdvice"/>
    </ajc-test>
<ajc-test dir="new" title="test after throwing advice in several ways"
      keywords="from-resolved_10x">
        <compile files="AfterThrowing.java"/>
        <run class="AfterThrowing"/>
    </ajc-test>
<ajc-test dir="design/calls" title="calls: calls(...)"
      keywords="from-resolved_10x">
        <compile files="Simple.java" options="-Xlint:ignore"/>
        <run class="Simple"/>
    </ajc-test>
<ajc-test dir="new/extraThrows" pr="259"
      title="throws Exception clause is unnecessarily added to Driver.main method"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="new/beforeNotRun" pr="265" title="more aspect inheritance"
      keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="new" pr="309"
      title="(DESIGN QUESTION) aspect of eachJVM advising its own initializer"
      keywords="from-resolved_10x">
        <compile files="EachJVMOnSelf.java"/>
        <run class="EachJVMOnSelf"/>
    </ajc-test>
<ajc-test dir="new" title="Introductions on other introductions"
      keywords="from-resolved_10x">
        <compile files="IntroOnIntro.java"/>
        <run class="IntroOnIntro"/>
    </ajc-test>
<ajc-test dir="new" title="basic test of callsto pointcuts"
      keywords="from-resolved_10x">
        <compile files="CallsTo.java"/>
        <run class="CallsTo"/>
    </ajc-test>
<ajc-test dir="new" title="advice on catch clauses"
      keywords="from-resolved_10x,knownLimitation">
        <compile files="CatchAdvice.java"/>
        <run class="CatchAdvice"/>
    </ajc-test>
<ajc-test dir="new" title="Ensuring backdoor methods are produced."
      keywords="from-resolved_10x">
        <compile files="BackdoorMethods.java"/>
        <run class="BackdoorMethods"/>
    </ajc-test>
<ajc-test dir="new"
      title="no duplicate advice methods in abstract aspects"
      keywords="from-resolved_10x">
        <compile
          files="GeneratingDuplicateNamedAdviceMethodsInAbstractAspects.java"/>
        <run class="GeneratingDuplicateNamedAdviceMethodsInAbstractAspects"/>
    </ajc-test>
<ajc-test dir="new"
      title="no duplicate advice methods in abstract aspects extended"
      keywords="from-resolved_10x">
        <compile
          files="GeneratingDuplicateNamedAdviceMethodsInAbstractAspectsWithExtendedAspect.java"/>
        <run class="GeneratingDuplicateNamedAdviceMethodsInAbstractAspectsWithExtendedAspect"
        />
    </ajc-test>
<ajc-test dir="new"
      title="Parsing C+ expressions without parens in super introductions."
      keywords="from-resolved_10x">
        <compile files="ParsingSubtypesIntroductions.java"/>
        <run class="ParsingSubtypesIntroductions"/>
    </ajc-test>
<ajc-test dir="new"
      title="Introducing methods on classes that implements inner-interfaces with +implements."
      keywords="from-resolved_10x">
        <compile files="IntroducingMethodsOnPlusImplementedInterfaces.java" options="-Xlint:ignore"/>
        <run class="IntroducingMethodsOnPlusImplementedInterfaces"/>
    </ajc-test>
<ajc-test dir="new" pr="464"
      title="Methods with the same name are generated when abstract aspects extend another abstract aspect."
      keywords="from-resolved_10x">
        <compile
          files="AbstractAspectsExtendingAbstractAspectsGeneratesMethodsWithTheSameName_PR464.java"/>
        <run class="AbstractAspectsExtendingAbstractAspectsGeneratesMethodsWithTheSameName_PR464"
        />
    </ajc-test>
<ajc-test dir="new" title="holding onto proceed calls in a closure-like way"
      keywords="from-resolved_10x,knownLimitation">
        <compile files="HoldProceed.java"/>
        <run class="HoldProceed"/>
    </ajc-test>
<ajc-test dir="new" title="basic test of declare soft"
      keywords="from-resolved_10x">
        <compile files="DeclareSoft.java"/>
        <run class="DeclareSoft"/>
    </ajc-test>
<ajc-test dir="new" 
    	title="Cannot bind a name." keywords="from-resolved_10x,purejava">
        <compile files="CannotReferenceSuper.java"/>
        <run class="CannotReferenceSuper"/>
    </ajc-test>
<ajc-test dir="new"
      title="implements and extends are introduced before methods and fields"
      keywords="from-resolved_10x">
        <compile files="IntroOrder.java"/>
        <run class="IntroOrder"/>
    </ajc-test>
<ajc-test dir="new"
      title="join points exist in the execution of field initializers"
      keywords="from-resolved_10x">
        <compile files="FieldInitializerJoinPoints.java"/>
        <run class="FieldInitializerJoinPoints"/>
    </ajc-test>
<ajc-test dir="new/privilegedAspects" title="privileged aspects"
      keywords="from-resolved_10x">
        <compile
          files="main/Main.java,fish/PrivateClass.java,fish/B.java,fowl/C.java,fowl/D.java"/>
        <run class="main.Main"/>
    </ajc-test>
<ajc-test dir="new" title="advice on field gets in privileged aspects"
      keywords="from-resolved_10x">
        <compile files="AdviceOnPrivileged.java"/>
        <run class="AdviceOnPrivileged"/>
    </ajc-test>
<ajc-test dir="new"
      title="basic tests for initializer and staticinitializer PCDs"
      keywords="from-resolved_10x">
        <compile files="InitializerTest.java"/>
        <run class="InitializerTest"/>
    </ajc-test>
<ajc-test dir="new/access"
      title="some method accessibility tests, particularly package-protected and inheritance"
      keywords="from-resolved_10x">
        <compile files="Test1.java,pc/C.java,psub/SubC.java,psub/A.java"/>
        <run class="Test1"/>
    </ajc-test>
<ajc-test dir="new"
      title="calls advice on array objects causes error in code generation"
      keywords="from-resolved_10x">
        <compile files="CallsToArray.java"/>
        <run class="CallsToArray"/>
    </ajc-test>
<ajc-test dir="new"
      title="work nicely with inner class method look-up rules and call-site advice"
      keywords="from-resolved_10x">
        <compile files="InnerMethods.java"/>
        <run class="InnerMethods"/>
    </ajc-test>
<ajc-test dir="new" pr="415"
      title="No argthis was being created for calls advice."
      keywords="from-resolved_10x">
        <compile files="PR415.java"/>
        <run class="PR415"/>
    </ajc-test>
<ajc-test dir="new"
      title="within and withincode (doesn't all work due to local class name issues)"
      keywords="from-resolved_10x">
        <compile files="WithinInners.java"/>
        <run class="WithinInners"/>
    </ajc-test>
<ajc-test dir="new"
      title="around advice on calls within inner classes (including protected method calls)"
      keywords="from-resolved_10x">
        <compile files="AroundInnerCalls13.java" options="-1.3"/>
        <run class="AroundInnerCalls13"/>
    </ajc-test>
<ajc-test dir="new"
      title="around advice on calls within inner classes (including protected method calls)"
      keywords="from-resolved_10x">
        <compile files="AroundInnerCalls.java" options="-1.4"/>
        <run class="AroundInnerCalls"/>
    </ajc-test>
<ajc-test dir="new" title="Arguments to runNext should be final when needed"
      keywords="from-resolved_10x">
        <compile files="Finals.java"/>
        <run class="Finals"/>
    </ajc-test>
<ajc-test dir="new" title="Method introductions"
      keywords="from-resolved_10x">
        <compile files="MethodIntroductions.java"/>
        <run class="MethodIntroductions"/>
    </ajc-test>
<ajc-test dir="new" title="Throwing an EmptyStackException."
      keywords="from-resolved_10x">
        <compile files="EmptyStack.java"/>
        <run class="EmptyStack"/>
    </ajc-test>
<ajc-test dir="new/perThis"
	    title="check that MightHaveAspect interface is created correctly for an aspect in deep package"
	    keywords="from-resolved_10x">
	      <compile files="p/EachObjectTarget.java,the/deep/pkg/EachObjectInDeepPackage.java"/>
	      <run class="p.EachObjectTarget"/>
	</ajc-test>
<ajc-test dir="new"
      title="Various calls, receptions, and callsto tests [callsto]"
      keywords="from-resolved_10x">
        <compile files="CallsReceptionsCallsto.java"/>
        <run class="CallsReceptionsCallsto"/>
    </ajc-test>
<ajc-test dir="new"
      title="different version of aspect inheritance, particularly empty pointcuts and abstract cflows [eachcflow]"
      keywords="from-resolved_10x,fail-unimplemented">
        <compile files="AspectInheritance.java"/>
        <run class="AspectInheritance"/>
    </ajc-test>
<ajc-test dir="new"
      title="Crashing when looking up the type of array members."
      keywords="from-resolved_10x">
        <compile files="ArrayCasts.java"/>
        <run class="ArrayCasts"/>
    </ajc-test>
<ajc-test dir="new"
      title="PostfixExprs to various synthetic things are fixed correctly [eachobject]"
      keywords="from-resolved_10x">
        <compile files="Fixes.java"/>
        <run class="Fixes"/>
    </ajc-test>
<ajc-test dir="new" pr="105" title="advice on an inherited method"
      keywords="from-resolved_10x">
        <compile files="AdviceOnInheritedMethod.java"/>
        <run class="AdviceOnInheritedMethod"/>
    </ajc-test>
<ajc-test dir="new" pr="114"
      title=", PR#115 checks the ordering of catch clauses"
      keywords="from-resolved_10x">
        <compile files="OrderOfCatches.java"/>
        <run class="OrderOfCatches"/>
    </ajc-test>
<ajc-test dir="new" title="various declared exception permutations"
      keywords="from-resolved_10x">
        <compile files="DeclaredExcs.java"/>
        <run class="DeclaredExcs"/>
    </ajc-test>
<ajc-test dir="new"
      title="ordering of advice kinds as well as cflow and dominates"
      keywords="from-resolved_10x">
        <compile files="AdviceOrdering.java"/>
        <run class="AdviceOrdering"/>
    </ajc-test>
<ajc-test dir="new" pr="241"
      title="advice on default constructor for a class only referenced via reflection"
      keywords="from-resolved_10x">
        <compile files="OddConstructors.java"/>
        <run class="OddConstructors"/>
    </ajc-test>
<ajc-test dir="new" pr="289"
      title="calling and called this params in calls points"
      keywords="from-resolved_10x">
        <compile files="CallsParams.java"/>
        <run class="CallsParams"/>
    </ajc-test>
<ajc-test dir="new" pr="322"
      title="primitive parameters coercable to Object just like return values are"
      keywords="from-resolved_10x">
        <compile files="ObjectForInt.java"/>
        <run class="ObjectForInt"/>
    </ajc-test>
<ajc-test dir="new"
      title="Does the matrix coverage thing for the new method signatures"
      keywords="from-resolved_10x">
        <compile files="MethodSignatures.java" options="-1.4,-Xlint:ignore"/>
        <run class="MethodSignatures" vm="1.4"/>
    </ajc-test>
<ajc-test dir="new" title="correct types of parameters at call-sites"
      keywords="from-resolved_10x">
        <compile files="CallTypes.java" options="-1.4,-Xlint:ignore"/>
        <run class="CallTypes" vm="1.4"/>
    </ajc-test>
<ajc-test dir="new"
      title="Joinpoints are showing up on intermediate call sites"
      keywords="from-resolved_10x">
        <compile files="Counting1.java"/>
        <run class="Counting1"/>
    </ajc-test>
<ajc-test dir="new" title="Reception based on strictfp modifier"
      keywords="from-resolved_10x">
        <compile files="StrictFpReceptions.java"/>
        <run class="StrictFpReceptions"/>
    </ajc-test>
<ajc-test dir="new" pr="317"
      title="inheritance, around advice and abstract pointcuts [eachobject] (still)"
      keywords="from-resolved_10x">
        <compile files="OverridingPointcuts.java"/>
        <run class="OverridingPointcuts"/>
    </ajc-test>
<ajc-test dir="new/foemmel"
      title="Priviledged aspect methods are missing for privates. [eachobject]"
      keywords="from-resolved_10x">
        <compile files="TheAspect.java,TheObject.java">
        </compile>
        <run class="TheObject"/>
    </ajc-test>
<ajc-test dir="new"
      title="exceptions thrown and caught in advice, particularly try+proceed"
      keywords="from-resolved_10x">
        <compile files="TryAndProceed.java"/>
        <run class="TryAndProceed"/>
    </ajc-test>
<ajc-test dir="new"
      title="thisJoinPoint{Static} not visible in if() pcd of named pointcut"
      keywords="from-resolved_10x">
        <compile files="IfPCDExprJoinPointVisibleCE.java"/>
        <run class="IfPCDExprJoinPointVisibleCE"/>
    </ajc-test>
<ajc-test dir="new"
      title="pcd if() expression visibility at compile-time  (minimal operation)"
      keywords="from-resolved_10x">
        <compile files="IfPCDExprVisibility.java" options="-Xlint:ignore"/>
        <run class="IfPCDExprVisibility"/>
    </ajc-test>
<ajc-test dir="new/innerInterfaces" pr="494"
      title="private inner interfaces and bytecode visibility"
      keywords="from-resolved_10x">
        <compile files="p/Driver.java,p/InnerTest.java,other/Test.java"/>
        <run class="p.Driver"/>
    </ajc-test>
<ajc-test dir="new" pr="490"
      title="elaborated into testing of around on all join points"
      keywords="from-resolved_10x">
        <compile files="AroundAll.java"/>
        <run class="AroundAll"/>
    </ajc-test>
<ajc-test dir="new"
      title="type name hygiene when code comes from aspects in different packages"
      keywords="from-resolved_10x">
        <compile
          files="typeNameConflicts/Driver.java,typeNameConflicts/p1/C.java,typeNameConflicts/aspects/A.java"/>
        <run class="typeNameConflicts.Driver"/>
    </ajc-test>
<ajc-test dir="new"
      title="target type matching with messy interface hierarchies"
      keywords="from-resolved_10x">
        <compile files="CallTypesI.java" options="-1.4,-Xlint:ignore"/>
        <run class="CallTypesI" vm="1.4"/>
    </ajc-test>
<ajc-test dir="new"
      title="Unable to bind privately-introduced field name from introduced method in the same aspect"
      keywords="from-resolved_10x">
        <compile files="IntroducedFieldsNotBinding.java"/>
        <run class="IntroducedFieldsNotBinding"/>
    </ajc-test>
<ajc-test dir="new/anonInnerClass" pr="297"
      title="anonymous inner class with aspect" keywords="from-resolved_10x">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="new" pr="335"
      title="Arguments are not being passed in to calls advice"
      keywords="from-resolved_10x">
        <compile files="PR335.java"/>
        <run class="PR335"/>
    </ajc-test>
<ajc-test dir="design/intro" title="interfaces as mixins with introduction"
      keywords="from-resolved_10x">
        <compile files="Interfaces.java"/>
        <run class="Interfaces"/>
    </ajc-test>
<ajc-test dir="new"
      title="functional modifiers work correctly with introduced members"
      keywords="from-resolved_10x">
        <compile files="IntroducedModifiers.java"/>
        <run class="IntroducedModifiers"/>
    </ajc-test>
<ajc-test dir="new" pr="527"
      title="compile error using pcd if() with advice on introduced methods."
      keywords="from-resolved_10x">
        <compile files="PR527.java"/>
        <run class="PR527"/>
    </ajc-test>
<ajc-test dir="new" pr="528"
      title="compile errors boolean using cflow and unimplemented method using around advice on methods introduced by interface"
      keywords="from-resolved_10x">
        <compile files="PR528.java"/>
        <run class="PR528"/>
    </ajc-test>
<ajc-test dir="new" pr="535"
      title="missing method name to synthetic invocation"
      keywords="from-resolved_10x,new-messages-vary">
        <compile files="PR535.java"/>
        <run class="PR535"/>
    </ajc-test>
<ajc-test dir="new" pr="536"
      title="protected subclass impl of superclass method with default access and variants"
      keywords="from-resolved_10x">
        <compile files="RestrictingVisibilityCP.java"/>
        <run class="RestrictingVisibilityCP"/>
    </ajc-test>
<ajc-test dir="new" pr="519" title="Exception planning advice"
      keywords="from-resolved_10x">
        <compile files="PR519.java" options="-Xlint:ignore"/>
        <run class="PR519"/>
    </ajc-test>
<ajc-test dir="new" pr="494"
      title="introduced inner interfaces accessible inside aspect"
      keywords="from-resolved_10x">
        <compile files="IntroduceInnerInterfaceCP.java"/>
        <run class="IntroduceInnerInterfaceCP"/>
    </ajc-test>
<ajc-test dir="new" pr="525"
      title="validate (enclosing) join point and source locations"
      keywords="from-resolved_10x">
        <compile files="NegativeSourceLocation.java" options="-Xlint:ignore"/>
        <run class="NegativeSourceLocation"/>
    </ajc-test>
<ajc-test dir="new" pr="544"
      title="advice formals produce errors just like method formals"
      keywords="from-resolved_10x">
        <compile files="AdviceFormalsCf.java">
            <message kind="error" line="28"/>
            <message kind="error" line="29"/>
            <message kind="error" line="36"/>
            <message kind="error" line="37"/>
        </compile>
    </ajc-test>
<ajc-test dir="new"
      title="advice throws clauses must be compatible with joinpoints they apply to"
      keywords="from-resolved_10x">
        <compile files="AdviceThrowsCp.java"/>
        <run class="AdviceThrowsCp"/>
    </ajc-test>
<ajc-test dir="new" pr="570"
      title="illegal method conflicts with introductions and interfaces and PR#561"
      keywords="from-resolved_10x">
        <compile files="MethodConflictsCF.java">
            <message kind="error" line="8"/>
            <message kind="error" line="20"/>
            <message kind="error" line="28"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" title="AspectOf available for different aspect types"
      keywords="from-resolved_10x">
        <compile files="AspectOf.java"/>
        <run class="AspectOf"/>
    </ajc-test>
<ajc-test dir="new/privilegedAspects" pr="35593"
      title="access to all members of class and inner class from privileged aspect"
      keywords="from-resolved_10x">
        <compile
          files="driver/PrivilegedAspect.java,util/Util.java,pack/DefaultTarget.java,pack/PublicTarget.java"/>
        <run class="driver.PrivilegedAspect"/>
    </ajc-test>
<ajc-test dir="new"
      title="cflow alone with around produces compiler bcg StackOverflowError"
      keywords="from-resolved_10x">
        <compile files="CflowAlone.java"/>
        <run class="CflowAlone"/>
    </ajc-test>
<ajc-test dir="new/introTypeMissing"
      title="Introduced type unavailable to cast expressions in introduced methods"
      keywords="from-resolved_10x">
        <compile files="Cast.java,TargetClass.java,Util.java"/>
        <run class="Cast"/>
    </ajc-test>
<ajc-test dir="new/introTypeMissing"
      title="Introduced type unavailable to qualified new expressions in introduced methods"
      keywords="from-resolved_10x">
        <compile files="Inner.java,TargetClass.java,Util.java"/>
        <run class="Inner"/>
    </ajc-test>
<ajc-test dir="new/introTypeMissing"
      title="Introduced type unavailable to cast expressions in introduced field initializers"
      keywords="from-resolved_10x">
        <compile files="CastInFieldInit.java,TargetClass.java,Util.java"/>
        <run class="CastInFieldInit"/>
    </ajc-test>
<ajc-test dir="new/introTypeMissing"
      title="Introduced type unavailable to instanceof expressions in introduced methods"
      keywords="from-resolved_10x,knownLimitation">
        <compile files="InstanceOf.java,TargetClass.java,Util.java">
            <message kind="error" line="19"/>
            <message kind="error" line="20"/>
            <message kind="error" line="21"/>
            <message kind="error" line="22"/>
            <message kind="error" line="23"/>
            <message kind="error" line="24"/>
            <message kind="error" line="25"/>
            <message kind="error" line="26"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/introTypeMissing"
      title="Introduced type unavailable to qualified new expressions in introduced field initializers"
      keywords="from-resolved_10x">
        <compile files="InnerInFieldInit.java,TargetClass.java,Util.java"/>
        <run class="InnerInFieldInit"/>
    </ajc-test>
<ajc-test dir="new"
      title="enclosing join point not exported properly in pre-initialization join point"
      keywords="from-resolved_10x,knownLimitation">
        <compile files="PreInitialization.java"/>
        <run class="PreInitialization"/>
    </ajc-test>
<ajc-test dir="new" pr="590"
      title="after advice on static method with pcd if() using result"
      keywords="from-resolved_10x">
        <compile files="PR590.java">
            <message kind="error" line="20"/>
            <message kind="error" line="23"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="590"
      title="after advice on static method with pcd if() using result through pointcut"
      keywords="from-resolved_10x">
        <compile files="PR590a.java" options="-Xlint:ignore">
            <message kind="error" line="29"/>
            <message kind="error" line="31"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/PR600" pr="600"
      title="AbstractMethodError for introduced methods (order 1)"
      keywords="from-resolved_10x">
        <compile files="Main.java,My_error.java,A.java,B.java,C.java"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="new/PR600" pr="600"
      title="AbstractMethodError for introduced methods (order 2)"
      keywords="from-resolved_10x">
        <compile files="Main.java,My_error.java,C.java,A.java,B.java"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="new/PR600" pr="600"
      title="AbstractMethodError for introduced methods (order 3)"
      keywords="from-resolved_10x">
        <compile files="My_error.java,A.java,B.java,C.java,Main.java"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="new/PR600" pr="600"
      title="AbstractMethodError for introduced methods (order 4)"
      keywords="from-resolved_10x">
        <compile files="A.java,B.java,C.java,Main.java,My_error.java"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="new/PR600" pr="600"
      title="AbstractMethodError for introduced methods (order 5)"
      keywords="from-resolved_10x">
        <compile files="A.java,B.java,Main.java,C.java,My_error.java"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="new" title="declare error and abstract pointcuts"
      keywords="from-resolved_10x">
        <compile files="AbstractDeclare.java">
            <message kind="error" line="3"/>
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/runtime"
      title="Exercise runtime classes (optionally in 1.1 VM)"
      keywords="from-resolved_10x">
        <compile files="AllRuntime.java,TesterDriver.java"/>
        <run class="TesterDriver"/>
    </ajc-test>
<ajc-test dir="new"
      title="VerifyError after around advice falls off end of tryCatch"
      keywords="from-resolved_10x">
        <compile files="TryOffEnd.java">
            <message kind="warning" line="13"/>
            <message kind="warning" line="21"/>
        </compile>
        <run class="TryOffEnd"/>
    </ajc-test>
<ajc-test dir="new/subaspects" pr="647"
      title="aspect with private abstract pointcut" 
   keywords="from-resolved_10x,fail-unimplemented">
        <compile files="PrivatePointcutCE.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/subaspects" pr="647"
      title="concrete aspect unable to access abstract package-private pointcut in parent for overriding"
      keywords="from-resolved_10x"
       comment="XXX getting error - confirm line numbers">
        <compile files="parent/ParentCE.java,child/ChildCE.java">
            <message kind="error" file="child/ChildCE.java" line="21"/>
            <message kind="error" file="child/ChildCE.java" line="31"/>
            <message kind="error" file="parent/ParentCE.java" line="8"/>
            <message kind="error" file="parent/ParentCE.java" line="10"/>
            <message kind="error" file="parent/ParentCE.java" line="12"/>
            <message kind="error" file="parent/ParentCE.java" line="22"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/subaspects" pr="647"
      title="inner, outer, and outside-package subaspects of an aspect with abstract protected-, public-, and default-access pointcuts"
      keywords="from-resolved_10x">
        <compile
          files="parent/SubAspectVisibility.java,parent/ForeignChildHelper.java,child/ForeignChildAspect.java"/>
        <run class="parent.SubAspectVisibility"/>
    </ajc-test>
<ajc-test dir="new/subaspects" pr="647"
      title="inner subaspects of an aspect with private pointcut"
      keywords="from-resolved_10x">
        <compile files="parent/PrivatePointcut.java"/>
        <run class="parent.PrivatePointcut"/>
    </ajc-test>
<ajc-test dir="new/subaspects" pr="647"
      title="outer subaspects of an aspect with private pointcut"
      keywords="from-resolved_10x">
        <compile files="parent/PrivatePointcutOuterClass.java"/>
        <run class="parent.PrivatePointcutOuterClass"/>
    </ajc-test>
<ajc-test dir="new/subaspects" pr="647"
      title="abstract aspect used statically should not cause instantiation of advice or pointcut"
      keywords="from-resolved_10x">
        <compile files="AbstractAspectUsedStatically.java"/>
        <run class="AbstractAspectUsedStatically"/>
    </ajc-test>
<ajc-test dir="new"
      title="private inner interface accessible in scope when declared on outer class"
      keywords="from-resolved_10x">
        <compile files="DeclareAccess.java"/>
        <run class="DeclareAccess"/>
    </ajc-test>
<ajc-test dir="new"
      title="accessing protected superclass members in and outside CCC from body of method introduction"
      keywords="from-resolved_10x">
        <compile files="SuperInIntroduction.java"/>
        <run class="SuperInIntroduction"/>
    </ajc-test>
<ajc-test dir="new"
      title="accessing private superclass members from body of method introduction"
      keywords="from-resolved_10x">
        <compile files="SuperInIntroductionCE.java">
            <message kind="error" line="25"/>
            <message kind="error" line="26"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/aroundinner" pr="620"
      title="aroundInner 1 - around advice inner Thread subclass running proceed but not writing field"
      keywords="from-resolved_10x">
        <compile files="ThreadNoField.java,Common.java"/>
        <run class="ThreadNoField"/>
    </ajc-test>
<ajc-test dir="new/aroundinner" pr="620"
      title="aroundInner 2 - around advice inner Runnable running proceed and writing method-final proxy"
      keywords="from-resolved_10x">
        <compile files="Proxy.java,Common.java"/>
        <run class="Proxy"/>
    </ajc-test>
<ajc-test dir="new/aroundinner" pr="620"
      title="aroundInner 4 - around advice inner Thread subclass running proceed and writing field"
      keywords="from-resolved_10x">
        <compile files="ThreadSub.java,Common.java"/>
        <run class="ThreadSub"/>
    </ajc-test>
<ajc-test dir="new/aroundinner" pr="620"
      title="aroundInner 5 - around advice inner Runnable (subinterface) running proceed and writing field introduced on subinterface"
      keywords="from-resolved_10x">
        <compile files="RunnableSub.java,Common.java"/>
        <run class="RunnableSub"/>
    </ajc-test>
<ajc-test dir="new" pr="636"
      title="Named local class closing over proceed invocation"
      keywords="from-resolved_10x">
        <compile files="LocalClassClosingOverProceed.java"/>
        <run class="LocalClassClosingOverProceed"/>
    </ajc-test>
<ajc-test dir="new" pr="632"
      title="multi-dispatch implemented through around + args"
      keywords="from-resolved_10x">
        <compile files="MultiDispatchCp.java"/>
        <run class="MultiDispatchCp"/>
    </ajc-test>
<ajc-test dir="new"
      title="unreachable code generated by around advice on the execution of void methods"
      keywords="from-resolved_10x">
        <compile files="AroundVoid.java"/>
        <run class="AroundVoid"/>
    </ajc-test>
<ajc-test dir="new" pr="654"
      title="Overriding method implementations using introduction on interfaces"
      keywords="from-resolved_10x,fail-unimplemented">
        <compile files="IntroductionsOverriding.java" options="-Xlint:ignore" />
        <run class="IntroductionsOverriding"/>
    </ajc-test>
<ajc-test dir="new" pr="654"
      title="more coverage for around and concrete methods on interfaces"
      keywords="from-resolved_10x">
        <compile files="MultiAndAround.java" options="-Xlint:ignore"/>
        <run class="MultiAndAround"/>
    </ajc-test>
<ajc-test dir="new" title="invalid number and type of proceed arguments"
      keywords="from-resolved_10x">
        <compile files="InvalidProceedArgsCE.java">
            <message kind="error" line="10"/>
            <message kind="error" line="15"/>
            <message kind="error" line="17"/>
            <message kind="error" line="20"/>
            <message kind="error" line="22"/>
            <message kind="error" line="27"/>
            <message kind="error" line="29"/>
            <message kind="error" line="31"/>
            <message kind="error" line="37"/>
            <message kind="error" line="39"/>
            <message kind="error" line="43"/>
            <message kind="error" line="46"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="694" title="after returning advice param"
      keywords="from-resolved_10x">
        <compile files="AfterReturningParam.java"/>
        <run class="AfterReturningParam"/>
    </ajc-test>
<ajc-test dir="new" pr="695"
      title="! and declaring types with callee-side call join points"
      keywords="from-resolved_10x">
        <compile files="NotAndDeclaringTypes.java" options="-Xlint:ignore"/>
        <run class="NotAndDeclaringTypes"/>
    </ajc-test>
<ajc-test dir="new/privilegedAspects" pr="555"
      title="access to private members from privileged aspect"
      keywords="from-resolved_10rc3">
        <compile
          files="driver/PR555.java,util/Util.java,pack/DefaultTarget.java"/>
        <run class="driver.PR555"/>
    </ajc-test>
<ajc-test dir="new" pr="555"
      title="inner classes of privileged aspects cannot see target class private members"
      keywords="from-resolved_10rc3">
        <compile files="InnerClassInPrivilegedAspect.java"/>
        <run class="InnerClassInPrivilegedAspect"/>
    </ajc-test>
<ajc-test dir="new" pr="559"
      title="subclass advice not run for join points selected by superclass cflow-based pointcuts"
      keywords="from-resolved_10rc3">
        <compile files="PR559.java"/>
        <run class="PR559"/>
    </ajc-test>
<ajc-test dir="new" pr="559"
      title="more issues with abstract aspects and cflow pointcuts"
      keywords="from-resolved_10rc3,fail-unimplemented">
        <compile files="AbstractCflows.java"/>
        <run class="AbstractCflows"/>
    </ajc-test>
<ajc-test dir="new" pr="560"
      title="compile fails for aspect derived from percflow base aspect unless pointcut excludes base aspect and subaspects"
      keywords="from-resolved_10rc3">
        <compile files="PR560.java"/>
        <run class="PR560"/>
    </ajc-test>
<ajc-test dir="new" pr="568" title="cyclic pointcut definitions"
      keywords="from-resolved_10rc3,knownLimitation">
        <compile files="CyclicPointcuts.java">
            <message kind="error" line="11"/>
            <message kind="error" line="14"/>
            <message kind="error" line="18"/>
            <message kind="error" line="32"/>
            <message kind="error" line="43"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="573"
      title="pertarget stack overflow getting name of anonymous (Interface) class"
      keywords="from-resolved_10rc3">
        <compile files="PR573.java"/>
        <run class="PR573"/>
    </ajc-test>
<ajc-test dir="new" pr="691" title="around AST type XXX"
      keywords="from-resolved_104">
        <compile files="PR691.java"/>
        <run class="PR691"/>
    </ajc-test>
<ajc-test dir="new" pr="687"
      title="around all execution with double assignment in initializer (simple)"
      keywords="from-resolved_104">
        <compile files="AroundDoubleAssignment.java"/>
        <run class="AroundDoubleAssignment"/>
    </ajc-test>
<ajc-test dir="new" pr="687"
      title="around all execution with double assignment in initializer (coverage)"
      keywords="from-resolved_104">
        <compile files="AroundDoubleAssignmentC.java"/>
        <run class="AroundDoubleAssignmentC"/>
    </ajc-test>
<ajc-test dir="new"
      title="changing this in around's proceed reported by Rich Price"
      keywords="from-resolved_104">
        <compile files="AroundChangeThis.java" options="-1.4"/>
        <run class="AroundChangeThis"/>
    </ajc-test>
<ajc-test dir="new" pr="548"
      title="default package for aspect introductions is not the current package"
      keywords="from-resolved_10rc3,from-resolved_104">
        <compile
          files="introductionPackage/two/C.java,introductionPackage/one/C.java,introductionPackage/one/Aspect.java,introductionPackage/one/TestAspect.java"/>
        <run class="one.TestAspect"/>
    </ajc-test>
<ajc-test dir="new" pr="619"
      title="direct use outside aspect of undefined abstract pointcut"
      keywords="from-resolved_104">
        <compile files="AbstractPointcutAccessCE.java">
            <message kind="error" line="9"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="619"
      title="indirect use outside aspect of undefined abstract pointcut"
      keywords="from-resolved_104">
        <compile files="AbstractPointcutIndirectCE.java">
            <message kind="error" line="9"/>
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="666" title="name binding in around cflow"
      keywords="from-resolved_104">
        <compile files="AroundCall.java"/>
        <run class="AroundCall"/>
    </ajc-test>
<ajc-test dir="new" pr="660" title="name binding in around cflow - 2"
      keywords="from-resolved_104">
        <compile files="ArgsInCflow2.java"/>
        <run class="ArgsInCflow2"/>
    </ajc-test>
<ajc-test dir="new" pr="677"
      title="around name-binding in cflows using factorial"
      keywords="from-resolved_104">
        <compile files="FactorialCflow.java"/>
        <run class="FactorialCflow"/>
    </ajc-test>
<ajc-test dir="new" pr="715" title="incrementing objects, arrays - 2"
      keywords="from-resolved_104,purejava">
        <compile files="ArrayInc2CE.java">
            <message kind="error" line="12"/>
            <message kind="error" line="13"/>
            <message kind="error" line="14"/>
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="715" title="incrementing objects, arrays CE"
      keywords="from-resolved_104,purejava,messages-vary">
        <compile files="ArrayIncCE.java"
               options="!eclipse">
            <message kind="error" line="15"/>
            <message kind="error" line="16"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="715" title="incrementing objects, arrays - 3"
      keywords="from-resolved_104,purejava">
        <compile files="ArrayInc3CE.java">
            <message kind="error" line="15"/>
            <message kind="error" line="16"/>
            <message kind="error" line="17"/>
            <message kind="error" line="18"/>
            <message kind="error" line="19"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" title="replacing this or target in around advice"
      keywords="from-resolved_104">
        <compile files="TargetObjectReplacement.java"/>
        <run class="TargetObjectReplacement"/>
    </ajc-test>
<ajc-test dir="new"
      title="after returning from initialization and after executing constructor"
      keywords="from-resolved_104">
        <compile files="ConstructorExecInit.java"/>
        <run class="ConstructorExecInit"/>
    </ajc-test>
<ajc-test dir="new"
      title="after returning from initialization causes ExceptionInInitializer in aspect">
        <compile files="ConstructorExecInitFails.java"/>
        <run class="ConstructorExecInitFails"/>
    </ajc-test>
<ajc-test dir="new" pr="659"
      title="name binding in before cflow containing cflowbelow"
      keywords="from-resolved_104">
        <compile files="ArgsInCflow.java" options="!eclipse">
            <message kind="error" line="29"/>
            <message kind="error" line="32"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" pr="737"
      title="should have circular inheritance errors (1)"
      keywords="from-resolved_105,purejava,messages-vary">
        <compile files="circle/Test1CF.java"
               options="!eclipse">
            <message kind="error" line="7"/>
            <message kind="error" line="15"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" pr="737"
      title="should have circular inheritance errors (2)"
      keywords="from-resolved_105,purejava,messages-vary">
        <compile files="circle/Test2CF.java"
               options="!eclipse">
            <message kind="error" line="6"/>
            <message kind="error" line="10"/>
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/pr728" pr="728" title="file order in type searching"
      keywords="from-resolved_105">
        <compile files="AnotherClass.java,Interface.java"/>
        <run class="AnotherClass"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="728"
      title="interface using preceding subinterface in its definition"
      keywords="from-resolved_105,purejava">
        <compile files="ParentUsingChild.java"/>
        <run class="ParentUsingChild"/>
    </ajc-test>
<ajc-test dir="new" pr="645"
      title="Parent interface using public inner interface of child in same file"
      keywords="from-resolved_105,purejava">
        <compile files="ParentInterfaceUsingChildInnerInterface.java"/>
        <run class="ParentInterfaceUsingChildInnerInterface"/>
    </ajc-test>
<ajc-test dir="errors"
      title="a type is not allowed to extend or implement its own innner type"
      keywords="from-resolved_105,purejava">
        <compile files="NestedInterfaceTest.java">
            <message kind="error" line="1"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" pr="739"
      title="local variables must be final to be accessed from inner class"
      keywords="from-resolved_105,purejava">
        <compile files="LocalsFromInnerCE.java">
            <message kind="error" line="6"/>
            <message kind="error" line="13"/>
            <message kind="error" line="19"/>
            <message kind="error" line="25"/>
            <message kind="error" line="32"/>
            <message kind="error" line="40"/>
            <message kind="error" line="51"/>
            <message kind="error" line="61"/>
            <message kind="error" line="67"/>
            <message kind="error" line="75"/>
            <message kind="error" line="81"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" pr="721"
      title="interface declaration not permitted in local method scope"
      keywords="from-resolved_105">
        <compile files="LocalInterfaceCE.java">
            <message kind="error" line="5"/>
            <message kind="error" line="8"/>
            <message kind="error" line="11"/>
            <message kind="error" line="15"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" title="simple declare warning (NPE)"
      keywords="from-resolved_105">
        <compile files="DeclareWarningMain.java">
            <message kind="warning" line="5"/>
        </compile>
        <run class="DeclareWarningMain"/>
    </ajc-test>
<ajc-test dir="new"
      title="package typepattern with no packages (in default package)"
      keywords="from-resolved_105,knownLimitation">
        <compile options="-Xlint" files="TypeNames.java">
            <message kind="warning" line="34"/>
            <message kind="warning" line="39"/>
            <message kind="warning" line="43"/>
            <message kind="warning" line="47"/>
        </compile>
        <run class="TypeNames"/>
    </ajc-test>
<ajc-test dir="new" pr="701"
      title="CE for ambiguous type reference (two files in package)"
      keywords="from-resolved_105,purejava">
        <compile
          files="ambiguousClass/AmbiguousReferent.java,ambiguousClass/AmbiguousClassReference.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>
<ajc-test dir="new"
      title="initializer can throw so long as all constructors declare so"
      keywords="from-resolved_105,purejava">
        <compile files="InitializerWithThrow.java"/>
        <run class="InitializerWithThrow"/>
    </ajc-test>
<ajc-test dir="pureJava"
      title="interfaces may not contain initializers (bug found by jacks)"
      keywords="from-resolved_105,purejava">
        <compile files="InterfaceMembersCf.java">
            <message kind="error" line="2"/>
            <message kind="error" line="3"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava"
      title="initializers must be able to complete normally (found by jacks)"
      keywords="from-resolved_105,purejava,messages-vary">
        <compile files="InitializerFlowCf.java"
               options="!eclipse">
            <message kind="error" line="2"/>
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="757" title="Incrementing interface-introduced field"
      keywords="from-resolved_105">
        <compile files="IntroducedFieldInc.java"/>
        <run class="IntroducedFieldInc"/>
    </ajc-test>
<ajc-test dir="pureJava" title="more tests of super alone"
      keywords="from-resolved_105,purejava">
        <compile files="SuperIsWeird.java">
            <message kind="error" line="9"/>
            <message kind="error" line="13"/>
            <message kind="error" line="20"/>
            <message kind="error" line="21"/>
        </compile>
    </ajc-test>
<ajc-test dir="new"
      title="The dynamic type, not the static one, should be used in if pcds"
      keywords="from-resolved_105">
        <compile files="StaticTypeInIf.java"/>
        <run class="StaticTypeInIf"/>
    </ajc-test>
<ajc-test dir="new"
      title="bad interaction with after returning, around and void methods (from Rich Price)"
      keywords="from-resolved_105">
        <compile files="AfterReturningResult.java"/>
        <run class="AfterReturningResult"/>
    </ajc-test>
<ajc-test dir="new"
      title="type pattern matching for inner classes (from Ken Horn)"
      keywords="from-resolved_105">
        <compile files="TypePat.java"/>
        <run class="test.TypePat"/>
    </ajc-test>
<ajc-test dir="new" pr="764"
      title="binding args with indeterminate prefix and suffix"
      keywords="from-resolved_105">
        <compile files="IndeterminateArgs.java"/>
        <run class="IndeterminateArgs"/>
    </ajc-test>
<ajc-test dir="new" pr="764"
      title="flag errors when binding args with indeterminate prefix and suffix"
      keywords="from-resolved_105,knownLimitation">
        <compile files="IndeterminateArgsCE.java">
            <message kind="error" line="67"/>
            <message kind="error" line="68"/>
            <message kind="error" line="70"/>
            <message kind="error" line="72"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="764"
      title="check arg types with indeterminate prefix and suffix"
      keywords="from-resolved_105">
        <compile files="IndeterminateArgType.java"/>
        <run class="IndeterminateArgType"/>
    </ajc-test>
<ajc-test dir="new" pr="764"
      title="binding handler args with indeterminate prefix and suffix"
      keywords="from-resolved_105">
        <compile files="IndeterminateHandlerArg.java"/>
        <run class="IndeterminateHandlerArg"/>
    </ajc-test>
<ajc-test dir="new/nolang" pr="762"
	  title="Compiling java.lang.Object with ajc yields non-verifying bytecode"
	  keywords="from-resolved_105"
	   comment="XXX weak/bad test">
	    <compile files="java/lang/Object.java,java/lang/String.java">
	    </compile>
	</ajc-test>
<ajc-test dir="new" title="CE expected for assignment to arg in if pcd"
      keywords="from-resolved_105">
        <compile files="IfPCDAssignmentCE.java">
            <message kind="error" line="16"/>
            <message kind="error" line="20"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="853"
      title="declare interface extends class">
        <compile files="DeclareInterfaceExtendsClass.java">
           <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="assert flow"
      keywords="from-14tests,purejava">
        <compile options="-source,1.4" files="AssertsCF.java">
            <message kind="error" line="8"/>
            <message kind="error" line="11"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="assert flow - 2"
      keywords="from-14tests,purejava">
        <compile options="-source,1.4" files="AssertsCF2.java">
            <message kind="error" line="6"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="assert typing"
      keywords="from-14tests,purejava,fail-publicType">
        <compile options="-source,1.4" files="AssertsCF1.java">
            <message kind="error" line="5"/>
        </compile>
    </ajc-test>
<ajc-test dir="pureJava" title="asserts" keywords="from-14tests">
        <compile options="-source,1.4" files="Asserts.java"/>
        <run class="Asserts" vm="1.4"/>
    </ajc-test>
<ajc-test dir="pureJava" title="assert coverage tests [requires 1.4]"
      keywords="from-14tests,purejava">
        <compile options="-source,1.4" files="AssertsCv.java"/>
        <run class="AssertsCv" vm="1.4"/>
    </ajc-test>
<ajc-test dir="pureJava"
      title="assert coverage tests in one package [requires 1.4]"
      keywords="from-14tests,purejava,fail-unimplemented">
        <compile options="-source,1.4" files="AssertInOnePackage.java"/>
        <run class="AssertInOnePackage" vm="1.4"/>
    </ajc-test>
<ajc-test dir="new" title="assert tests in introduction [requires 1.4]"
      keywords="from-14tests,fail-unimplemented">
        <compile options="-source,1.4" files="AssertInIntro.java"/>
        <run class="AssertInIntro" vm="1.4"/>
    </ajc-test>
<ajc-test dir="new" pr="134"
      title="import of a class in the default package"
      keywords="from-broken14usejavac,purejava">
        <compile files="ImportFromUnnamed.java,DeclaredExcs.java"/>
        <run class="ImportFromUnnamed"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="386"
      title="Referencing static interfaces with import statements"
      keywords="from-broken14usejavac,purejava">
        <compile files="ClassWithStaticInnerInterfaces.java"/>
        <compile files="ImportingStaticInnerInterfaces_PR386.java"/>
        <run class="ImportingStaticInnerInterfaces_PR386"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="386"
      title="Referencing static interfaces with import statements stars"
      keywords="purejava,from-broken14usejavac">
        <compile files="ClassWithStaticInnerInterfaces.java"/>
        <compile files="ImportingStaticInnerInterfacesStars_PR386.java"/>
        <run class="ImportingStaticInnerInterfacesStars_PR386"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="386"
      title="Referencing static interfaces with import statements stars 2"
      keywords="purejava,from-broken14usejavac">
        <compile files="ClassWithStaticInnerInterfaces.java"/>
        <compile files="ImportingStaticInnerInterfacesStars2_PR386.java"/>
        <run class="ImportingStaticInnerInterfacesStars2_PR386"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="386"
      title="Referencing static interfaces with import statements stars 3"
      keywords="purejava,from-broken14usejavac">
        <compile files="ClassWithStaticInnerInterfaces.java"/>
        <compile files="ImportingStaticInnerInterfacesStars3_PR386.java"/>
        <run class="ImportingStaticInnerInterfacesStars3_PR386"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="386"
      title="Referencing interfaces with import statements"
      keywords="purejava,from-broken14usejavac">
        <compile
          files="ClassWithInnerInterfaces.java,ImportingInnerInterfaces_PR386.java"/>
        <run class="ImportingInnerInterfaces_PR386"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="386"
      title="Referencing interfaces with import statements stars"
      keywords="purejava,from-broken14usejavac">
        <compile
          files="ClassWithInnerInterfaces.java,ImportingInnerInterfacesStars_PR386.java"/>
        <run class="ImportingInnerInterfacesStars_PR386"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="386"
      title="Referencing interfaces with import statements stars 2"
      keywords="purejava,from-broken14usejavac">
        <compile
          files="ClassWithInnerInterfaces.java,ImportingInnerInterfacesStars2_PR386.java"/>
        <run class="ImportingInnerInterfacesStars2_PR386"/>
    </ajc-test>
<ajc-test dir="pureJava" pr="386"
      title="Referencing interfaces with import statements stars 3"
      keywords="purejava,from-broken14usejavac">
        <compile
          files="ClassWithInnerInterfaces.java,ImportingInnerInterfacesStars3_PR386.java"/>
        <run class="ImportingInnerInterfacesStars3_PR386"/>
    </ajc-test>
<ajc-test dir="new" pr="657"
      title="assert statement in advice coverage [requires 1.4]"
      keywords="from-14tests,fail-in-eclipse">
        <compile options="-source,1.4" files="AssertInAdvice.java"/>
        <run class="AssertInAdvice" vm="1.4"/>
    </ajc-test>
<ajc-test dir="new" pr="657"
      title="assert statement in advice  [requires 1.4]" 
   keywords="from-14tests,fail-in-eclipse">
        <compile options="-source,1.4" files="AssertInAdviceBug.java"/>
        <run class="AssertInAdviceBug" vm="1.4"/>
    </ajc-test>
<ajc-test dir="new" pr="823"
      title="declaring a private method on an inner interface"
      keywords="tofix">
        <compile files="PrivateMethodOnInnerInterface.java"/>
        <run class="PrivateMethodOnInnerInterface"/>
    </ajc-test>
<ajc-test dir="new" pr="885" keywords="knownLimitation"
      comment="this behaves differently in 1.3 from 1.4 for unknown reasons, merge with above when resolved"
      title="source locations within expressions (hard case of constructor start)">
        <compile files="SourceLocationWithinExprHard.java"/>
        <run class="SourceLocationWithinExprHard"/>
    </ajc-test>
<ajc-test dir="new" pr="889"
      title="after returning advice on interface constructor">
        <compile files="AfterReturningInterfaceConstructor.java"/>
        <run class="AfterReturningInterfaceConstructor"/>
    </ajc-test>
<ajc-test dir="options/deprecated" 
      title="options -warn:deprecation">
        <compile files="WarnDeprecated.java,OldStuff.java"
        	options="!eclipse,-warn:deprecation">
            <message kind="warning" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="options" 
      title="options -Xlint args()" 
      keywords="lint">
        <compile files="XLintTypeArgsPCD.java"
             options="!Xlint">
            <message kind="warning" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="options" 
      title="options -Xlint declare parent" 
      keywords="lint">
        <compile files="XLintTypeDeclareParent.java"
        	options="!Xlint">
            <message kind="warning" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="options" 
      title="options -Xlint target()" 
      keywords="lint">
        <compile files="XLintTypeTargetPCD.java"
        	options="!Xlint">
            <message kind="warning" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="options" 
      title="options -Xlint this()" 
      keywords="lint">
        <compile files="XLintTypeThisPCD.java"
        	options="!Xlint">
            <message kind="warning" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="options/injars/simple" 
      title="options -injars">
        <compile files="Simple.java,main.jar"
        	options="!eclipse"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="new" pr="776"
      title="self-reference from (aspect-declared) method-local class">
        <compile files="MethodSelfReference.java"/>
        <run class="MethodSelfReference"/>
    </ajc-test>
<ajc-test dir="new" title="expect CE for unterminated declare error">
        <compile files="UnterminatedDeclareErrorCE.java">
            <message kind="error" line="4"/>
        </compile>
    </ajc-test>
<ajc-test dir="new"
      title="expect CE for declaration collision between subaspects instead of domination order">
        <compile files="DeclarationCollisionCE.java">
            <message kind="error" line="10"/>
            <message kind="error" line="20"/>
            <message kind="error" line="27"/>
        </compile>
    </ajc-test>
<ajc-test dir="new"
      title="subtype pattern in dominates will conflict with type pattern">
        <compile files="DominatesTypePatternCE.java">
        	<message kind="error" line="15"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="827"
      title="after returning advice on interface and implementation constructor"
      keywords="tofix">
        <compile files="AfterReturningConstructor.java"/>
        <run class="AfterReturningConstructor"/>
    </ajc-test>
<ajc-test dir="new" pr="851"
      title="prohibit declaring new aspect constructor with arguments">
        <compile files="DeclareAspectConstructorCE.java">
          <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="851"
      title="prohibit declaring only aspect constructor with arguments">
        <compile files="DeclareOnlyAspectConstructorCE.java">
          <message kind="error" line="10"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="853"
      title="declare class extends interface">
        <compile files="DeclareClassExtendsInterface.java">
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="853"
      title="declare class implements class">
        <compile files="DeclareClassImplementsClass.java">
        </compile>
    </ajc-test>
<ajc-test dir="new"
      title="if and cflow arg binding">
        <compile files="CflowBinding.java">
          <message kind="error" line="13"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="28703" title="assert and pertarget crashes compiler">
        <compile files="EnsureOverriding.java" options="-source,1.4"/>
        <run class="EnsureOverriding" vm="1.4"/>
    </ajc-test>
<ajc-test dir="bugs" pr="28921"
      title="Verify error on non-Throwable in declare soft">
        <compile files="DeclareSoftCf.java" options="-Xlint:warning">
		  <message kind="warning" line="28"/>
		  <message kind="error" line="29"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="29113" title="inter-type fields with array types">
        <compile files="InterFieldArrays.java"/>
        <run class="InterFieldArrays"/>
    </ajc-test>
<ajc-test dir="new"
      title="unmatched type name in a declare parents should result in a warning in -Xlint mode"
      keywords="tofix">
        <compile options="-Xlint" files="MissingTypeInDeclareParents.java">
            <message kind="warning" line="20"/>
        </compile>
        <run class="MissingTypeInDeclareParents"/>
    </ajc-test>
<ajc-test dir="new" pr="838"
      title="checking around join point for advice return type - numeric">
        <compile files="AroundNumericCastCE.java">
            <message kind="error" line="12"/>
            <message kind="error" line="17"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="836" title="void around advice without proceed">
        <compile files="VoidAround.java">
            <message kind="error" line="11"/>
            <message kind="error" line="29"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/PR852" pr="852"
      title="declaring method on superclass and subclass"
      keywords="knownLimitation">
        <compile files="aspect/Aspect.java,target/SubClass.java,target/SuperClass.java">
          <dir-changes added="target.SubClass,target.SuperClass"/>
        </compile>
        <run class="aspect.Aspect"/>
    </ajc-test>
<ajc-test dir="bugs" pr="906"
      title="privileged access to code outside the control of the compiler">
        <compile files="PrivilegeBeyondScope.java" options="-Xlint:warning">
		  <message kind="warning" line="23"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/PR862" pr="862"
      title="import any inner from interface implementor"
      keywords="purejava">
        <compile files="pack/ImportInnerFromInterfaceImplementor.java">
          <dir-changes added="pack.ImportInnerFromInterfaceImplementor"/>
        </compile>
        <run class="pack.ImportInnerFromInterfaceImplementor"/>
    </ajc-test>
<ajc-test dir="bugs" pr="29689"
    		title="Declare precedence should not allow multiple * patterns">
        <compile files="CircularPrecedence.java">
            <message kind="error" line="14"/> 
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="29662"
    		title="VerifyError on accessing objects not accessible to the weaver">
        <compile files="AroundAccess.java">
        </compile>
        <run class="AroundAccess"/>
    </ajc-test>
<ajc-test dir="bugs" pr="29959"
            title="super call in intertype method declaration body causes VerifyError">
        <compile files="SuperToIntro.java"/>
        <run class="SuperToIntro"/>
    </ajc-test>
<ajc-test dir="bugs" pr="30026" 
    		title="problems with finalize call">
        <compile files="Finalizer.java">
            <message kind="error" line="22"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="33635" 
    		title="Negation of if pointcut does not work">
        <compile files="NotIf.java"/>
        <run class="NotIf"/>
    </ajc-test>
<ajc-test dir="bugs/interfaceNames" pr="32421" 
    		title="can't resolve nested public interfaces (also PR#32399)">
        <compile files="TransactionTest.java,sub/ExecutionMonitor.java,sub/ObserverProtocol.aj"/>
        <run class="TransactionTest"/>
    </ajc-test>
<ajc-test dir="new/declare" pr="31724"
            title="omnibus declare warning context with no initializer/constructor">
        <compile files="DeclareWarningEmpty.java">
            <message kind="warning" line="3" text="2 - initialization(DeclareWarningEmpty)"/>
            <message kind="warning" line="3" text="1 - staticinitialization(DeclareWarningEmpty)"/>
        </compile>
    </ajc-test>
<ajc-test dir="new/declare" pr="31724"
            title="omnibus declare warning context">
        <compile files="DeclareWarning.java">
            <message kind="warning" line="5" text="staticinitialization(DeclareWarning)"/>
            <message kind="warning" line="12" text="call(DeclareWarning.new())"/>
            <message kind="warning" line="13" text="get staticInt"/>
            <message kind="warning" line="14" text="get instanceInt"/>
            <message kind="warning" line="15" text="set staticInt"/>
            <message kind="warning" line="16" text="set instanceInt"/>
            <message kind="warning" line="17" text="call(void run())"/>
            <message kind="warning" line="18" text="call(void irun())"/>
            <message kind="warning" line="21" text="execution(void run())"/>
            <message kind="warning" line="22" text="execution(void irun())"/>
            <message kind="warning" line="23" text="execution(DeclareWarning.new())"/>
            <message kind="warning" line="23" text="initialization(DeclareWarning)"/>
            <message kind="warning" line="33" text="handler(OutOfMemoryError) &amp;&amp; within(DeclareWarning)"/>
            <message kind="warning" line="36" text="handler(Error)"/>
            <message kind="warning" line="39" text="handler(RuntimeException) &amp;&amp; withincode(DeclareWarning.new())"/>
            <message kind="warning" line="74" text="adviceExecution() &amp;&amp; within(A)"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="29934"
      title="can't apply around advice to the execution of around advice"
      keywords="from-resolved_10x">
        <compile files="CflowCycles.java"/>
        <run class="CflowCycles"/>
    </ajc-test>
<ajc-test dir="new"
      title="incompatible advice throws clause are a compile-time error"
      keywords="from-resolved_10x">
        <compile files="AdviceThrowsCf.java">
            <message kind="error" line="13"/>
            <message kind="error" line="28"/>
            <message kind="error" line="47"/>
            <message kind="error" line="48"/>
            <message kind="error" line="50"/>
            
            <message kind="error" line="70"/>
            <message kind="error" line="74"/>
            <message kind="error" line="76"/>
            <message kind="error" line="78"/>
            
            <message kind="error" line="85"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="34858"
      title="cflow binding issues with ignoring state">
        <compile files="CflowBinding.java"/>
        <run class="CflowBinding"/>
    </ajc-test>
<ajc-test dir="bugs" pr="34858"
      title="cflow binding -- original weaver crash">
        <compile files="CflowBindingOrig.java"/>
        <run class="CflowBindingOrig"/>
    </ajc-test>
<ajc-test dir="errors"  keywords="error"
    		title="class extending abstract aspect">
        <compile files="ClassExtendingAbstractAspectCE.java">
			<message kind="error" line="20"/>
        </compile>
    </ajc-test>
<ajc-test dir="new" pr="660" title="illegal name binding in around cflow"
      keywords="from-resolved_104,knownLimitation">
        <compile files="ArgsInCflowCf.java">
            <message kind="error" line="19"/>
            <message kind="error" line="29"/>
            <message kind="error" line="35"/>
        </compile>
    </ajc-test>
<ajc-test dir="incremental/stringliteral"   
    	keywords="knownLimitation"
    	title="incrementally change string size and wire in injar classes">
        <compile staging="true" options="-incremental" 
        	files="oneInjar.jar,twoInjar.jar"
        	sourceroots="src"/>
		<run class="packageOne.Main"
			options="in packageOne.Main.main(..),
					 before main packageOne.Main"/>
        <inc-compile tag="20">
        	<dir-changes updated="packageOne.Main"/>
        </inc-compile>
        
		<run class="packageOne.Main"
			options="in longer packageOne.Main.main(..),
					 before main packageOne.Main"/>
        <inc-compile tag="30">
        	<dir-changes added="RunInjarMains"/>
        </inc-compile>
		<run class="packageOne.Main"
			options="in longer packageOne.Main.main(..),
					 before main InjarOneMain,
					 before main InjarTwoMain,
					 before main packageOne.Main"/>
    </ajc-test>
<ajc-test dir="bugs" pr="34206" 
    	keywords="knownLimitation"
    	title="before():execution(new(..)) does not throw NoAspectBoundException"
    	comment="correct behavior of this case needs to be thought through">
        <compile files="AspectInitError.java"/>
        <run class="AspectInitError"/>
    </ajc-test>
<ajc-test dir="bugs" pr="34925"
      title="declare soft and throw statements">
        <compile files="ConvertToUnchecked.java"/>
        <run class="ConvertToUnchecked"/>
    </ajc-test>
<ajc-test dir="bugs/interAbstract"
      title="inter-type declaration bug with abstract classes"
      pr="36046">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="new/declareParents"
      title="Declare parents with intermediate ancestor"
      keywords="from-new">
        <compile files="Driver.java"/>
        <run class="Driver"/>
    </ajc-test>
<ajc-test dir="new/declareParents" 
      title="Declare parents removing ancestor"
      keywords="from-new">
        <compile files="IllegalAdoption.java">
            <message kind="error" line="13"/>
        </compile>
    </ajc-test>
<ajc-test dir="options/injars/simple"  pr="35865"
      title="options -injars checking declare parents interactions">
        <compile files="DecParents.java,main.jar"
        	options="!eclipse"/>
        <run class="DecParents"/>
    </ajc-test>
<ajc-test dir="bugs/interSpecials" title="IllegalAccessError while accessing introduced variable / 1.1rc1"
      pr="36110">
        <compile files="p1/C.java,p2/A1.java"/>
        <run class="p2.A1"/>
    </ajc-test>
<ajc-test dir="bugs/interSpecials" title="testing that assert works like .class"
      pr="36110">
        <compile files="p1/C.java,p2/A2.java" options="-source,1.4"/>
        <run class="p2.A2" vm="1.4"/>
    </ajc-test>
<ajc-test dir="new/verifyError" pr="36673"
      title="privileged aspect main verify error">
        <compile files="Privilege.java"/>
        <run class="Privilege"/>
    </ajc-test>
<ajc-test dir="bugs" pr="36564"
      title="Internal compiler error with thisJoinPoint.getStaticPart()">
        <compile files="tjpStaticPart/Test.java,tjpStaticPart/Exceptions.java"/>
        <run class="tjpStaticPart.Test"/>
    </ajc-test>
<ajc-test dir="bugs/messyAround" pr="36056"
      title="Ajc 1.1 rc1 java.lang.VerifyError with messy arounds">
        <compile files="aspects/Trace.aj,cap/OptionList.java,DebugTrace.aj">
            <message kind="warning" line="102"/>
        	<message kind="warning" line="124"/>
        	<message kind="warning" line="138"/>
        </compile>
        <run class="cap.OptionList"/>
    </ajc-test>
<ajc-test dir="new"
      title="try/finally in around advice (same as ...messy arounds?)">
        <compile files="TryFinallyInAround.java"/>
        <run class="TryFinallyInAround"/>
    </ajc-test>
<ajc-test dir="new" pr="36778"
      title="advise join points in subclass of empty interface">
        <compile files="EmptyInterface.java"/>
        <run class="EmptyInterface"/>
    </ajc-test>
<ajc-test dir="new" pr="36778"
      title="can't put around advice on interface static initializer"
      comment="this tests for a nice message given a compiler limitation">
        <compile files="EmptyInterfaceCE.java">
        	<message kind="error" line="20"/>
        	<message kind="error" line="23"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="36803"
      title="cflow concretization causing assertion failure">
        <compile files="CflowConcrete.java"/>
        <run class="CflowConcrete"/>
    </ajc-test>
<ajc-test dir="new/options11"  pr="36329"
   	  comment="the line number might change, we're really interested only in the files here"
      title="The compiler crashes when using aspect libraries created without using -noweave">
        <compile files="Main.java,injar.jar,Aspect.java,aspectlib1.jar,aspectlib2.jar">
            <message kind="error" line="0"/>
        </compile>
   </ajc-test>
<ajc-test dir="new"
      comment="this is a pureJava test, but we always want to run it"
      title="arrays via Class.forName()">
        <compile files="ClassForName.java"/>
        <run class="ClassForName"/>
    </ajc-test>
<ajc-test dir="new/binaryWarnings/src" pr="37020"
   	 title="declare warnings on main">
        <compile files="aspects/MainWarnings.java,app/Main.java">
        	<message line="6"  text="staticinitialization(Main)" kind="warning" file="app/Main.java" />
        	<message line="6"  text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="8"  text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="12" text="get(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="14" text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="16" text="call(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="19" text="call(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="23" text="initialization(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="23" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="23" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="26" text="execution(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="29" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="31" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="32" text="D.go withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="33" text="handler(RuntimeException)" kind="warning" file="app/Main.java" />
        	<message line="35" text="withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="42" text="withincode(void Main.stop())" kind="warning" file="app/Main.java" />
        	<message line="50" text="preinitialization(app.C.new())" kind="warning" file="app/Main.java" />
        </compile>
        <run class="app.Main"/>
    </ajc-test>
<ajc-test dir="new/binaryWarnings/src"  pr="37020"
   	title="declare warnings on binary javac 1.4 classes">
        <compile files="aspects/MainWarnings.java,../injars/app-javac-1.4.jar">
        	<message line="6"  text="staticinitialization(Main)" kind="warning" file="app/Main.java" />
        	<message line="6"  text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="8"  text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="12" text="get(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="14" text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="16" text="call(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="19" text="call(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="23" text="initialization(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="23" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="23" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="26" text="execution(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="29" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="31" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="32" text="D.go withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="33" text="handler(RuntimeException)" kind="warning" file="app/Main.java" />
        	<message line="35" text="withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="42" text="withincode(void Main.stop())" kind="warning" file="app/Main.java" />
        	<message line="50" text="preinitialization(app.C.new())" kind="warning" file="app/Main.java" />
        </compile>
        <run class="app.Main"/>
    </ajc-test>
<ajc-test dir="new/binaryWarnings/src" pr="37023"
   	title="declare warnings on binary ajc 1.1 classes">
        <compile files="aspects/MainWarnings.java,../injars/app-ajc-1.1.jar">
        	<message line="6"  text="staticinitialization(Main)" kind="warning" file="app/Main.java" />
        	<message line="6"  text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="8"  text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="12" text="get(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="14" text="set(String Main.staticString)" kind="warning" file="app/Main.java" />
        	<message line="16" text="call(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="19" text="call(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="23" text="initialization(Main.new())" kind="warning" file="app/Main.java" />
        	<message line="23" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="23" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="26" text="execution(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="29" text="get(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="31" text="set(String Main.s)" kind="warning" file="app/Main.java" />
        	<message line="32" text="D.go withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="33" text="handler(RuntimeException)" kind="warning" file="app/Main.java" />
        	<message line="35" text="withincode(void Main.go(String))" kind="warning" file="app/Main.java" />
        	<message line="42" text="withincode(void Main.stop())" kind="warning" file="app/Main.java" />
        	<message line="50" text="preinitialization(app.C.new())" kind="warning" file="app/Main.java" />
        </compile>
        <run class="app.Main"/>
	</ajc-test>
<ajc-test dir="new/binaryWarnings/src" pr="37020"
   	keywords="knownLimitation"
   	comment="source loc of binary jp depends on first code, not block start"
   	title="declare error on handler/method execution with no code on binary ajc 1.1 classes">
        <compile files="aspects/MainExecStartLinesErrors.java,../injars/appStartLines-ajc-1.1.jar">
        	<message kind="error" file="app/MainExecStartLines.java"
        	  line="6" text="execution(void MainExecStartLines.main(String[]))"/>
        	<message kind="error" file="app/MainExecStartLines.java"
        	  line="17" text="handler(RuntimeException)"/>        	  
        </compile>
    </ajc-test>
<ajc-test dir="new/binaryWarnings/src" pr="37020"
   	keywords="knownLimitation"
   	comment="source loc of binary jp depends on first code, not block start; XXX need javac inlining example"
   	title="declare error on handler/method execution with no code on binary javac 1.4 classes">
        <compile files="aspects/MainExecStartLinesErrors.java,../injars/appStartLines-javac-1.4.jar">
        	<message kind="error" file="app/MainExecStartLines.java"
        	  line="6" text="execution(void MainExecStartLines.main(String[]))"/>
        	<message kind="error" file="app/MainExecStartLines.java"
        	  line="17" text="handler(RuntimeException)"/>        	  
        </compile>
    </ajc-test>
<ajc-test dir="incremental/initialTests/classAdded" 
    	title="expect class added in initial incremental tests" 
    	keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental"
        	sourceroots="."/>
        <run class="main.Main"/>
        <inc-compile tag="20" >
            <dir-changes added="main.Target"/>
        </inc-compile>
        <run class="main.Main"  skipTester="true"/>
    </ajc-test>
<ajc-test dir="incremental/initialTests/classRemoved" 
    	title="expect class removed in initial incremental tests" 
    	keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental" 
        	sourceroots="."/>
        <run class="main.Main"/>
        <inc-compile tag="20">
            <dir-changes removed="main.Target"/>
        </inc-compile>
        <run class="main.Main"/>
    </ajc-test>
<ajc-test dir="incremental/initialTests/classUpdated" 
    	title="expect class updated in initial incremental tests" 
    	keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental"
        	sourceroots="."/>
        <run class="main.Main"/>
        <inc-compile tag="20">
            <dir-changes updated="main.Main"/>
        </inc-compile>
        <run class="main.Main"/>
    </ajc-test>
<ajc-test dir="incremental/initialTests/sourceAdded" 
    	title="add file with class"
    	comment="only expecting pickup if sourceroots"    
    	keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental"
        	sourceroots="."/>
        <run class="main.Main"/>
        <inc-compile tag="20">
            <dir-changes added="main.Target"/>
        </inc-compile>
        <inc-compile tag="30">
            <dir-changes updated="main.Main"/>
        </inc-compile>
        <run class="main.Main"/>
    </ajc-test>
<ajc-test dir="incremental/initialTests/sourceDeleted" 
        title="delete source file before incremental compile"
        comment="build config should permit file deletions for incremental (sourceroots)"
        keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental"
    		sourceroots="."/>
        <run class="delete.Main"/>
        <inc-compile tag="20">
            <dir-changes removed="delete.DeleteMe"/>
        	<message kind="error" line="6" file="delete/Target.java"/>
        </inc-compile>
        <inc-compile tag="30"/> 
        <run class="delete.Main"/>
    </ajc-test>
<ajc-test dir="incremental/initialTests/expClasses" 
    	title="expected class tree" >
        <compile files="Main.java">
            <dir-changes expDir="expected"/>
        </compile>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="incremental/initialTests/defaultPackage" 
    	title="do everything in default package (sourceroots)" 
    	keywords="incremental-test" >
        <compile staging="true" 
        	options="-incremental"
    		sourceroots="."/>
        <run class="Main"/>
        <inc-compile tag="20">
            <dir-changes added="Target"/>
        </inc-compile>
        <run class="Target" skipTester="true"/>
        <inc-compile tag="30">
            <dir-changes updated="Main"/>
        </inc-compile>
        <run class="Main" skipTester="true"/>
        <inc-compile tag="40"> 
			<message kind="error" line="6" file="Main.java"/>
        </inc-compile>
        <inc-compile tag="50"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="bugs/inlineAround" pr="37152"
      title="perthis and inline arounds">
        <compile files="aspect1/Base.java,aspect2/Concrete.java,p1/Main.java">
        </compile>
        <run class="p1.Main"/>
    </ajc-test>
<ajc-test dir="incremental/defaultPackage"
    keywords="incremental-test"
   	title="change sources in default package">
        <compile 
        	staging="true"
        	options="-incremental" 
        	sourceroots="src"/>
        <run class="Main"/>
        <inc-compile tag="20"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="incremental/interPackage"
    keywords="incremental-test"
   	title="change source">
        <compile 
        	staging="true"
        	options="-incremental" 
        	sourceroots="src"/>
        <run class="app.Main"/>
        <inc-compile tag="20"/>
        <run class="app.Main"/>
    </ajc-test>
<ajc-test dir="bugs" pr="37739"
   	 title="Unexpected Xlint:unresolvableMember warning with withincode">
        <compile files="CatchSig.java">
        </compile>
        <run class="CatchSig"/>
    </ajc-test>
<ajc-test dir="bugs/lines" pr="37758"
   	 title="Weaving rt.jar results in stack overflow">
        <compile files="A.java,big.jar">
 			
        </compile>
        <run class="Big"/>
    </ajc-test>
<ajc-test dir="harness" 
        title="setting -warn:constructorName works">
        <compile files="ConstructorNameWarning.java" 
        	options="-warn:constructorName">
        	<message kind="warning" line="5" text="constructor name"/>
    	</compile>
    </ajc-test>
<ajc-test dir="harness" 
        title="valid XLintWarningTest file, default level of warning">
        <compile files="XLintWarningTest.java">
        	<message kind="warning" line="5"
        		 text="Xlint:invalidAbsoluteTypeName"/> 
        </compile>
    </ajc-test>
<ajc-test dir="harness" 
        title="XLint:error promotes XLint warnings to error">
        <compile files="XLintWarningTest.java" options="-Xlint:error">
        	<message kind="error" line="5" 
        		text="Xlint:invalidAbsoluteTypeName"/> 
        </compile>
    </ajc-test>
<ajc-test dir="new/binaryWarnings/src" pr="37020" keywords="knownLimitation"
   	 title="declare warnings on main - constructor execution">
        <compile files="aspects/ConstructorExecutionWarning.java,app/Main.java">
        	<message kind="warning" file="app/Main.java"
        	  line="23" text="execution(Main.new())"/>
        </compile>
        <run class="app.Main"/>
    </ajc-test>
<ajc-test dir="new/binaryWarnings/src" pr="37020" keywords="knownLimitation"
   	 title="declare warnings on binary javac 1.4 main - constructor execution">
        <compile files="aspects/ConstructorExecutionWarning.java,../injars/app-javac-1.4.jar">
        	<message kind="warning" file="app/Main.java"
        	  line="23" text="execution(Main.new())"/>
        </compile>
        <run class="app.Main"/>
    </ajc-test>
<ajc-test dir="new/binaryWarnings/src" pr="37020" keywords="knownLimitation"
   	 title="declare warnings on binary ajc 1.1 main - constructor execution">
        <compile files="aspects/ConstructorExecutionWarning.java,../injars/app-ajc-1.1.jar">
        	<message kind="warning" file="app/Main.java"
        	  line="23" text="execution(Main.new())"/>
        </compile>
        <run class="app.Main"/>
    </ajc-test>
<ajc-test dir="bugs/handlers" pr="37898" keywords="knownLimitation"
		title="advice on handler join points should not throw unpermitted checked exceptions">
        <compile files="ExceptionCheckCE.java">
			<message kind="warning" line="8" text="expected"/>
			<message kind="error" line="25" text="throw checked exception" />
			<message kind="error" line="8" text="throw checked exception" />
        </compile>
    </ajc-test>
<ajc-test dir="incremental/stringliteral"
    	keywords="incremental-test"
		title="incrementally change only string literal, still expect advice">
        <compile staging="true" options="-incremental" 
        	sourceroots="src"/>
		<run class="packageOne.Main"
			options="in packageOne.Main.main(..),
					 before main packageOne.Main"/>
        <inc-compile tag="20">
        	<dir-changes updated="packageOne.Main"/>
        </inc-compile>
		<run class="packageOne.Main"
			options="in longer packageOne.Main.main(..),
					 before main packageOne.Main"/>
    </ajc-test>
<ajc-test dir="bugs" pr="38168" keywords="knownLimitation"
   	 title="insertion of lots of advice code can make branch offset for if too large">
        <compile files="WideJumps.java"/>
        <run class="WideJumps"/>
    </ajc-test>
<ajc-test dir="bugs/accessMethods" pr="38212"
   	 title="can not resolve this member warning">
        <compile files="p1/Base.java,p2/Derived.java"/>
        <run class="p2.Derived"/>
    </ajc-test>
<ajc-test dir="bugs" pr="39458"
   	 title="Compiler crash in ajc 1.1 - terrible error for inaccessible constructor">
        <compile files="NewVoid.java">
            <message kind="error" line="17"/>        
            <message kind="error" line="20"/>        
            <message kind="error" line="21"/>
                  
            <message kind="error" line="28"/>        
            <message kind="warning" line="29"/>        
            <message kind="warning" line="30"/>            
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="39479"
   	 title="NPE in bcel.LazyMethodGen when delegating from one ctor to a second that includes a switch">
        <compile files="NewSwitch.java"/>
        <run class="NewSwitch"/>
    </ajc-test>
<ajc-test dir="bugs" pr="39993"
   	 title="ajc stack trace on declaring hashcode() method in aspect">
        <compile files="OverridingInterfaceObjectMethod.java"/>
        <run class="OverridingInterfaceObjectMethod"/>
    </ajc-test>
<ajc-test dir="bugs/cflowAndJar" pr="39462"
   	 title="Compiler crashes in jar and cflow (with no .jar)">
        <compile files="TestAspect.aj,Test.java,AbstractAspect.aj">
        	<message kind="warning" line="16"/>
        </compile>
        <run class="Test"/>
    </ajc-test>
<ajc-test dir="bugs/cflowAndJar" pr="39462"
   	 title="Compiler crashes in jar and cflow (with .jar)"
   	 comment="make lib.jar with ajc -outjar lib.jar AbstractAspect.aj">
        <compile files="TestAspect.aj,Test.java" aspectpath="lib.jar">
        	<message kind="warning" line="16"/>
        </compile>
        <run class="Test"/>
    </ajc-test>
<ajc-test dir="bugs" pr="40589"
   	 title="Default method impl for interface causes internal exception.">
        <compile files="CloneMethod.java"/>
        <run class="CloneMethod"/>
    </ajc-test>
<ajc-test dir="bugs" pr="39711"
   	 title="Class Literals as non final fields (also assert, and this$0)">
        <compile files="ClassLiteralField.java" options="-source,1.4"/>
        <run vm="1.4" class="ClassLiteralField"/>
    </ajc-test>
<ajc-test dir="errors"
		title="compile error expected for abstract pointcut outside abstract aspect">
		<compile files="AbstractPointcutCE.java">
			<message kind="error" line="5"/>
			<message kind="error" line="10"/>
		</compile>
	</ajc-test>
<ajc-test dir="bugs"
		pr="40858"
		comment="super is not permitted in pointcuts in 1.1"
		title="weaver trace on mis-qualified pointcut reference">
		<compile files="SuperPointcutCE.java">
			<message kind="error" line="23"/>
			<message kind="error" line="26"/>
		</compile>
	</ajc-test>
<ajc-test dir="bugs"
		pr="40814"
		title="compile error expected for interface pointcuts">
		<compile files="AbstractPointcutCE.java">
			<message kind="error" line="7"/>
			<message kind="error" line="11"/>		
			<message kind="error" line="15"/>
		</compile>
	</ajc-test>
<ajc-test dir="bugs"
		pr="40805" 
		title="interface call signatures when declaring method in aspect">
		<compile files="DeclareWarningAndInterfaceMethodCW.java">
			<message kind="warning" line="27" text="call getSomething"/>
			<message kind="warning" line="27" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="31" text="call getSomething"/>
			<message kind="warning" line="31" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="33" text="call getSomething"/>
			<message kind="warning" line="33" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="35" text="call getSomething"/>
			<message kind="warning" line="35" text="call ICanGetSomething.getSomething"/>
			<message kind="warning" line="38" text="call getSomething"/>
			<message kind="warning" line="38" text="call ICanGetSomething.getSomething"/>
		</compile>
	</ajc-test>
<ajc-test dir="new/interfaceLibrary"
		comment="prove that LibraryAspect is required"
		title="aspect-declared interface members in libraries - interfaceOnly.jar">
		<compile 
			files="Client.java" 
			aspectpath="interfaceOnly.jar">
			<message kind="error" line="5"/>
			</compile>
		</ajc-test>
<ajc-test dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectOnly.jar">
		<compile 
			files="lib/LibraryInterface.java,
					Client.java" 
			aspectpath="aspectOnly.jar"/>
		<run class="Client"/>
		</ajc-test>
<ajc-test dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnly.jar"
		comment="prove aspect is required even if interface is woven"
		>
		<compile 
			files="Client.java" 
			classpath="aspectedInterfaceOnly.jar">
			<message kind="error" line="0" text="LibraryAspect"/>
			<message kind="error" line="9" text="LibraryInterface"/>
			</compile>
		</ajc-test>
<ajc-test dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnly.jar,aspectpath=aspectOnly.jar"
		comment="can weave to create library, and then weave clients"
		>
		<compile 
			files="Client.java" 
			classpath="aspectedInterfaceOnly.jar"
			aspectpath="aspectOnly.jar"/>
		<run class="Client"/>
		</ajc-test>
<ajc-test dir="new/interfaceLibrary"
		title="aspect-declared interface members in libraries - aspectedInterfaceOnly.jar,aspectpath=aspectOnly.jar"
		comment="works if source aspect and binary classpath woven with aspect? 
		         should NOT warn about affected type not since affected type is already woven?"
		>
		<compile 
			files="Client.java,LibraryAspect.java" 
			classpath="aspectedInterfaceOnly.jar"/>
			
		<run class="Client"/>
		</ajc-test>
<ajc-test 
		dir="bugs/interfaceLibrary"
		title="exception clause for aspect-declared class methods - positive">
		<compile files="ClassClient.java,LibraryClassAspect.java,lib/LibraryClass.java"/>
		<run class="ClassClient"/>
		</ajc-test>
<ajc-test dir="bugs"
		pr="41175"
		title="reflective check of declared exceptions from aspect-declared methods">
		<compile files="DeclaredExceptions.java"/>
		<run class="DeclaredExceptions"/>
		</ajc-test>
<ajc-test dir="bugs/interfaceLibrary"
		pr="41175"
		title="exception clause for aspect-declared interface methods - positive binary">
		<compile files="Client.java" aspectpath="lib.jar"/>
		<run class="Client"/>
		</ajc-test>
<ajc-test dir="bugs/interfaceLibrary"
		pr="41175"
		title="exception clause for aspect-declared interface methods - negative binary">
		<compile files="ClientCE.java" aspectpath="lib.jar">
			<message kind="error" file="ClientCE.java" line="5"/>
			</compile>
		</ajc-test>
<ajc-test dir="bugs/interfaceLibrary"
		pr="41175"
		title="exception clause for aspect-declared class methods - positive binary">
		<compile files="ClassClient.java" aspectpath="libClass.jar"/>
		<run class="ClassClient"/>
		</ajc-test>
<ajc-test dir="bugs/interfaceLibrary"
		pr="41175"
		title="exception clause for aspect-declared class methods - negative binary">
		<compile files="ClassClientCE.java" aspectpath="libClass.jar">
			<message kind="error" file="ClassClientCE.java" line="5"/>
			</compile>
		</ajc-test>
<ajc-test dir="bugs/moreInterfaceLibrary"
		pr="41123"
		title="Weaving failure when using injars (actual injars)">
		<compile
			files="model/BusObj.java,model/MonitorBusObj.java,lib.jar">
		    <message kind="error" line="3"/>
		</compile>
	</ajc-test>
<ajc-test dir="bugs/perCflowAndJar"
		pr="41359"
		title="percflow aspects compiled from jars share one instance for all entry points">
		<compile files="PerCFlowCompileFromJar.java,PerCFlowCompileFromJarTest.java"/>
		<run class="PerCFlowCompileFromJarTest"/>
	</ajc-test>
<ajc-test dir="bugs/perCflowAndJar"
		pr="41359"
		title="(using aspectpath) percflow aspects compiled from jars share one instance for all entry points">
		<compile files="PerCFlowCompileFromJarTest.java"
				aspectpath="lib.jar"/>
		<run class="PerCFlowCompileFromJarTest"/>
	</ajc-test>
<ajc-test dir="bugs/throwsSignature"
		pr="42539"
		title="throw derivative pointcuts not advised">
		<compile files="ExceptionBugTest.java,ExceptionAspect.java">
		    <message line="5" kind="warning" text="throws both"/>
		    <message line="5" kind="error" text="throws Exception"/>
		    <message line="7" kind="warning" text="throws both"/>
		</compile>
	</ajc-test>
<ajc-test dir="bugs/declareBinding"
		pr="42740"
		title="declare error fails on pointcuts composed from multiple classes">
		<compile files="SampleExceptionHandling1.java">
		    <message line="2" kind="error" text="no checked exceptions"/>
		</compile>
	</ajc-test>
<ajc-test dir="bugs/declareSoftWithin"
		pr="42740"
		title="declare error fails on pointcuts composed from multiple classes">
		<compile files="aspects/Softener.aj,test/NoSoftener.java"/>
		<run class="test.NoSoftener"/>
	</ajc-test>
<ajc-test dir="bugs" pr="42993"
   	    title="Interaction between pointcut binding and declare parents">
        <compile files="ParentsAndPointcuts.java"/>
        <run class="ParentsAndPointcuts"/>
    </ajc-test>
<ajc-test dir="bugs/concretizeNpe" pr="43033"
		title="NPE in concretization error path"
		keywords="poorErrorMessages">
		<compile files="base/ExceptionHandling.java,model/ModelExceptionHandling.java">
		
		  <message line="12" kind="error" />		
		  <message line="13" kind="error" />
		</compile>
	</ajc-test>
<ajc-test dir="bugs/jpOptimization" 
    	pr="45441"
    	title="JoinPoint Optimization when targetting 1.4">
        <compile 
        	files="de/test/MyMain.java,
        		   de/test/MyAspect.java"
            options="-1.4"/>
        <run class="de.test.MyMain"/>
    </ajc-test>
<ajc-test dir="bugs/privilege/packageProtected" pr="42711" 
            title="priviledged aspects calling methods from advice"> 
        <compile files="concern/ContextUser.java,concern/BaseTarget.java,core/Base.java" /> 
    </ajc-test>
<ajc-test dir="bugs" pr="49457"
   	 title="No error on overloaded pointcuts in class">
        <compile files="OverloadedPointcutsInClass.java">
        	<message kind="error" line="3" text="duplicate pointcut name: pc1"/>
        	<message kind="error" line="4" text="duplicate pointcut name: pc1"/>
        	<message kind="error" line="6" text="duplicate pointcut name: pc2"/>
        	<message kind="error" line="7" text="duplicate pointcut name: pc2"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="49457"
   	 title="No error on overloaded pointcuts unless binding variables">
        <compile files="OverloadedPointcutsInAspect.java">
        	<message kind="error" line="15" text="duplicate pointcut name: pc"/>
        	<message kind="error" line="16" text="duplicate pointcut name: pc"/>
        	<message kind="error" line="18" text="incompatible type"/>
        	<message kind="error" line="20" text="incompatible type"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="49250"
      title="alias getCause for getWrappedThrowable in SoftException">
        <compile files="GetCauseOnSoftException.java" options="-Xlint:warning">
        </compile>
        <run vm="1.3" class="GetCauseOnSoftException"/>
    </ajc-test>
<ajc-test dir="bugs" pr="48522"
      title="Declare soft softening other exception types">
        <compile files="SofteningTooMuch.java">
 	        <message kind="error" line="6" text="Unhandled exception"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="47754"
      title="static method introduction on interfaces, should not be allowed">
        <compile files="StaticInterfaceMethods.java">
		  <message kind="error" line="7" text="methods in interfaces cannot be declared static"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="45184"
      title="External pointcut refs not resolved if named pointcut used by declare">
        <compile files="DeclareErrorNamedPointcutCE.java">
 	        <message kind="error" line="10" text="ref"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs"
		title="XLint warning for call PCD's using subtype of defining type"
		pr="41952"
		>
		<compile 
			files="DeclaringTypeWarning.java"
			options="-1.3" >
			<message kind="warning" line="6" text="declaring type">
				<source line="12" file="DeclaringTypeWarning.java" />
			</message>
			<message kind="warning" line="6"  text="declaring type">
				<source line="14" file="DeclaringTypeWarning.java" />
			</message>			
		</compile>
		</ajc-test>
<ajc-test dir="bugs"
		title="XLint warning for call PCD's using subtype of defining type (-1.4 -Xlint:ignore)"
		pr="41952"
		>
		<compile
			options="-Xlint:ignore,-1.4" 
			files="DeclaringTypeWarning.java" >
            <message kind="warning" line="12"/>
		</compile>
	</ajc-test>
<ajc-test dir="bugs"
		title="XLint warning for call PCD's using subtype of defining type (-1.4)"
		pr="41952"
		>
		<compile
			options="-1.4" 
			files="DeclaringTypeWarning.java" >
			<message kind="warning" line="6" text="declaring type">
				<source line="14" file="DeclaringTypeWarning.java"/>
			</message>
			<message kind="warning" line="12" text="declare warning">
				<source line="19" file="DeclaringTypeWarning.java"/>
			</message>
		</compile>
	</ajc-test>
<ajc-test dir="bugs"
		title="Appropriate message for 'after() thowing(Throwable th)' syntax error"
		pr="49638"
		>
		<compile 
			files="AfterThrowingAdviceSyntaxError.java" >
			<message kind="error" line="21" />
			<message kind="error" line="23" />
		</compile>
	</ajc-test>
<ajc-test dir="bugs/faultingInSource" pr="46671"
      title="Ensure we don't look for source on the classpath when binary not found">
        <compile files="SimpleTracing.java" classpath="." options="-verbose">
		  <message kind="warning" line="4" text="no match for this type name: SampleClass"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="46750" title="inner aspect containing declare soft">
       <compile files="TestSoftening.java">
       </compile>
    </ajc-test>
<ajc-test dir="bugs" pr="45663"
      title="Bad parser error recovery in java source">
        <compile files="ParserRecoveryTestPureJava.java">
		  <message kind="error" line="6"/>
		  <message kind="error" line="8"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs" 
		pr="46280"
		title="compiler issues error on inner aspects when privilieged">
        <compile files="PrivilegedParsing.java"/>
        <run class="PrivilegedParsing"/>
    </ajc-test>
<ajc-test dir="bugs" pr="44586"
      title="After throwing advice on ctors doesn't execute for inter-type decl field inits">
        <compile files="AfterThrowingCtor.java">
        </compile>
  		<run class="AfterThrowingCtor"/>
    </ajc-test>
<ajc-test dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on abstract class not implemented by subtype">
        <compile files="abstractClass/C.java"
        		 aspectpath="abstractClass/jars/AandB.jar">
            <message kind="error" line="1"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on interface not implemented by subtype (injars)">
       <compile files="interface/C.java,interface/jars/AandB.jar"> 
            <message kind="error" line="1"/>
        </compile>
    </ajc-test>
<ajc-test dir="bugs/abstractMethods" pr="49784"
   	 title="Introduced abstract method on interface not implemented by subtype (aspectpath)">
        <compile files="interface/C.java"
        		 aspectpath="interface/jars/AandB.jar" />
        <run class="C"/>
    </ajc-test>
<ajc-test dir="bugs/interAbstract" 
		pr="49784"
		title="aspect declares interface method (no modifiers)">
        <compile files="InterfaceMethodDeclarationNone.java" >
        	<message kind="error" line="32" text="requires a body" />
        </compile>
    </ajc-test>
<ajc-test dir="bugs/interAbstract" 
		pr="49784"
		title="aspect declares interface method (abstract)">
        <compile files="InterfaceMethodDeclarationAbstract.java">
        	<message kind="error" line="40" text="must implement" />
        </compile>
    </ajc-test>
<ajc-test dir="bugs/interfaceDefinition" 
    	pr="43972"
    	title="Use class implementing interface via aspect (not woven together)">
        <compile 
        	files="pack/DefineInterface.java,
        		   pack/InterfaceDefinition.java,
        		   pack/MyInterface.java"/>
        <run class="pack.InterfaceDefinition"/>
        <compile 
        	includeClassesDir="true"
        	files="Main.java">
        	<message kind="error" line="3"/>
       </compile>
    </ajc-test>
<ajc-test dir="bugs/interfaceDefinition" 
    	pr="43972"
    	title="Use class implementing interface via aspect (only one implementer)">
        <compile 
        	files="pack/DefineInterface.java,
        		   pack/InterfaceDefinition.java,
        		   pack/MyInterface.java"/>
        <run class="pack.InterfaceDefinition"/>
        <compile 
        	includeClassesDir="true"
        	files="Main1.java"/>
        <run class="Main1"/>
    </ajc-test>
<ajc-test dir="bugs" pr="38824"
	      title="Anomalous handling of inter-type declarations to abstract base classes in aspectj 1.1">
	        <compile files="AbstractBaseAndInterTypeInterface.java">
	        </compile>
	</ajc-test>
<ajc-test dir="bugs/caseSensitivity" pr="42515"
      title="NPE When compiling intertype declaration">
        <compile files="uniqueId/Numbered.java,uniqueId/Bug.aj">
		  <message kind="error" line="4"/>
        </compile>
  </ajc-test>
<ajc-test dir="bugs" 
		pr="49295"
		title="declare warning on subtype constructor">
        <compile files="SubtypeConstructorCW.java" >
			<message kind="warning" line="5" text="String as first"/>
			<message kind="warning" line="10" text="String as first"/>
        </compile>
        <run class="SubtypeConstructorCW"/>
    </ajc-test>
<ajc-test dir="bugs" pr="50570"
      title="CatchClauseSignature has broken operation">
        <compile files="HandlerSig.java"/>
        <run class="HandlerSig"/>
    </ajc-test>
<ajc-test dir="new" pr="42668"
   	 title="after returning with parameter: matching rules">
        <compile files="AfterReturningParamMatching.java" />
        <run class="AfterReturningParamMatching"/>
    </ajc-test>
<ajc-test dir="bugs/binaryCompat" pr="50641"
      title="binary compatibility of advice method names - expect no error">
        <compile files="Main.java,TraceV1.aj"/>
        <run class="Main"/>
        <compile files="TraceV2.aj"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="bugs/binaryCompat" pr="50641"
      title="binary compatibility of advice method names - expect error">
        <compile files="Main.java,TraceV1.aj"/>
        <run class="Main"/>
        <compile files="TraceRE.aj"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="bugs/binaryCompat" pr="50641"
      title="binary compatibility of advice method names - expect no error">
        <compile files="Main.java,TraceWithInnerV1.aj"/>
        <run class="Main"/>
        <compile files="TraceWithInnerV2.aj"/>
        <run class="Main"/>
    </ajc-test>
<ajc-test dir="bugs/protectedvf"
		title="mail list VerifyError with protected access">
		<compile files="main/Driver.java,main/p2/AbstractTest.aj,main/p1/ConcreteTest.aj"/>
		<run class="main.Driver"/>
	</ajc-test>
</suite> 
