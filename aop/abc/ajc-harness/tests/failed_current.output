Running test 141: pureJava/Parenthesized true and false don't parse
Commandline: abc -d pureJava pureJava/ParenKeywords.java 
Unexpected exception while compiling: polyglot.util.InternalCompilerError: unhandled exception during compilation
polyglot.util.InternalCompilerError: unhandled exception during compilation
	at abc.main.Main.run(Main.java:593)
	at abc.testing.TestCase.runTest(TestCase.java:287)
	at abc.testing.Main.doCase(Main.java:282)
	at abc.testing.Main.main(Main.java:116)
Caused by: java.lang.ClassCastException: polyglot.visit.InitChecker$1
	at polyglot.visit.InitChecker.check(InitChecker.java:748)
	at polyglot.visit.DataFlow.post(DataFlow.java:717)
	at polyglot.visit.DataFlow.dataflow(DataFlow.java:404)
	at polyglot.visit.DataFlow.leaveCall(DataFlow.java:687)
	at polyglot.visit.InitChecker.leaveCall(InitChecker.java:317)
	at polyglot.visit.ErrorHandlingVisitor.leaveCall(ErrorHandlingVisitor.java:127)
	at polyglot.visit.ErrorHandlingVisitor.leave(ErrorHandlingVisitor.java:251)
	at polyglot.visit.DataFlow.leave(DataFlow.java:677)
	at polyglot.visit.NodeVisitor.visitEdge(NodeVisitor.java:131)
	at polyglot.ext.jl.ast.Node_c.visitChild(Node_c.java:148)
	at polyglot.ext.jl.ast.Node_c.visitList(Node_c.java:205)
	at polyglot.ext.jl.ast.ClassBody_c.visitChildren(ClassBody_c.java:61)
	at polyglot.visit.NodeVisitor.visitEdge(NodeVisitor.java:124)
	at polyglot.ext.jl.ast.Node_c.visitChild(Node_c.java:148)
	at polyglot.ext.jl.ast.ClassDecl_c.visitChildren(ClassDecl_c.java:132)
	at polyglot.visit.NodeVisitor.visitEdge(NodeVisitor.java:124)
	at polyglot.ext.jl.ast.Node_c.visitChild(Node_c.java:148)
	at polyglot.ext.jl.ast.Node_c.visitList(Node_c.java:205)
	at polyglot.ext.jl.ast.SourceFile_c.visitChildren(SourceFile_c.java:108)
	at polyglot.visit.NodeVisitor.visitEdge(NodeVisitor.java:124)
	at polyglot.ext.jl.ast.Node_c.visit(Node_c.java:152)
	at polyglot.frontend.VisitorPass.run(VisitorPass.java:48)
	at polyglot.frontend.AbstractExtensionInfo.runPass(AbstractExtensionInfo.java:286)
	at polyglot.frontend.AbstractExtensionInfo.runToPass(AbstractExtensionInfo.java:222)
	at polyglot.frontend.AbstractExtensionInfo.runAllPasses(AbstractExtensionInfo.java:190)
	at polyglot.frontend.AbstractExtensionInfo.runToCompletion(AbstractExtensionInfo.java:109)
	at polyglot.frontend.Compiler.compile(Compiler.java:95)
	at abc.main.Main.compile(Main.java:732)
	at abc.main.Main.run(Main.java:518)
	... 3 more
FAIL: Test 141: "pureJava/Parenthesized true and false don't parse" failed.


Running test 165: pureJava/nameConflicts/type and package name conflicts caught as errors (1)
Commandline: abc -d pureJava/nameConflicts pureJava/nameConflicts/p1/p2.java pureJava/nameConflicts/p1/Main1.java pureJava/nameConflicts/p1/Foo.java pureJava/nameConflicts/p1/p2/Foo.java 
expr: "p1.Foo"
getConstant: p1.Foo
expr: "p1.p2$Foo"
getConstant: p1.p2$Foo
Compilation succeeded but was expected to fail.
FAIL: Test 165: "pureJava/nameConflicts/type and package name conflicts caught as errors (1)" failed.


Running test 178: pureJava/nested finally blocks have interesting frame location problems
Commandline: abc -d pureJava pureJava/NestedFinally.java 
Compilation produced an unexpected number of errors: 1, should be 0
Actual errors found: 
Semantic Error at pureJava/NestedFinally.java:5,18-35: Missing return statement.
FAIL: Test 178: "pureJava/nested finally blocks have interesting frame location problems" failed.


Running test 418: new/join points exist in the execution of field initializers
Commandline: abc -d new new/FieldInitializerJoinPoints.java 
expr: 97
getConstant: 97
expr: 96
getConstant: 96
initExpr: 0
expr: 0
getConstant: 0
initExpr: 0
expr: 0
getConstant: 0
initExpr: 0
expr: 0
getConstant: 0
initExpr: 0
expr: 0
getConstant: 0
initExpr: 0
expr: 0
getConstant: 0
initExpr: 0
expr: 0
getConstant: 0
initExpr: 0
expr: 0
getConstant: 0
initExpr: 0
expr: 0
getConstant: 0
initExpr: 0
expr: 0
getConstant: 0
initExpr: 0
expr: 0
getConstant: 0
initExpr: 0
expr: 0
getConstant: 0
initExpr: 0
expr: 0
getConstant: 0
initExpr: 99
expr: 99
getConstant: 99
initExpr: 98
expr: 98
getConstant: 98
initExpr: n()
initExpr: o()
expr: 97
getConstant: 97
expr: l
getConstant: 97
expr: 95
getConstant: 95
expr: 94
getConstant: 94
expr: 93
getConstant: 93
expr: 92
getConstant: 92
expr: 0
getConstant: 0
expr: "jcount"
getConstant: jcount
expr: 1
getConstant: 1
expr: "kcount"
getConstant: kcount
expr: 0
getConstant: 0
expr: "lcount"
getConstant: lcount
expr: 2
getConstant: 2
expr: "mcount"
getConstant: mcount
expr: 1
getConstant: 1
expr: "ncount"
getConstant: ncount
expr: 1
getConstant: 1
expr: "ocount"
getConstant: ocount
expr: 2
getConstant: 2
expr: "pcount"
getConstant: pcount
expr: 2
getConstant: 2
expr: "qcount"
getConstant: qcount
expr: 1
getConstant: 1
expr: "nMcount"
getConstant: nMcount
expr: 1
getConstant: 1
expr: "oMcount"
getConstant: oMcount
expr: 2
getConstant: 2
expr: "pMcount"
getConstant: pMcount
expr: 2
getConstant: 2
expr: "qMcount"
getConstant: qMcount
expr: true
getConstant: true
Test failed, compiled class behaved incorrectly
Message: fail ncount: 0 < 1
org.aspectj.bridge.AbortException: ncount: 0 < 1
	at org.aspectj.bridge.MessageWriter.handleMessage(MessageWriter.java:47)
	at org.aspectj.testing.Tester.handle(Tester.java:963)
	at org.aspectj.testing.Tester.checkFailed(Tester.java:177)
	at org.aspectj.testing.Tester.checkEqual(Tester.java:462)
	at FieldInitializerJoinPoints.main(FieldInitializerJoinPoints.java:59)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at abc.testing.TestCase.runTest(TestCase.java:393)
	at abc.testing.Main.doCase(Main.java:282)
	at abc.testing.Main.main(Main.java:116)
FAIL: Test 418: "new/join points exist in the execution of field initializers" failed.


Running test 472: new/primitive parameters coercable to Object just like return values are
Commandline: abc -d new new/ObjectForInt.java 
expr: 10
getConstant: 10
expr: "Test.a"
getConstant: Test.a
expr: 4
getConstant: 4
expr: "beforeA"
getConstant: beforeA
initExpr: -1
expr: -1
getConstant: -1
expr: 4
getConstant: 4
initExpr: null
expr: 10
getConstant: 10
expr: true
getConstant: true
Test failed, compiled class behaved incorrectly
Message: fail Test.a: 4 < 10
org.aspectj.bridge.AbortException: Test.a: 4 < 10
	at org.aspectj.bridge.MessageWriter.handleMessage(MessageWriter.java:47)
	at org.aspectj.testing.Tester.handle(Tester.java:963)
	at org.aspectj.testing.Tester.checkFailed(Tester.java:177)
	at org.aspectj.testing.Tester.checkEqual(Tester.java:462)
	at ObjectForInt.main(ObjectForInt.java:6)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at abc.testing.TestCase.runTest(TestCase.java:393)
	at abc.testing.Main.doCase(Main.java:282)
	at abc.testing.Main.main(Main.java:116)
FAIL: Test 472: "new/primitive parameters coercable to Object just like return values are" failed.


Running test 496: new/elaborated into testing of around on all join points
Commandline: abc -d new new/AroundAll.java 
expr: "9"
getConstant: 9
expr: 42
getConstant: 42
expr: 1
getConstant: 1
binary: "x = " + x
node in is string lit: "x = " + x kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "x = " kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: x kind: class abc.aspectj.extension.AJField_c
expr: "x = "
getConstant: x = 
expr: 23
getConstant: 23
expr: "2"
getConstant: 2
expr: "C()"
getConstant: C()
binary: "C(" + s + ")"
node in is string lit: "C(" + s + ")" kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "C(" + s kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "C(" kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: s kind: class polyglot.ext.jl.ast.Local_c
expr: "C("
getConstant: C(
expr: ")"
getConstant: )
binary: "y = " + y
node in is string lit: "y = " + y kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "y = " kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: y kind: class abc.aspectj.extension.AJField_c
expr: "y = "
getConstant: y = 
binary: "SuperC(" + x + ")"
node in is string lit: "SuperC(" + x + ")" kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "SuperC(" + x kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "SuperC(" kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: x kind: class polyglot.ext.jl.ast.Local_c
expr: "SuperC("
getConstant: SuperC(
expr: ")"
getConstant: )
expr: true
getConstant: true
initExpr: new java.lang.String[...]
expr: "enter st..."
getConstant: enter staticinitialization(AroundAll.<clinit>)
expr: "exit sta..."
getConstant: exit staticinitialization(AroundAll.<clinit>)
expr: "enter ex..."
getConstant: enter execution(void AroundAll.main(String[]))
expr: "enter ca..."
getConstant: enter call(C())
expr: "enter st..."
getConstant: enter staticinitialization(SuperC.<clinit>)
expr: "exit sta..."
getConstant: exit staticinitialization(SuperC.<clinit>)
expr: "enter st..."
getConstant: enter staticinitialization(C.<clinit>)
expr: "exit sta..."
getConstant: exit staticinitialization(C.<clinit>)
expr: "enter ca..."
getConstant: enter call(Integer java.lang.Integer.valueOf(String))
expr: "exit cal..."
getConstant: exit call(Integer java.lang.Integer.valueOf(String))
expr: "enter ca..."
getConstant: enter call(int java.lang.Integer.intValue())
expr: "exit cal..."
getConstant: exit call(int java.lang.Integer.intValue())
expr: "enter ex..."
getConstant: enter execution(SuperC(int))
expr: "enter ca..."
getConstant: enter call(java.lang.StringBuffer(String))
expr: "exit cal..."
getConstant: exit call(java.lang.StringBuffer(String))
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(int))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(int))
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(String))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(String))
expr: "enter ca..."
getConstant: enter call(String java.lang.StringBuffer.toString())
expr: "exit cal..."
getConstant: exit call(String java.lang.StringBuffer.toString())
expr: "SuperC(2)"
getConstant: SuperC(2)
expr: "exit exe..."
getConstant: exit execution(SuperC(int))
expr: "enter ex..."
getConstant: enter execution(C(int))
expr: "enter se..."
getConstant: enter set(int C.y)
expr: "exit set..."
getConstant: exit set(int C.y)
expr: "enter se..."
getConstant: enter set(int C.x)
expr: "exit set..."
getConstant: exit set(int C.x)
expr: "enter ca..."
getConstant: enter call(java.lang.StringBuffer(String))
expr: "exit cal..."
getConstant: exit call(java.lang.StringBuffer(String))
expr: "enter ge..."
getConstant: enter get(int C.x)
expr: "exit get..."
getConstant: exit get(int C.x)
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(int))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(int))
expr: "enter ca..."
getConstant: enter call(String java.lang.StringBuffer.toString())
expr: "exit cal..."
getConstant: exit call(String java.lang.StringBuffer.toString())
expr: "x = 2"
getConstant: x = 2
expr: "exit exe..."
getConstant: exit execution(C(int))
expr: "enter ex..."
getConstant: enter execution(C(String))
expr: "enter ca..."
getConstant: enter call(java.lang.StringBuffer(String))
expr: "exit cal..."
getConstant: exit call(java.lang.StringBuffer(String))
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(String))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(String))
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(String))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(String))
expr: "enter ca..."
getConstant: enter call(String java.lang.StringBuffer.toString())
expr: "exit cal..."
getConstant: exit call(String java.lang.StringBuffer.toString())
expr: "C(2)"
getConstant: C(2)
expr: "enter ca..."
getConstant: enter call(java.lang.StringBuffer(String))
expr: "exit cal..."
getConstant: exit call(java.lang.StringBuffer(String))
expr: "enter ge..."
getConstant: enter get(int C.y)
expr: "exit get..."
getConstant: exit get(int C.y)
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(int))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(int))
expr: "enter ca..."
getConstant: enter call(String java.lang.StringBuffer.toString())
expr: "exit cal..."
getConstant: exit call(String java.lang.StringBuffer.toString())
expr: "y = 42"
getConstant: y = 42
expr: "exit exe..."
getConstant: exit execution(C(String))
expr: "enter ex..."
getConstant: enter execution(C())
expr: "C()"
getConstant: C()
expr: "exit exe..."
getConstant: exit execution(C())
expr: "exit cal..."
getConstant: exit call(C())
expr: "enter ca..."
getConstant: enter call(C(String))
expr: "enter ca..."
getConstant: enter call(Integer java.lang.Integer.valueOf(String))
expr: "exit cal..."
getConstant: exit call(Integer java.lang.Integer.valueOf(String))
expr: "enter ca..."
getConstant: enter call(int java.lang.Integer.intValue())
expr: "exit cal..."
getConstant: exit call(int java.lang.Integer.intValue())
expr: "enter ex..."
getConstant: enter execution(SuperC(int))
expr: "enter ca..."
getConstant: enter call(java.lang.StringBuffer(String))
expr: "exit cal..."
getConstant: exit call(java.lang.StringBuffer(String))
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(int))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(int))
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(String))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(String))
expr: "enter ca..."
getConstant: enter call(String java.lang.StringBuffer.toString())
expr: "exit cal..."
getConstant: exit call(String java.lang.StringBuffer.toString())
expr: "SuperC(9)"
getConstant: SuperC(9)
expr: "exit exe..."
getConstant: exit execution(SuperC(int))
expr: "enter ex..."
getConstant: enter execution(C(int))
expr: "enter se..."
getConstant: enter set(int C.y)
expr: "exit set..."
getConstant: exit set(int C.y)
expr: "enter se..."
getConstant: enter set(int C.x)
expr: "exit set..."
getConstant: exit set(int C.x)
expr: "enter ca..."
getConstant: enter call(java.lang.StringBuffer(String))
expr: "exit cal..."
getConstant: exit call(java.lang.StringBuffer(String))
expr: "enter ge..."
getConstant: enter get(int C.x)
expr: "exit get..."
getConstant: exit get(int C.x)
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(int))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(int))
expr: "enter ca..."
getConstant: enter call(String java.lang.StringBuffer.toString())
expr: "exit cal..."
getConstant: exit call(String java.lang.StringBuffer.toString())
expr: "x = 9"
getConstant: x = 9
expr: "exit exe..."
getConstant: exit execution(C(int))
expr: "enter ex..."
getConstant: enter execution(C(String))
expr: "enter ca..."
getConstant: enter call(java.lang.StringBuffer(String))
expr: "exit cal..."
getConstant: exit call(java.lang.StringBuffer(String))
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(String))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(String))
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(String))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(String))
expr: "enter ca..."
getConstant: enter call(String java.lang.StringBuffer.toString())
expr: "exit cal..."
getConstant: exit call(String java.lang.StringBuffer.toString())
expr: "C(9)"
getConstant: C(9)
expr: "enter ca..."
getConstant: enter call(java.lang.StringBuffer(String))
expr: "exit cal..."
getConstant: exit call(java.lang.StringBuffer(String))
expr: "enter ge..."
getConstant: enter get(int C.y)
expr: "exit get..."
getConstant: exit get(int C.y)
expr: "enter ca..."
getConstant: enter call(StringBuffer java.lang.StringBuffer.append(int))
expr: "exit cal..."
getConstant: exit call(StringBuffer java.lang.StringBuffer.append(int))
expr: "enter ca..."
getConstant: enter call(String java.lang.StringBuffer.toString())
expr: "exit cal..."
getConstant: exit call(String java.lang.StringBuffer.toString())
expr: "y = 42"
getConstant: y = 42
expr: "exit exe..."
getConstant: exit execution(C(String))
expr: "exit cal..."
getConstant: exit call(C(String))
initExpr: new java.util.ArrayList(...)
binary: "        \"" + i.next() + "\", "
node in is string lit: "        \"" + i.next() + "\", " kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "        \"" + i.next() kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "        \"" kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: i.next() kind: class abc.aspectj.extension.AJCall_c
expr: "        \""
getConstant:         "
expr: "\", "
getConstant: ", 
expr: "steps"
getConstant: steps
expr: "steps"
getConstant: steps
expr: true
getConstant: true
binary: "enter " + thisJoinPoint
node in is string lit: "enter " + thisJoinPoint kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "enter " kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: thisJoinPoint kind: class polyglot.ext.jl.ast.Local_c
expr: "enter "
getConstant: enter 
binary: "exit " + thisJoinPoint
node in is string lit: "exit " + thisJoinPoint kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "exit " kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: thisJoinPoint kind: class polyglot.ext.jl.ast.Local_c
expr: "exit "
getConstant: exit 
Test failed, compiled class behaved incorrectly
Message: fail steps expected array of length 114 got 126
org.aspectj.bridge.AbortException: steps expected array of length 114 got 126
	at org.aspectj.bridge.MessageWriter.handleMessage(MessageWriter.java:47)
	at org.aspectj.testing.Tester.handle(Tester.java:963)
	at org.aspectj.testing.Tester.checkFailed(Tester.java:177)
	at org.aspectj.testing.Tester.checkEqual(Tester.java:228)
	at A.checkLog(AroundAll.java:176)
	at AroundAll.abc$static$proceed$A$around$1601(AroundAll.java:9)
	at A.around$1601(AroundAll.java:199)
	at AroundAll.main(AroundAll.java)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at abc.testing.TestCase.runTest(TestCase.java:393)
	at abc.testing.Main.doCase(Main.java:282)
	at abc.testing.Main.main(Main.java:116)
FAIL: Test 496: "new/elaborated into testing of around on all join points" failed.


Running test 555: new/accessing protected superclass members in and outside CCC from body of method introduction
Commandline: abc -d new new/SuperInIntroduction.java 
expr: 8
getConstant: 8
binary: "new Sub(..." + result
node in is string lit: "new Sub(..." + result kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "new Sub(..." kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: result kind: class polyglot.ext.jl.ast.Local_c
expr: "new Sub(..."
getConstant: new Sub().getInt() !8==
expr: "null new..."
getConstant: null new ObjectSub().getClone()
expr: "null new..."
getConstant: null new ObjectSub().getSuperClone()
expr: 1
getConstant: 1
expr: 1
getConstant: 1
expr: true
getConstant: true
expr: false
getConstant: false
expr: "expectin..."
getConstant: expecting CloneNotSupportedException
InvocationTargetException while trying to run compiled class: java.lang.VerifyError: (class: A, method: getClone signature: (LObjectSub;)LObjectSub;) Bad access to protected data
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at abc.testing.TestCase.runTest(TestCase.java:393)
	at abc.testing.Main.doCase(Main.java:282)
	at abc.testing.Main.main(Main.java:116)
Caused by: java.lang.VerifyError: (class: A, method: getClone signature: (LObjectSub;)LObjectSub;) Bad access to protected data
	at Sub.getInt(SuperInIntroduction.java)
	at SuperInIntroduction.main(SuperInIntroduction.java:6)
	... 7 more
FAIL: Test 555: "new/accessing protected superclass members in and outside CCC from body of method introduction" failed.


Running test 64301: abctests/new/type pattern matching for inner classes (from Ken Horn)
Commandline: abc -d abctests/new abctests/new/test/TypePat.java 
expr: "A.before..."
getConstant: A.before1: TypePat.Inner.m()
expr: "InnerA.b..."
getConstant: InnerA.before: TypePat.Inner.m()
expr: "A.before..."
getConstant: A.before2: C.foo()
expr: "TypePat...."
getConstant: TypePat.Inner.m
expr: "a"
getConstant: a
expr: "b"
getConstant: b
expr: "A.before..."
getConstant: A.before3: Map.Entry.getKey()
expr: "A.before..."
getConstant: A.before2: C.foo()
expr: "TypePat...."
getConstant: TypePat.Runnable.run
expr: "TypePat...."
getConstant: TypePat.Runnable.run
expr: "TypePat...."
getConstant: TypePat.Inner.m
binary: "InnerA.b..." + thisJoinPointStaticPart.getSignature().toShortString()
node in is string lit: "InnerA.b..." + thisJoinPointStaticPart.getSignature().toShortString() kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "InnerA.b..." kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: thisJoinPointStaticPart.getSignature().toShortString() kind: class abc.aspectj.extension.AJCall_c
expr: "InnerA.b..."
getConstant: InnerA.before: 
expr: true
getConstant: true
expr: true
getConstant: true
binary: "A.before1: " + thisJoinPointStaticPart.getSignature().toShortString()
node in is string lit: "A.before1: " + thisJoinPointStaticPart.getSignature().toShortString() kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "A.before1: " kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: thisJoinPointStaticPart.getSignature().toShortString() kind: class abc.aspectj.extension.AJCall_c
expr: "A.before1: "
getConstant: A.before1: 
binary: "A.before2: " + thisJoinPointStaticPart.getSignature().toShortString()
node in is string lit: "A.before2: " + thisJoinPointStaticPart.getSignature().toShortString() kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "A.before2: " kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: thisJoinPointStaticPart.getSignature().toShortString() kind: class abc.aspectj.extension.AJCall_c
expr: "A.before2: "
getConstant: A.before2: 
binary: "A.before3: " + thisJoinPointStaticPart.getSignature().toShortString()
node in is string lit: "A.before3: " + thisJoinPointStaticPart.getSignature().toShortString() kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: "A.before3: " kind: class polyglot.ext.jl.ast.StringLit_c
node in is string lit: thisJoinPointStaticPart.getSignature().toShortString() kind: class abc.aspectj.extension.AJCall_c
expr: "A.before3: "
getConstant: A.before3: 
Test failed, compiled class behaved incorrectly
Message: fail [ expected event "A.before2: C.foo()" not found]
org.aspectj.bridge.AbortException: [ expected event "A.before2: C.foo()" not found]
	at org.aspectj.bridge.MessageWriter.handleMessage(MessageWriter.java:47)
	at org.aspectj.testing.Tester.handle(Tester.java:963)
	at org.aspectj.testing.Tester.checkFailed(Tester.java:177)
	at org.aspectj.testing.Tester.check(Tester.java:204)
	at org.aspectj.testing.Tester.checkEqualIgnoreDups(Tester.java:702)
	at org.aspectj.testing.Tester.checkEqual(Tester.java:742)
	at org.aspectj.testing.Tester.checkEvents(Tester.java:922)
	at org.aspectj.testing.Tester.checkAndClearEvents(Tester.java:933)
	at test.TypePat.main(TypePat.java:42)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:324)
	at abc.testing.TestCase.runTest(TestCase.java:393)
	at abc.testing.Main.doCase(Main.java:282)
	at abc.testing.Main.main(Main.java:116)
FAIL: Test 64301: "abctests/new/type pattern matching for inner classes (from Ken Horn)" failed.


Running test 667: pureJava/assert coverage tests in one package [requires 1.4]
Commandline: abc -d pureJava -source 1.4 pureJava/AssertInOnePackage.java 
expr: "StaticIn..."
getConstant: StaticInitializerOnHelper
expr: true
getConstant: true
expr: "StaticIn..."
getConstant: StaticInitializerOffHelper
expr: false
getConstant: false
expr: "Construc..."
getConstant: ConstructorOnHelper
expr: true
getConstant: true
expr: "Construc..."
getConstant: ConstructorOffHelper
expr: false
getConstant: false
expr: "InnerSta..."
getConstant: InnerStaticInitializerOnHelper
expr: true
getConstant: true
expr: "InnerSta..."
getConstant: InnerStaticInitializerOffHelper
expr: false
getConstant: false
expr: "InnerSta..."
getConstant: InnerStaticInitializerOnHelperI
expr: true
getConstant: true
expr: "InnerSta..."
getConstant: InnerStaticInitializerOffHelperI
expr: false
getConstant: false
expr: "CycleSubOn"
getConstant: CycleSubOn
expr: true
getConstant: true
expr: "CycleSubOff"
getConstant: CycleSubOff
expr: false
getConstant: false
expr: true
getConstant: true
expr: "static i..."
getConstant: static initializer should throw
expr: false
getConstant: false
expr: "static i..."
getConstant: static initializer should not throw
expr: true
getConstant: true
expr: "construc..."
getConstant: constructor should throw
expr: false
getConstant: false
expr: "static i..."
getConstant: static initializer should not throw
expr: true
getConstant: true
expr: "inner st..."
getConstant: inner static initializer should throw
expr: false
getConstant: false
expr: "inner st..."
getConstant: inner static initializer should not throw
expr: true
getConstant: true
expr: "inner st..."
getConstant: inner static initializer of interface should throw
expr: false
getConstant: false
expr: "inner st..."
getConstant: inner static initializer of interface should not throw
expr: true
getConstant: true
expr: "static i..."
getConstant: static initializer in cyclic should throw
expr: true
getConstant: true
expr: "static i..."
getConstant: static initializer in cyclic should always throw
expr: false
getConstant: false
expr: true
getConstant: true
expr: false
getConstant: false
expr: 3
getConstant: 3
expr: 3
getConstant: 3
expr: 3
getConstant: 3
expr: 3
getConstant: 3
expr: 3
getConstant: 3
expr: 3
getConstant: 3
expr: 3
getConstant: 3
expr: 3
getConstant: 3
expr: 3
getConstant: 3
expr: 3
getConstant: 3
Unexpected exception while compiling: polyglot.util.InternalCompilerError: unhandled exception during compilation
polyglot.util.InternalCompilerError: unhandled exception during compilation
	at abc.main.Main.run(Main.java:593)
	at abc.testing.TestCase.runTest(TestCase.java:287)
	at abc.testing.Main.doCase(Main.java:282)
	at abc.testing.Main.main(Main.java:116)
Caused by: java.util.NoSuchElementException: No such class: InnerStaticInitializerOnHelperI$11
	at abc.weaving.aspectinfo.AbcFactory.sootClassToClassType(AbcFactory.java:93)
	at abc.aspectj.visit.PCStructure.insertClassAndSuperclasses(PCStructure.java:163)
	at abc.aspectj.visit.PCStructure.updateWithAllSootClasses(PCStructure.java:178)
	at abc.aspectj.visit.PatternMatcher.updateWithAllSootClasses(PatternMatcher.java:125)
	at abc.main.Main.weave(Main.java:802)
	at abc.main.Main.run(Main.java:522)
	... 3 more
FAIL: Test 667: "pureJava/assert coverage tests in one package [requires 1.4]" failed.


Running test 740: new/PR862/import any inner from interface implementor
Commandline: abc -d new/PR862 new/PR862/pack/ImportInnerFromInterfaceImplementor.java 
Compilation produced an unexpected number of errors: 1, should be 0
Actual errors found: 
Semantic Error at new/PR862/pack/ImportInnerFromInterfaceImplementor.java:5,0-16: Package "pack.C" not found.
FAIL: Test 740: "new/PR862/import any inner from interface implementor" failed.


Running test 752: bugs/problems with finalize call
Commandline: abc -d bugs bugs/Finalizer.java 
expr: true
getConstant: true
Compilation succeeded but was expected to fail.
FAIL: Test 752: "bugs/problems with finalize call" failed.


Running test 769: new/illegal name binding in around cflow
Commandline: abc -d new new/ArgsInCflowCf.java 
expr: "1-2"
getConstant: 1-2
expr: 3
getConstant: 3
expr: 1
getConstant: 1
expr: "3==foo(1)"
getConstant: 3==foo(1)
expr: 1
getConstant: 1
expr: 1
getConstant: 1
expr: true
getConstant: true
binary: x + "-" + y
node in is string lit: x + "-" + y kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: x + "-" kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: x kind: class polyglot.ext.jl.ast.Local_c
expr: "-"
getConstant: -
binary: x + "-" + y
node in is string lit: x + "-" + y kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: x + "-" kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: x kind: class polyglot.ext.jl.ast.Local_c
expr: "-"
getConstant: -
binary: x + "-" + y
node in is string lit: x + "-" + y kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: x + "-" kind: class soot.javaToJimple.jj.ast.JjBinary_c
node in is string lit: x kind: class polyglot.ext.jl.ast.Local_c
expr: "-"
getConstant: -
expr: 1
getConstant: 1
expr: 1
getConstant: 1
Compilation succeeded but was expected to fail.
FAIL: Test 769: "new/illegal name binding in around cflow" failed.


Running test 77201: abctests/bugs/declare soft and throw statements
Commandline: abc -d abctests/bugs abctests/bugs/ConvertToUnchecked.java 
expr: "hello"
getConstant: hello
expr: false
getConstant: false
expr: "shouldn\'..."
getConstant: shouldn't get here
expr: true
getConstant: true
expr: "bad"
getConstant: bad
expr: "hi"
getConstant: hi
expr: false
getConstant: false
expr: "bar"
getConstant: bar
expr: false
getConstant: false
expr: "bar"
getConstant: bar
Compilation produced an unexpected number of errors: 1, should be 0
Actual errors found: 
Semantic Error at ConvertToUnchecked.java:44,2-11: The exception java.io.IOException must be either caught or declared to be thrown
FAIL: Test 77201: "abctests/bugs/declare soft and throw statements" failed.


Running test 812: harness/CLE: no dir specified for sourceroots
Commandline: abc -d harness -sourceroots harness/ErrorTest.java 
Unexpected exception while compiling: polyglot.util.InternalCompilerError: unhandled exception during compilation
polyglot.util.InternalCompilerError: unhandled exception during compilation
	at abc.main.Main.run(Main.java:593)
	at abc.testing.TestCase.runTest(TestCase.java:287)
	at abc.testing.Main.doCase(Main.java:282)
	at abc.testing.Main.main(Main.java:116)
Caused by: java.lang.IllegalArgumentException: Sourceroot harness/ErrorTest.java is not a directory
	at abc.main.Main.findSourcesInDir(Main.java:680)
	at abc.main.Main.loadSourceRoots(Main.java:697)
	at abc.main.Main.run(Main.java:513)
	... 3 more
FAIL: Test 812: "harness/CLE: no dir specified for sourceroots" failed.


Running test 951: bugs/deprecated/-deprecation not working?
Commandline: abc -d bugs/deprecated -deprecation bugs/deprecated/Deprecation.java bugs/deprecated/Deprecated.java 
Illegal arguments: Unknown option -deprecation
FAIL: Test 951: "bugs/deprecated/-deprecation not working?" failed.


Running test 979: abctests/bugs/pack1/packages in wrong place
Commandline: abc -d abctests/bugs/pack1 abctests/bugs/pack1/A/B.java 
Unexpected exception while compiling: polyglot.util.InternalCompilerError: exception while resolving C.B
polyglot.util.InternalCompilerError: exception while resolving C.B
	at abc.aspectj.visit.Jimplify$AbcClassSource.resolve(Jimplify.java:88)
	at soot.SootResolver.bringToHierarchy(SootResolver.java:147)
	at soot.SootResolver.bringToSignatures(SootResolver.java:171)
	at soot.SootResolver.bringToBodies(SootResolver.java:213)
	at soot.SootResolver.processResolveWorklist(SootResolver.java:102)
	at soot.SootResolver.resolveClass(SootResolver.java:88)
	at soot.Scene.loadClass(Scene.java:329)
	at abc.main.Main.compile(Main.java:750)
	at abc.main.Main.run(Main.java:518)
	at abc.testing.TestCase.runTest(TestCase.java:287)
	at abc.testing.Main.doCase(Main.java:282)
	at abc.testing.Main.main(Main.java:116)
Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: -1
	at java.lang.String.substring(String.java:1438)
	at java.lang.String.substring(String.java:1411)
	at soot.javaToJimple.InitialResolver.createClassToSourceMap(InitialResolver.java:173)
	at soot.javaToJimple.InitialResolver.resolveAST(InitialResolver.java:144)
	at abc.aspectj.visit.Jimplify$AbcClassSource.resolve(Jimplify.java:81)
	... 11 more
FAIL: Test 979: "abctests/bugs/pack1/packages in wrong place" failed.


Running test 982: abctests/bugs/needing declare parents to resolve inner class reference
Commandline: abc -d abctests/bugs abctests/bugs/DeclareParentsInner.java 
Compilation produced an unexpected number of errors: 1, should be 0
Actual errors found: 
Semantic Error at abctests/bugs/DeclareParentsInner.java:8,13-18: Could not find type "Inner".
FAIL: Test 982: "abctests/bugs/needing declare parents to resolve inner class reference" failed.


Running test 983: abctests/bugs/declareparentsbinary/declare parents on binary classes needs to modify constructor calls 1
Commandline: abc -d abctests/bugs/declareparentsbinary -injars abctests/bugs/declareparentsbinary/BinaryClasses.jar abctests/bugs/declareparentsbinary/Aspect.java 
expr: true
getConstant: true
Failed to find class BinaryClass
FAIL: Test 983: "abctests/bugs/declareparentsbinary/declare parents on binary classes needs to modify constructor calls 1" failed.


Running test 984: abctests/bugs/declareparentsbinary/declare parents on binary classes needs to modify constructor calls 2
Commandline: abc -d abctests/bugs/declareparentsbinary -injars abctests/bugs/declareparentsbinary/BinaryClasses2.jar abctests/bugs/declareparentsbinary/Aspect.java 
expr: true
getConstant: true
Compilation succeeded but was expected to fail.
FAIL: Test 984: "abctests/bugs/declareparentsbinary/declare parents on binary classes needs to modify constructor calls 2" failed.


Running test 986: abctests/bugs/Matching int[].clone()
Commandline: abc -d abctests/bugs abctests/bugs/IntArray.java 
Compilation produced an unexpected number of errors: 2, should be 0
Actual errors found: 
Syntax Error at abctests/bugs/IntArray.java:14,28-31: Syntax error.
Syntax Error at abctests/bugs/IntArray.java:15,3-4: Syntax error.
FAIL: Test 986: "abctests/bugs/Matching int[].clone()" failed.


