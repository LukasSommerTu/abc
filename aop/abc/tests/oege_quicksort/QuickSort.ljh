public class QuickSort {
    public static void quicksort(Comparable[] elements, int start, int end) {
        if (start + 1 < end) {
            QuickSort.Middle middle = QuickSort.partition(elements[start], elements, start, end);
            QuickSort.quicksort(elements, start, middle.left);
            QuickSort.quicksort(elements, middle.right, end);
        }
    }
    
    private static class Middle {
        int left;
        
        int right;
        
        Middle(int left, int right) {
            super();
            this.left = left;
            this.right = right;
        }
    }
    
    
    private static QuickSort.Middle partition(Comparable pivot, Comparable[] elements, int start, int end) {
        int middle = start;
        while (middle < end) {
            if (pivot.compareTo(elements[middle]) < 0) {
                QuickSort.swap(elements, middle, end - 1);
                end--;
            } else
                if (pivot.compareTo(elements[middle]) == 0) {
                    middle++;
                } else {
                    QuickSort.swap(elements, start, middle);
                    start++;
                    middle++;
                }
        }
        return new QuickSort.Middle(start, end);
    }
    
    private static void swap(Object[] elements, int p1, int p2) {
        Object temp = elements[p1];
        elements[p1] = elements[p2];
        elements[p2] = temp;
    }
    
    public QuickSort() { super(); }
}
