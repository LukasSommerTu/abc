import polyglot.util.InternalCompilerError;

aspect AdviceCodegen {
  inh Aspect BodyDecl.aspectClass();
  eq AspectDecl.getBodyDecl().aspectClass() = globalAspectInfo().getAspect(abcClass());
  eq Program.getCompilationUnit().aspectClass() { throw new Error("Missing equation for aspectClass()"); }

  public int TypeDecl.adviceCounter = 0;
  syn lazy String AdviceDecl.name() = "advice$" + hostType().adviceCounter++;

  public void AdviceDecl.jimplify1phase2() {
    hostType().getSootClassDecl().addMethod(sootMethod());
    createAspectInfo();
  }

  syn lazy SootMethod AdviceDecl.sootMethod() {
    ArrayList list = new ArrayList();
    for(int i = 0; i < getAdviceSpec().getNumParameter(); i++)
      list.add(getAdviceSpec().getParameter(i).type().getSootType());
    return new SootMethod(name(), list, soot.VoidType.v(), sootTypeModifiers(), new ArrayList());
  }

  protected void AdviceDecl.createAspectInfo() {
    
    Pointcut pc = getPointcutExpr().pointcut();

    globalAspectInfo().addAdviceDecl(new abc.weaving.aspectinfo.AdviceDecl(
      getAdviceSpec().adviceSpec(),
      pc,
      methodSig(),
      aspectClass(),
      -1 /*jp*/,
      -1 /*jpsp*/,
      -1 /*ejp*/,
      new ArrayList(),
      pos()
    ));
  }

  protected MethodSig AdviceDecl.methodSig() {
    ArrayList list = new ArrayList();
    for(int i = 0; i < getAdviceSpec().getNumParameter(); i++)
      list.add(getAdviceSpec().getParameter(i).formal());
    return new MethodSig(
      sootTypeModifiers(),
	    AbcFactory.AbcClass(hostType().getSootClassDecl()),
	    AbcFactory.AbcType(soot.VoidType.v()),
      name(),
	    list,
	    new ArrayList(),
      pos()
    );
  }

  /*abstract*/ public abc.weaving.aspectinfo.AdviceSpec AdviceSpec.adviceSpec() {
    throw new Error("adviceSpec() not implemented for " + getClass().getName());
  }

  public abc.weaving.aspectinfo.AdviceSpec BeforeSpec.adviceSpec() {
    return new BeforeAdvice(pos());
  }
  public abc.weaving.aspectinfo.AdviceSpec AfterSpec.adviceSpec() {
    return new AfterAdvice(pos());
  }

  MemberPattern implements abc.weaving.aspectinfo.MethodPattern;
  public boolean MemberPattern.matchesCall(SootMethodRef smr) { return false; }
  public boolean MemberPattern.matchesExecution(SootMethod sm) { return false; }
  public boolean MemberPattern.equivalent(abc.weaving.aspectinfo.MethodPattern p) { return false; }
  public abc.aspectj.ast.MethodPattern MemberPattern.getPattern() { return null; }

  public boolean MethodPattern.matchesCall(SootMethodRef smr) {
    // check modifiers, return type, name, formals, exceptions
    SootMethod m = smr.resolve();
    if(!getReturnTypePattern().matchesType(m.getReturnType()))
      return false;
    if(!getMemberNamePattern().matchesTypeAndName(m))
      return false;
    return true;
  }
  public boolean MethodPattern.matchesExecution(SootMethod sm) { return false; }
  public boolean MethodPattern.equivalent(abc.weaving.aspectinfo.MethodPattern p) { return false; }
  public abc.aspectj.ast.MethodPattern MethodPattern.getPattern() {
    throw new InternalCompilerError("Can not get polyglot frontend pattern from JastAdd");
  }

  syn lazy java.util.regex.Pattern SimpleNamePattern.regex() {
    String p = getPattern();
    p = p.replaceAll("\\*", ".*");
    p = p.replaceAll("\\$","\\\\\\$");
    p = "^" + p + "$";
    return java.util.regex.Pattern.compile(p);
  }


  syn boolean Pattern.matchesTypeAndName(SootMethod m) = false;
  syn boolean Pattern.matchesName(String name) = false;

  eq SimpleNamePattern.matchesTypeAndName(SootMethod m) =
    matchesName(m.getName());

  eq SimpleNamePattern.matchesName(String name) =
    regex().matcher(name).matches();

  eq TypeDotNamePattern.matchesTypeAndName(SootMethod m) {
    throw new InternalCompilerError("matches not implemented for " + getClass().getName());
  }
  eq DotNamePattern.matchesTypeAndName(SootMethod m) {
    // TODO: match type on left hand side
    // and name on right hand side

    if(m.isStatic()) {
      return getLhs().matchesType(m.getDeclaringClass()) && getRhs().matchesName(m.getName());
    }
    return false;
  }

  syn boolean Pattern.matchesType(SootClass c) = false;
  eq SimpleNamePattern.matchesType(SootClass c) = matchesName(c.getShortName());
  eq ExplicitTypeNamePattern.matchesType(SootClass c) =
    getAccess().type().fullName().equals(c.getName())
    && getAccess().isTypeAccess();

  syn boolean Pattern.matchesType(Type t) = false;
  eq SimpleNamePattern.matchesType(Type t) {
    if(! (t instanceof RefType)) {
      return matchesName(t.toString());
    }
    SootClass c = ((RefType) t).getSootClass();
    return matchesType(c);
  }
  eq ExplicitTypeNamePattern.matchesType(Type t) = 
    getAccess().type().name().equals(t.toString())
    && getAccess().isTypeAccess();

  syn int AdviceDecl.sootTypeModifiers() {
    int result = 0;
    result |= soot.Modifier.PUBLIC;
    if(getModifiers().isSynchronized()) result |= soot.Modifier.SYNCHRONIZED;
    if(getModifiers().isStrictfp()) result |= soot.Modifier.STRICTFP;
    return result;
  }

  public void AdviceDecl.jimplify2() {
    JimpleBody body = Jimple.v().newBody(sootMethod());
    sootMethod().setActiveBody(body);
    Body b = new Body(body);
    b.addThis(hostType());
    for(int i = 0; i < getAdviceSpec().getNumParameter(); i++)
      getAdviceSpec().getParameter(i).jimplify2(b);
    getBlock().jimplify2(b);
    b.add(Jimple.v().newReturnVoidStmt());
  }
  eq AdviceSpec.getParameter(int index).localNum() = index;

}
