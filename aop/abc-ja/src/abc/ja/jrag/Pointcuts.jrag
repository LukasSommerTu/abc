aspect Pointcuts
{
    // ----------------------------------------------------
    //   Pointcut declarations
    // ----------------------------------------------------
    //
    // To be a BodyDecl, PointcutDecl must answer some
    // questions about its children.

    eq PointcutDecl.getParameter(int i).isMethodParameter() = false;
    eq PointcutDecl.getParameter(int i).isConstructorParameter() = false;
    eq PointcutDecl.getParameter(int i).isExceptionHandlerParameter() = false;
    eq PointcutDecl.getParameter(int i).nameType() = NameType.TYPE_NAME;
    
    eq NamedPointcutExpr.getPattern(int i).nameType() = NameType.AMBIGUOUS_NAME;


    // Modifiers allowed for pointcut declarations

    eq PointcutDecl.getModifiers().mayBePublic() = true;
    eq PointcutDecl.getModifiers().mayBePrivate() = true;
    eq PointcutDecl.getModifiers().mayBeProtected() = true;
    eq PointcutDecl.getModifiers().mayBeAbstract() = true;
    eq PointcutDecl.getModifiers().mayBeFinal() = true;

    syn boolean PointcutDecl.isPublic() = getModifiers().isPublic();
    syn boolean PointcutDecl.isPrivate() = getModifiers().isPrivate();
    syn boolean PointcutDecl.isProtected() = getModifiers().isProtected();
    syn boolean PointcutDecl.isAbstract() = getModifiers().isAbstract();
    syn boolean PointcutDecl.isFinal() = getModifiers().isFinal();


    // Pointcut variables are those declared by named pointcut declarations
    // or advice (see Advice.jrag)
    inh boolean Variable.isPointcutVariable();
    eq Program.getCompilationUnit().isPointcutVariable() = false;
    eq PointcutDecl.getParameter(int i).isPointcutVariable() = true;

    eq IfPointcutExpr.getExpr().nameType() = NameType.EXPRESSION_NAME;

    // The advice/pointcut formal parameters should be visible
    // to the pointcut and the parameters themselves.

    eq PointcutDecl.getParameter(int i).lookupVariable(String name) {
        SimpleSet result = localLookupVariable(name);
        if (!result.isEmpty())
            return result;
        return lookupVariable(name);
    }

    eq PointcutDecl.getPointcutExpr().lookupVariable(String name) {
        SimpleSet result = localLookupVariable(name);
        if (!result.isEmpty())
            return result;
        return lookupVariable(name);
    }

    syn SimpleSet PointcutDecl.localLookupVariable(String name) {
        for(int i = 0; i < getNumParameter(); i++)
            if(getParameter(i).name().equals(name))
                return SimpleSet.emptySet.add(getParameter(i));
        return SimpleSet.emptySet;
    }

    // want to use lookupVariable on this node
    inh SimpleSet PointcutExpr.lookupVariable(String name);


    // args, this, and target can only refer to pointcut variables
    // or types
    eq ArgsPointcutExpr.getPattern().lookupVariable(String name) =
        lookupPointcutVariable(name);
    eq ThisPointcutExpr.getPattern().lookupVariable(String name) =
        lookupPointcutVariable(name);
    eq TargetPointcutExpr.getPattern().lookupVariable(String name) =
        lookupPointcutVariable(name);

    syn SimpleSet PointcutExpr.lookupPointcutVariable(String name)
    {
        SimpleSet result = SimpleSet.emptySet;
        Iterator iter = lookupVariable(name).iterator();
        while (iter.hasNext()) {
            Variable v = (Variable)iter.next();
            if(v.isPointcutVariable())
                result = result.add(v);
        }
        return result;
    }


    // ----------------------------------------------------
    //   Looking up named pointcuts
    // ----------------------------------------------------

    syn String PointcutDecl.name() = getID();
    syn String PointcutAccess.name() = getID();
    eq PointcutAccess.predNameType() = NameType.TYPE_NAME;

    syn PointcutDecl PointcutAccess.decl()
    {
        SimpleSet decls = decls();
        if (decls.size() == 1) 
            return (PointcutDecl) decls.iterator().next();
        return null;
    }

    syn SimpleSet PointcutAccess.decls()
    {
        SimpleSet concrete = SimpleSet.emptySet;
        SimpleSet abstr = SimpleSet.emptySet;

        Iterator i = lookupPointcut(name()).iterator();
        while (i.hasNext()) {
            PointcutDecl decl = (PointcutDecl) i.next();
            if (decl.isAbstract())
                abstr = SimpleSet.emptySet.add(decl);
            else
                concrete = concrete.add(decl);
        }
        if (concrete.isEmpty())
            return abstr;
        else
            return concrete;
    }

    public void PointcutAccess.nameCheck()
    {
        SimpleSet decls = decls();
        if (decls.size() == 0)
            error("cannot find pointcut " + name());
        else if (decls.size() > 1)
            error("found multiple definitions of pointcut " + name());
    }

    inh SimpleSet PointcutAccess.lookupPointcut(String name);
    inh SimpleSet TypeDecl.lookupPointcut(String name);
    eq Program.getCompilationUnit().lookupPointcut(String name) =
        SimpleSet.emptySet;
    eq TypeDecl.getBodyDecl(int i).lookupPointcut(String name) {
        SimpleSet set = lookupMemberPointcut(name);
        if(!set.isEmpty()) return set;
        return lookupPointcut(name);
    }
    eq AbstractDot.getRight().lookupPointcut(String name) =
        getLeft().type().lookupMemberPointcut(name);


    syn SimpleSet TypeDecl.lookupMemberPointcut(String name)
    {
        SimpleSet decls;
        for (int i = 0; i < getNumBodyDecl(); i++) {
            decls = getBodyDecl(i).lookupMemberPointcut(name);
            if (decls.size() > 0)
                return decls;
        }
        return SimpleSet.emptySet;
    }

    eq ClassDecl.lookupMemberPointcut(String name)
    {
        SimpleSet decls = super.lookupMemberPointcut(name);

        if (hasSuperclass()) {
            Iterator i = superclass().lookupMemberPointcut(name).iterator();
            while (i.hasNext())
                decls = decls.add(i.next());
        }

        Iterator i = interfacesIterator();
        while (i.hasNext()) {
            TypeDecl iface = (TypeDecl) i.next();
            Iterator j = iface.lookupMemberPointcut(name).iterator();
            while (j.hasNext())
                decls = decls.add(j.next());
        }

        return decls;
        // hasSuperclass(), superclass(), interfacesIterator()
    }

    // InterfaceDecl
    // superInterfacesIterator()
    eq InterfaceDecl.lookupMemberPointcut(String name)
    {
        SimpleSet decls = super.lookupMemberPointcut(name);

        Iterator i = superinterfacesIterator();
        while (i.hasNext()) {
            TypeDecl iface = (TypeDecl) i.next();
            Iterator j = iface.lookupMemberPointcut(name).iterator();
            while (j.hasNext())
                decls = decls.add(j.next());
        }

        return decls;
    }

    syn SimpleSet BodyDecl.lookupMemberPointcut(String name);
    eq BodyDecl.lookupMemberPointcut(String name) = SimpleSet.emptySet;
    eq PointcutDecl.lookupMemberPointcut(String name)
    {
        if (name.equals(name()))
            return SimpleSet.emptySet.add(this);
        return SimpleSet.emptySet;
    }

    eq PointcutAccess.dumpString() = super.dumpString() + " " + decl().name();


    // ----------------------------------------------------
    //   Pointcut variable binding
    // ----------------------------------------------------
    // 
    // For a pointcut, p, p.binds(var) is:
    //   2 - if |p| may bind |var| more than once
    //   1 - if |p| must bind |var| exactly once
    //   0 - otherwise

    syn int PointcutExpr.binds(String var) = 0;

    // binary pointcuts
    eq AndPointcutExpr.binds(String var) {
        int combination = getLhs().binds(var) + getRhs().binds(var);
        return (combination > 2) ? 2 : combination;
    }
    eq OrPointcutExpr.binds(String var) {
        int combination = getLhs().binds(var) * getRhs().binds(var);
        return (combination > 2) ? 2 : combination;
    }
        
    // cflow pointcuts
    eq CflowPointcutExpr.binds(String var) = getPointcut().binds(var);
    eq CflowBelowPointcutExpr.binds(String var) = getPointcut().binds(var);

    // FIXME!!!
    eq ThisPointcutExpr.binds(String var) = 1;
    eq TargetPointcutExpr.binds(String var) = 1;
    eq ArgsPointcutExpr.binds(String var) = 1;
    eq NamedPointcutExpr.binds(String var) = 1;
}
