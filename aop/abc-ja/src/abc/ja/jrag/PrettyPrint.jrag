aspect PrettyPrint {

    // ASTNode.toString() is "" unless overridden, so let's do something 
    // more useful for patterns (possibly better off in a PrettyPrint
    // jrag?):
    public String AndPattern.toString() {
    	return "(" + getLhs() + ") && (" + getRhs() + ")";
    }
    public void AndPattern.toString(StringBuffer s) {
    	s.append("(");
    	getLhs().toString(s);
    	s.append(") && (");
    	getRhs().toString(s);
    	s.append(")");
    }
    public String OrPattern.toString() {
    	return "(" + getLhs() + ") || (" + getRhs() + ")";
    }
    public void OrPattern.toString(StringBuffer s) {
    	s.append("(");
    	getLhs().toString(s);
    	s.append(") || (");
    	getRhs().toString(s);
    	s.append(")");
    }
    public String NegPattern.toString() {
    	return "!(" + getPattern() + ")";
    }
    public void NegPattern.toString(StringBuffer s) {
    	s.append("!");
    	getPattern().toString(s);
    }
    public String SimpleNamePattern.toString() {
    	return getPattern();
    }
    public void SimpleNamePattern.toString(StringBuffer s) {
    	s.append(getPattern());
    }
    public String DotNamePattern.toString() {
    	return getLhs() + "." + getRhs();
    }
    public void DotNamePattern.toString(StringBuffer s) {
    	getLhs().toString(s);
    	s.append(".");
    	getRhs().toString(s);
    }
    public String DotDotNamePattern.toString() {
    	return getLhs() + ".." + getRhs();
    }
    public void DotDotNamePattern.toString(StringBuffer s) {
    	getLhs().toString(s);
    	s.append("..");
    	getRhs().toString(s);
    }
    public String TypeDotNamePattern.toString() {
    	return getLhs() + "." + getRhs();
    }
    public void TypeDotNamePattern.toString(StringBuffer s) {
    	getLhs().toString(s);
    	s.append(".");
    	getRhs().toString(s);
    }
    public String ExplicitTypeNamePattern.toString() {
    	return getAccess().toString();
    }
    public void ExplicitTypeNamePattern.toString(StringBuffer s) {
    	getAccess().toString(s);
    }
    public String SubtypeNamePattern.toString() {
    	return getPattern() + "+";
    }
    public void SubtypeNamePattern.toString(StringBuffer s) {
    	getPattern().toString(s);
    	s.append("+");
    }
    public String ArraytypeNamePattern.toString() {
    	String dims = "";
    	for(int i = 0; i < getNumDims(); i++) {
    		dims += "[]";
    	}
    	return getPattern() + dims;
    }
    public void ArraytypeNamePattern.toString(StringBuffer s) {
    	getPattern().toString(s);
    	for (int i = 0; i < getNumDims(); i++) {
    		s.append("[]");
    	}
    }
    
    public void WildcardFormalPattern.toString(StringBuffer s) {
    	s.append("..");
    }
    public void ConcreteFormalPattern.toString(StringBuffer s) {
    	getPattern().toString(s);
    }
    
    // FIXME: more advanced pretty-printing for patterns?
    public void FieldPattern.toString(StringBuffer sb)
    {
        sb.append("<field pattern>");
    }
    public void MethodPattern.toString(StringBuffer sb)
    {
    	for (ModifierPattern pat : getModifierPatterns()) {
    		pat.toString(sb);
    		sb.append(" ");
    	}
    	
    	getReturnTypePattern().toString(sb);
    	sb.append(" ");
    	getMemberNamePattern().toString(sb);
    	
    	sb.append("(");
    	boolean first = true;
    	for (FormalPattern pat : getFormalPatterns()) {
    		if (!first) {
    			sb.append(", ");
    		}
    		pat.toString(sb);
    		if (first) {
    			first = false;
    		}
    	}
    	
    	sb.append(")");
    	
    	first = true;
    	for (Pattern pat : getThrowsPatterns()) {
    		if (!first) {
    			sb.append(", ");
    		} else {
   		    	sb.append(" throws ");
    		}
    		pat.toString(sb);
    		if (first) {
    			first = false;
    		}
    	}
    	
    }
    
    public void ConstructorPattern.toString(StringBuffer sb)
    {
        sb.append("<constructor pattern>");
    }
    
    public void ModifierPattern.toString(StringBuffer s) {
    	getModifier().toString(s);
    }
    public void NegModifierPattern.toString(StringBuffer s) {
    	s.append("!");
    	getModifier().toString(s);
    }
    
    
    //pointcut patterns
    public void OrPointcutExpr.toString(StringBuffer s) {
    	getLhs().toString(s);
    	s.append(" || ");
    	getRhs().toString(s);
    }
    public void AndPointcutExpr.toString(StringBuffer s) {
    	getLhs().toString(s);
    	s.append(" && ");
    	getRhs().toString(s);
    }
    public void NegPointcutExpr.toString(StringBuffer s) {
    	s.append("!");
    	getPointcutExpr().toString(s);
    }
    public void CallPointcutExpr.toString(StringBuffer s) {
    	s.append("call(");
    	getPattern().toString(s);
    	s.append(")");
    } 
    public void ExecutionPointcutExpr.toString(StringBuffer s) {
    	s.append("execution(");
    	getPattern().toString(s);
    	s.append(")");
    } 
    public void NamedPointcutExpr.toString(StringBuffer s) {
    	getName().toString(s);
    	s.append(" (");
    	boolean first = true;
    	for (BindingPattern pat : getPatternList()) {
    		if (!first) {
    			s.append(", ");
    		}
    		pat.toString(s);
    		if (first) {
    			first = false;
    		}
    	}
    	s.append(")");
    }
    public abstract void BindingPattern.toString(StringBuffer s);
    public void StarBindingPattern.toString(StringBuffer s) {
    	s.append("*");
    }
    public void DotDotBindingPattern.toString(StringBuffer s) {
    	s.append("..");
    }
    public void NameBindingPattern.toString(StringBuffer s) {
    	getPattern().toString(s);
    }
    public void PointcutAccess.toString(StringBuffer s) {
    	s.append(getID());
    }
}