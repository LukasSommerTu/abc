aspect AspectJNameAnalysis {

  // transitive "implements" test
  syn boolean TypeDecl.implement(TypeDecl typeDecl) = false;
  eq ClassDecl.implement(TypeDecl typeDecl) {
    for(int i = 0; i < getNumImplements(); i++)
      if(getImplements(i).type().instanceOf(typeDecl))
        return true;
    return false;
  }

  refine IntertypeMethodErrorCheck eq AspectDecl.localMethodsSignatureMap() {
    addImplicitMethods();
    return IntertypeMethodErrorCheck.AspectDecl.localMethodsSignatureMap();
  }

  private boolean AspectDecl.addImplicitMethods = true;
  private void AspectDecl.addImplicitMethods() {
    if(!addImplicitMethods || isAbstract())
      return;
    addImplicitMethods = false;
    List parameters = new List();
    if(getPerClause().isPerObject())
      parameters.add(new ParameterDeclaration(new Modifiers(new List()), typeObject().createQualifiedAccess(), "obj"));
    MethodDecl aspectOf = 
      new MethodDecl(
        new Modifiers(new List().add(new Modifier("public")).add(new Modifier("static")).add(new Modifier("synthetic"))),
        createQualifiedAccess(),
        "aspectOf",
        parameters,
        new List(),
        new List(),
        new Opt(new Block(new List().add(new ReturnStmt(new Opt(new NullLiteral())))))
      );
    parameters = new List();
    if(getPerClause().isPerObject())
      parameters.add(new ParameterDeclaration(new Modifiers(new List()), typeObject().createQualifiedAccess(), "obj"));
    MethodDecl hasAspect =
      new MethodDecl(
        new Modifiers(new List().add(new Modifier("public")).add(new Modifier("static")).add(new Modifier("synthetic"))),
        typeBoolean().createQualifiedAccess(),
        "hasAspect",
        parameters,
        new List(),
        new List(),
        new Opt(new Block(new List().add(new ReturnStmt(new Opt(new BooleanLiteral("true"))))))
      );
    aspectOf.category = MethodCategory.ASPECT_INSTANCE;
    hasAspect.category = MethodCategory.ASPECT_INSTANCE;
    addBodyDecl(aspectOf);
    addBodyDecl(hasAspect);
  }
  inh TypeDecl AspectDecl.typeBoolean();

  syn boolean PerClause.isPerObject() = false;
  eq PerTarget.isPerObject() = true;
  eq PerThis.isPerObject() = true;

  eq AspectDecl.getPerClause().hostType() = this;

  eq AspectDecl.getPerClause().lookupVariable(String name) {
    SimpleSet list = memberFields(name);
    if(!list.isEmpty()) return list;
    list = lookupVariable(name);
    if(inStaticContext() || isStatic() || (isAnonymous() && inExplicitConstructorInvocation()))
      list = removeInstanceVariables(list);
    return list;
  }
  eq AspectDecl.getPerClause().lookupMethod(String name) = unqualifiedLookupMethod(name);
  eq AspectDecl.getPerClause().lookupType(String name) {
    SimpleSet c = memberTypes(name);
    if(!c.isEmpty()) 
      return c;
    if(name().equals(name))
      return SimpleSet.emptySet.add(this);

    c = lookupType(name);
    // 8.5.2
    if(isClassDecl() && isStatic() && !isTopLevelType()) {
      SimpleSet newSet = SimpleSet.emptySet;
      for(Iterator iter = c.iterator(); iter.hasNext(); ) {
        TypeDecl d = (TypeDecl)iter.next();
        //if(d.isStatic() || d.isTopLevelType() || this.instanceOf(d.enclosingType())) {
          newSet = newSet.add(d);
        //}
      }
      c = newSet;
    }
    return c;
  }
  eq AspectDecl.getPerClause().inStaticContext() = true;

}
