aspect Patterns
{
    // Check if a pattern contains a wildcard
    syn boolean Pattern.containsWildcard() = false;
    eq DotDotNamePattern.containsWildcard() = true;
    eq SimpleNamePattern.containsWildcard() =
            getPattern().indexOf('*') != -1;
    eq DotNamePattern.containsWildcard() =
            getLhs().containsWildcard() || getRhs().containsWildcard();
    
    // Does this DotNamePattern correspond to a classtype_dot_id, i.e. is the Rhs
    // a member pattern, or is the whole thing a type pattern?
    inh boolean DotNamePattern.denotesMember();
    // In these cases, Rhs is a member pattern.
    eq MethodPattern.getMemberNamePattern().denotesMember() = true;
    eq ConstructorPattern.getMemberNamePattern().denotesMember() = true;
    eq FieldPattern.getMemberNamePattern().denotesMember() = true;
    
    // Default: Try to interpret as non-member type pattern.
    eq TypeDecl.getBodyDecl().denotesMember() = false;
    eq AspectDecl.getPerClause().denotesMember() = false;
    
    // Children of Dot[Dot]NamePattern are never member patterns.
    eq DotNamePattern.getLhs().denotesMember() = false;
    eq DotNamePattern.getRhs().denotesMember() = false;
    eq DotDotNamePattern.getLhs().denotesMember() = false;
    eq DotDotNamePattern.getRhs().denotesMember() = false;
    
    syn boolean Pattern.isExplicitTypeName() = false;
    eq ExplicitTypeNamePattern.isExplicitTypeName() = true;
    eq SubtypeNamePattern.isExplicitTypeName() = true;
    // Rewrite all DotNamePatterns that denote a type and contain no
    // wildcards to ExplicitTypeNamePatterns.
    rewrite DotNamePattern {
    	when(denotesMember() && !getLhs().containsWildcard() && !getLhs().isExplicitTypeName())
    	to DotNamePattern {
    		setLhs(new ExplicitTypeNamePattern(getLhs().buildAccess()));
    		return this;
    	}
    	when(!denotesMember() && !containsWildcard())
    	to ExplicitTypeNamePattern {
    		return new ExplicitTypeNamePattern(buildAccess());
    	}
    }
    rewrite SubtypeNamePattern {
    	when(!getPattern().containsWildcard() && !getPattern().isExplicitTypeName())
    	to SubtypeNamePattern {
    		setPattern(new ExplicitTypeNamePattern(getPattern().buildAccess()));
    		return this;
    	}
    }
    
    // Build Access nodes for patterns with no wildcards
    protected Access Pattern.buildAccess()
    {
        throw new RuntimeException(
                "buildAccess() not supported for " + getClass().getName());
    }

    protected Access SimpleNamePattern.buildAccess()
    {
        return new ParseName(getPattern());
    }

    protected Access ExplicitTypeNamePattern.buildAccess()
    {
        return getAccess();
    }

    protected Access DotNamePattern.buildAccess()
    {
        return getLhs().buildAccess().qualifiesAccess(getRhs().buildAccess());
    }


    // syntactic classification of explicit names in patterns
    // (see SyntacticClassification.jrag)
    eq AdviceDecl.getPointcutExpr().nameType() =
        NameType.TYPE_NAME;
    eq AspectDecl.getPerClause().nameType() =
        NameType.TYPE_NAME;
    
    eq DeclareWarning.getPointcutExpr().nameType() =
        NameType.TYPE_NAME;
    eq DeclareError.getPointcutExpr().nameType() =
        NameType.TYPE_NAME;
    eq DeclareSoft.getPointcutExpr().nameType() =
        NameType.TYPE_NAME;
    eq DeclareParentsExtends.getPattern().nameType() =
        NameType.TYPE_NAME;
    eq DeclareParentsImplements.getPattern().nameType() =
        NameType.TYPE_NAME;
    eq DeclarePrecedence.getPattern().nameType() =
        NameType.TYPE_NAME;
    
    eq PointcutDecl.getPointcutExpr().nameType() =
        NameType.TYPE_NAME;
    
    
    eq ArgsPointcutExpr.getPattern(int i).nameType() =
            NameType.AMBIGUOUS_NAME;
    eq ThisPointcutExpr.getPattern().nameType() =
            NameType.AMBIGUOUS_NAME;
    eq TargetPointcutExpr.getPattern().nameType() =
            NameType.AMBIGUOUS_NAME;

    // syntactic classification of method/constructor/field patterns
    // defaults:
    syn boolean MemberPattern.isMethodPattern() = false;
    syn boolean MemberPattern.isConstructorPattern() = false;
    syn boolean MemberPattern.isFieldPattern() = false;
    // overrides:
    syn boolean MethodPattern.isMethodPattern() = true;
    syn boolean ConstructorPattern.isConstructorPattern() = true;
    syn boolean FieldPattern.isFieldPattern() = true;
}
