aspect IntertypeFieldErrorCheck {
  public void IntertypeFieldDeclaration.typeCheck() {
    super.typeCheck();
    if(introducedType().isInterfaceDecl() && isStatic())
      error("static inter-type field on interface not supported");
  }

  refine NameCheck public void FieldDeclaration.nameCheck() {
    for(Iterator iter = hostType().memberFields(name()).iterator(); iter.hasNext(); ) {
      FieldDeclaration v = (FieldDeclaration)iter.next();
      if(v != this && v.accessibleFrom(hostType()))
        error("field named " + name() + " is multiply declared in type " + hostType().typeName());
    }
  }

  public void IntertypeFieldDeclaration.nameCheck() {
    if(!introducedType().memberFields(name()).contains(this))
      error("field is already declared");
    else {
      for(Iterator iter = introducedType().memberFields(name()).iterator(); iter.hasNext(); ) {
        FieldDeclaration v = (FieldDeclaration)iter.next();
        if(v != this && v.accessibleFrom(hostAspect()))
          error("field named " + name() + " is multiply declared in type " + hostType().typeName());
      }
    }
  }

  // disable definite assignment in intertype field declarations
  public void IntertypeFieldDeclaration.definiteAssignment() {
  }

  eq IntertypeFieldDeclaration.getModifiers().mayBeProtected() = false;
}
