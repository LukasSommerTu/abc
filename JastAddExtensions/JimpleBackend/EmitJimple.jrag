import soot.*;
import soot.util.*;
import soot.jimple.*;
import soot.coffi.ClassFile;
import soot.coffi.method_info;

aspect EmitJimple {
  public void Program.jimplify1() {
    for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
      CompilationUnit u = (CompilationUnit)iter.next();
      if(u.fromSource())
        u.jimplify1phase1();
    }
    for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
      CompilationUnit u = (CompilationUnit)iter.next();
      if(u.fromSource())
        u.jimplify1phase2();
    }
  }
  
  inh CompilationUnit TypeDecl.compilationUnit();
  eq CompilationUnit.getTypeDecl(int i).compilationUnit() = this;
  eq CompilationUnit.getImportDecl(int i).compilationUnit() = this;

  syn lazy SootClass TypeDecl.getSootClassDecl() {
    if(compilationUnit().fromSource()) {
      return sootClass();
    }
    else {
      if(Program.verbose())
        System.out.println("Loading .class file " + jvmName());
      SootClass sc = Scene.v().loadClass(jvmName(), SootClass.SIGNATURES);
      sc.setLibraryClass();
      return sc;
      //return Scene.v().loadClassAndSupport(jvmName());
    }
  }
  eq ArrayDecl.getSootClassDecl() = typeObject().getSootClassDecl();
  
  syn lazy Type TypeDecl.getSootType() = getSootClassDecl().getType();
  eq BooleanType.getSootType() = soot.BooleanType.v();
  eq ByteType.getSootType() = soot.ByteType.v();
  eq ShortType.getSootType() = soot.ShortType.v();
  eq IntType.getSootType() = soot.IntType.v();
  eq LongType.getSootType() = soot.LongType.v();
  eq CharType.getSootType() = soot.CharType.v();
  eq FloatType.getSootType() = soot.FloatType.v();
  eq DoubleType.getSootType() = soot.DoubleType.v();
  eq VoidType.getSootType() = soot.VoidType.v();
  eq ArrayDecl.getSootType() = soot.ArrayType.v(elementType().getSootType(), dimension());

  syn soot.RefType TypeDecl.sootRef() = (soot.RefType)getSootType();

  public void ASTNode.jimplify1phase1() {
    for(int i = 0; i < getNumChild(); i++)
      getChild(i).jimplify1phase1();
  }
  
  syn lazy SootClass TypeDecl.sootClass() = null;
  eq ClassDecl.sootClass() {
    if(Program.verbose())
      System.out.println("Creating from source " + jvmName());
    SootClass sc = new SootClass(jvmName(), sootTypeModifiers()); 
    Scene.v().addClass(sc);
    sc.setApplicationClass();
    return sc;
  }
  eq InterfaceDecl.sootClass() {
    if(Program.verbose())
      System.out.println("Creating from source " + jvmName());
    SootClass sc = new SootClass(jvmName(), sootTypeModifiers());
    Scene.v().addClass(sc);
    sc.setApplicationClass();
    return sc;
  }
  
  syn int TypeDecl.sootTypeModifiers() {
    int result = 0;
    if(isNestedType()) {
      result |= soot.Modifier.PUBLIC;
    }
    else {
      if(isPublic()) result |= soot.Modifier.PUBLIC;
      if(isProtected()) result |= soot.Modifier.PROTECTED;
      if(isPrivate()) result |= soot.Modifier.PRIVATE;
    }
    if(isFinal()) result |= soot.Modifier.FINAL;
    if(isStatic()) result |= soot.Modifier.STATIC;
    if(isAbstract()) result |= soot.Modifier.ABSTRACT;
    return result;
  }
  eq InterfaceDecl.sootTypeModifiers() = super.sootTypeModifiers() | soot.Modifier.INTERFACE;

  syn int MethodDecl.sootTypeModifiers() {
    int result = 0;
    if(isPublic()) result |= soot.Modifier.PUBLIC;
    if(isProtected()) result |= soot.Modifier.PROTECTED;
    if(isPrivate()) result |= soot.Modifier.PRIVATE;
    if(isFinal()) result |= soot.Modifier.FINAL;
    if(isStatic()) result |= soot.Modifier.STATIC;
    if(isAbstract()) result |= soot.Modifier.ABSTRACT;
    if(isSynchronized()) result |= soot.Modifier.SYNCHRONIZED;
    if(isStrictfp()) result |= soot.Modifier.STRICTFP;
    if(isNative()) result |= soot.Modifier.NATIVE;
    return result;
  }
  syn int ConstructorDecl.sootTypeModifiers() {
    int result = 0;
    if(isPublic()) result |= soot.Modifier.PUBLIC;
    if(isProtected()) result |= soot.Modifier.PROTECTED;
    if(isPrivate()) result |= soot.Modifier.PRIVATE;
    return result;
  }
  syn int FieldDeclaration.sootTypeModifiers() {
    int result = 0;
    if(isPublic()) result |= soot.Modifier.PUBLIC;
    if(isProtected()) result |= soot.Modifier.PROTECTED;
    if(isPrivate()) result |= soot.Modifier.PRIVATE;
    if(isFinal()) result |= soot.Modifier.FINAL;
    if(isStatic()) result |= soot.Modifier.STATIC;
    return result;
  }
  
  public void ASTNode.jimplify1phase2() {
    for(int i = 0; i < getNumChild(); i++)
      getChild(i).jimplify1phase2();
  }

  public void TypeDecl.jimplify1phase2() {
    for(Iterator iter = nestedTypes().iterator(); iter.hasNext(); ) {
      TypeDecl typeDecl = (TypeDecl)iter.next();
      typeDecl.jimplify1phase2();
    }
    for(int i = 0; i < getNumBodyDecl(); i++)
      if(getBodyDecl(i).generate())
        getBodyDecl(i).jimplify1phase2();
  }

  public void ClassDecl.jimplify1phase2() {
    SootClass sc = getSootClassDecl();
    if(hasSuperclass()) {
      sc.setSuperclass(superclass().getSootClassDecl());
    }
    for(Iterator iter = interfacesIterator(); iter.hasNext(); ) {
      TypeDecl typeDecl = (TypeDecl)iter.next();
      sc.addInterface(typeDecl.getSootClassDecl());
    }
    if(isNestedType())
      sc.setOuterClass(enclosingType().getSootClassDecl());
    super.jimplify1phase2();
  }

  public void InterfaceDecl.jimplify1phase2() {
    SootClass sc = getSootClassDecl();
    sc.setSuperclass(typeObject().getSootClassDecl());
    for(int i = 0; i < getNumSuperInterfaceId(); i++) {
      if(getSuperInterfaceId(i).type() != typeObject())
        sc.addInterface(getSuperInterfaceId(i).type().getSootClassDecl());
    }
    if(isNestedType())
      sc.setOuterClass(enclosingType().getSootClassDecl());
    super.jimplify1phase2();
  }
  
  public void BodyDecl.jimplify1phase2() {
  }

  public void MethodDecl.jimplify1phase2() {
    String name = name();
    ArrayList parameters = new ArrayList();
    for(int i = 0; i < getNumParameter(); i++)
      parameters.add(getParameter(i).type().getSootType());
    soot.Type returnType = type().getSootType();
    int modifiers = sootTypeModifiers();
    ArrayList throwtypes = new ArrayList();
    for(int i = 0; i < getNumException(); i++)
      throwtypes.add(getException(i).type().getSootClassDecl());
    SootMethod m = new SootMethod(name, parameters, returnType, modifiers, throwtypes);
    hostType().getSootClassDecl().addMethod(m);
    sootMethod = m;
  }
  public void ConstructorDecl.jimplify1phase2() {
    String name = "<init>";
    ArrayList parameters = new ArrayList();
    // this$0
    TypeDecl typeDecl = hostType();
    if(typeDecl.needsEnclosing())
      parameters.add(typeDecl.enclosingType().getSootType());
    if(typeDecl.needsSuperEnclosing()) {
      TypeDecl superClass = ((ClassDecl)typeDecl).superclass();
      parameters.add(superClass.enclosingType().getSootType());
    }
    // args
    for(int i = 0; i < getNumParameter(); i++)
      parameters.add(getParameter(i).type().getSootType());

    soot.Type returnType = soot.VoidType.v();
    int modifiers = sootTypeModifiers();
    ArrayList throwtypes = new ArrayList();
    for(int i = 0; i < getNumException(); i++)
      throwtypes.add(getException(i).type().getSootClassDecl());
    SootMethod m = new SootMethod(name, parameters, returnType, modifiers, throwtypes);
    hostType().getSootClassDecl().addMethod(m);
    sootMethod = m;
  }

  public SootMethod MethodDecl.sootMethod;
  syn lazy SootMethod MethodDecl.sootMethod() {
    ArrayList list = new ArrayList();
    for(int i = 0; i < getNumParameter(); i++)
      list.add(getParameter(i).type().getSootType());
    if(hostType().isArrayDecl())
      return typeObject().getSootClassDecl().getMethod(name(), list, type().getSootType());
    return hostType().getSootClassDecl().getMethod(name(), list, type().getSootType());
  }
  inh TypeDecl MethodDecl.typeObject();

  //syn lazy SootMethodRef MethodDecl.sootRef() = sootMethod().makeRef();
  syn lazy SootMethodRef MethodDecl.sootRef() {
    ArrayList parameters = new ArrayList();
    for(int i = 0; i < getNumParameter(); i++)
      parameters.add(getParameter(i).type().getSootType());
    SootMethodRef ref = Scene.v().makeMethodRef(
      hostType().getSootClassDecl(),
      name(),
      parameters,
      type().getSootType(),
      isStatic()
    );
    return ref;
  }


  public SootMethod ConstructorDecl.sootMethod;
  syn lazy SootMethod ConstructorDecl.sootMethod() {
    ArrayList list = new ArrayList();
    // this$0
    TypeDecl typeDecl = hostType();
    if(typeDecl.needsEnclosing())
      list.add(typeDecl.enclosingType().getSootType());
    if(typeDecl.needsSuperEnclosing()) {
      TypeDecl superClass = ((ClassDecl)typeDecl).superclass();
      list.add(superClass.enclosingType().getSootType());
    }
    // args
    for(int i = 0; i < getNumParameter(); i++)
      list.add(getParameter(i).type().getSootType());
    return hostType().getSootClassDecl().getMethod("<init>", list, soot.VoidType.v());
  }
  syn lazy SootMethodRef ConstructorDecl.sootRef() = sootMethod().makeRef();
  

  public void FieldDeclaration.jimplify1phase2() {
    String name = name();
    soot.Type type = type().getSootType();
    int modifiers = sootTypeModifiers();
    SootField f = new SootField(name, type, modifiers);
    hostType().getSootClassDecl().addField(f);
    sootField = f;
  }
  public SootField FieldDeclaration.sootField;
  syn lazy SootFieldRef FieldDeclaration.sootRef() =
    hostType().getSootClassDecl().getField(name(), type().getSootType()).makeRef();
  
  public void Program.jimplify2() {
    for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
      CompilationUnit u = (CompilationUnit)iter.next();
      if(u.fromSource())
        u.jimplify2();
    }
  }
  public void ASTNode.jimplify2() {
    for(int i = 0; i < getNumChild(); i++)
      getChild(i).jimplify2();
  }

  public void ASTNode.jimplify2(Body b) {
    for(int i = 0; i < getNumChild(); i++)
      getChild(i).jimplify2(b);
  }


  public void VariableDeclaration.jimplify2(Body b) {
    local = b.newLocal(name(), type().getSootType());
    if(hasInit()) {
      b.add(
        Jimple.v().newAssignStmt(
          local,
          asRValue(b,
            getInit().type().emitCastTo(b, // Assign conversion
              getInit(),
              type()
            )
          )
        )
      );
    }
  }
  public Local VariableDeclaration.local;

  public void ParameterDeclaration.jimplify2(Body b) {
    local = b.newLocal(name(), type().getSootType());
    b.add(Jimple.v().newIdentityStmt(local, Jimple.v().newParameterRef(type().getSootType(), localNum())));
  }
  public Local ParameterDeclaration.local;


  public soot.Immediate ASTNode.asImmediate(Body b, soot.Value v) {
    if(v instanceof soot.Immediate) return (soot.Immediate)v;
    return b.newTemp(v);
  }
  public soot.Local ASTNode.asLocal(Body b, soot.Value v) {
    if(v instanceof soot.Local) return (soot.Local)v;
    return b.newTemp(v);
  }
  public soot.Value ASTNode.asRValue(Body b, soot.Value v) {
    if(v instanceof soot.Local) return v;
    if(v instanceof soot.jimple.Constant) return v;
    if(v instanceof soot.jimple.ConcreteRef) return v;
    if(v instanceof soot.jimple.Expr) return v;
    throw new Error("Need to convert " + v.getClass().getName() + " to RValue");
  }

  public soot.Value TypeDecl.emitCastTo(Body b, Expr expr, TypeDecl type) {
    if(expr.isConstant())
      return emitConstant(type.cast(expr.constant()));
    return emitCastTo(b, expr.eval(b), type);
  }

  public soot.Value TypeDecl.emitCastTo(Body b, soot.Value v, TypeDecl type) {
    if(this == type)
      return v;
    if(isReferenceType() && type.isReferenceType() && instanceOf(type))
      return v;
    if((isLong() || this instanceof FloatingPointType) && type.isIntegralType()) {
      v = soot.jimple.Jimple.v().newCastExpr(
        asImmediate(b, v), typeInt().getSootType());
      return typeInt().emitCastTo(b, v, type);
    }

    return soot.jimple.Jimple.v().newCastExpr(
      asImmediate(b, v),
      type.getSootType()
    );
  }
  public soot.Value NullType.emitCastTo(Body b, soot.Value v, TypeDecl type) {
    return v;
  }

  class Body {
    int nextTempIndex = 0;
    soot.jimple.JimpleBody body;
    java.util.Stack chains;
    TypeDecl typeDecl;
    public Body(TypeDecl typeDecl, soot.jimple.JimpleBody body) {
      this.typeDecl = typeDecl;
      this.body = body;
      chains = new java.util.Stack();
      chains.push(body.getUnits());
      if(!body.getMethod().isStatic())
        emitThis(typeDecl);
    }
    public Local getParam(int i)
    {
      return body.getParameterLocal(i);
    }
    public Local newTemp(soot.Type type) {
      Local local = Jimple.v().newLocal("temp$" + nextTempIndex++, type);
      body.getLocals().add(local);
      return local;
    }
    public Local newTemp(soot.Value v) {
      Local local = newTemp(v.getType());
      if(v instanceof soot.jimple.ParameterRef) {
        add(Jimple.v().newIdentityStmt(local, (soot.jimple.ParameterRef)v));
      }
      else {
        add(Jimple.v().newAssignStmt(local, v));
      }
      return local;
    }
    public Local newLocal(String name, soot.Type type) {
      Local local = Jimple.v().newLocal(name, type);
      body.getLocals().add(local);
      if(name.equals("this") && thisName == null)
        thisName = local;
      return local;
    }
    public Body add(soot.jimple.Stmt stmt) {
      soot.PatchingChain chain = (soot.PatchingChain)chains.peek();
      if(stmt instanceof IdentityStmt && chain.size() != 0) {
        IdentityStmt idstmt = (IdentityStmt) stmt;
        if(!(idstmt.getRightOp() instanceof CaughtExceptionRef)) {
          Object s = chain.getFirst();
          while(s instanceof IdentityStmt)
            s = chain.getSuccOf(s);
          if(s != null) {
            chain.insertBefore(stmt, s);
            return this;
          }
        }
      }
      chain.add(stmt);
      return this;
    }
    public void pushBlock(soot.PatchingChain c) {
      chains.push(c);
    }
    public void popBlock() {
      chains.pop();
    }

    public soot.jimple.Stmt newLabel() {
      return soot.jimple.Jimple.v().newNopStmt();
    }
    public Body addLabel(soot.jimple.Stmt label) {
      add(label);
      return this;
    }

    public soot.Local emitThis(TypeDecl typeDecl) {
      if(thisName == null) {
        thisName = newLocal("this", typeDecl.getSootType());
        if(body.getMethod().isStatic())
          add(Jimple.v().newIdentityStmt(thisName, Jimple.v().newParameterRef(typeDecl.getSootType(), 0)));
        else
          add(Jimple.v().newIdentityStmt(thisName, Jimple.v().newThisRef(typeDecl.sootRef())));
      }
      return thisName;
    }
    Local thisName;

    public Body addTrap(TypeDecl type, soot.jimple.Stmt firstStmt, soot.jimple.Stmt lastStmt, soot.jimple.Stmt handler) {
      body.getTraps().add(Jimple.v().newTrap(type.getSootClassDecl(), firstStmt, lastStmt, handler));
      return this;
    }
  }

  protected soot.jimple.Stmt ASTNode.newLabel() {
    return soot.jimple.Jimple.v().newNopStmt();
  }



  inh TypeDecl Stmt.hostType();
  inh TypeDecl CatchClause.hostType();
  inh TypeDecl Case.hostType();
  
  syn lazy boolean TypeDecl.hasClinit() {
    for(int i = 0; i < getNumBodyDecl(); i++) {
      BodyDecl b = getBodyDecl(i);
      if(b instanceof FieldDeclaration) {
        FieldDeclaration f = (FieldDeclaration)b;
        if(f.isStatic() && f.hasInit() && f.generate()) {
          return true;
        }
      }
      else if(b instanceof StaticInitializer && b.generate()) {
        return true;
      }
    }
    return false;
  }

  public void TypeDecl.jimplify2() {
    super.jimplify2();
    if(hasClinit()) {
      SootMethod m = new SootMethod("<clinit>", new ArrayList(), soot.VoidType.v(), soot.Modifier.STATIC, new ArrayList());
      getSootClassDecl().addMethod(m);
      JimpleBody body = Jimple.v().newBody(m);
      m.setActiveBody(body);
      Body b = new Body(this, body);
      for(int i = 0; i < getNumBodyDecl(); i++) {
        BodyDecl bodyDecl = getBodyDecl(i);
        if(bodyDecl instanceof FieldDeclaration && bodyDecl.generate()) {
          FieldDeclaration f = (FieldDeclaration)bodyDecl;
          if(f.isStatic() && f.hasInit()) {
            Local l = asLocal(b, 
              f.getInit().type().emitCastTo(b, f.getInit(), f.type()) // AssignConversion
            );
            b.add(Jimple.v().newAssignStmt(
              Jimple.v().newStaticFieldRef(f.sootRef()),
              l
            ));
          }
        }
        else if(bodyDecl instanceof StaticInitializer && bodyDecl.generate()) {
          bodyDecl.jimplify2(b);
        }
      }
      b.add(Jimple.v().newReturnVoidStmt());
    }
    for(Iterator iter = nestedTypes().iterator(); iter.hasNext(); ) {
      TypeDecl typeDecl = (TypeDecl)iter.next();
      typeDecl.jimplify2();
    }
    // add inner class attribute
    ArrayList tags = new ArrayList();
    for(Iterator iter = innerClassesAttributeEntries().iterator(); iter.hasNext(); ) {
      TypeDecl type = (TypeDecl)iter.next();
      tags.add(
        new soot.tagkit.InnerClassTag(
          type.jvmName().replace('.', '/'),
          type.isMemberType() ? type.enclosingType().jvmName().replace('.', '/') : null,
          type.isAnonymous() ? null : type.name(),
          type.sootTypeModifiers()
        )
      );
    }
    if(!tags.isEmpty())
      getSootClassDecl().addTag(new soot.tagkit.InnerClassAttribute(tags));
    /*
    if(!compilationUnit().fromSource()) {
    	Program p = (Program)compilationUnit().getParent().getParent();
    	String className = hostType().jvmName();
    	InputStream is = p.getInputStream(className);
    	ClassFile coffiClass = new ClassFile(className);
    	if(coffiClass.loadClassFile(is)) {
    		for(int i = 0; i < coffiClass.methods.length; i++) {
          method_info info = coffiClass.methods[i];
    			String s = info.prototype(coffiClass.constant_pool);
    			for(Iterator iter = localMethodsIterator(); iter.hasNext(); ) {
    				MethodDecl m = (MethodDecl)iter.next();
    				if(s.endsWith(m.signature())) {
    					SootMethod sootMethod = m.sootMethod;
    					JimpleBody jb = Jimple.v().newBody(sootMethod);
    					if(!sootMethod.isAbstract() && !sootMethod.isNative() && !sootMethod.isPhantom()) {
    						coffiClass.parseMethod(info);
    						new soot.coffi.CFG(info);
    						boolean oldPhantomValue = Scene.v().getPhantomRefs();
    						info.cfg.jimplify(coffiClass.constant_pool, coffiClass.this_class, jb);
    						Scene.v().setPhantomRefs(oldPhantomValue);
    						info.instructions = null;
    						info.cfg = null;
    						info.attributes = null;
    						info.code_attr = null;
    						info.jmethod = null;
    						PackManager.v().getPack("jb").apply(jb);
    					}
    					sootMethod.setActiveBody(jb);
    				}
    			}
    		}
    	}
    }
    */
  }

  protected ClassFile TypeDecl.loadClassFile = null;
  protected ClassFile TypeDecl.loadClassFile() {
    if(loadClassFile == null && !compilationUnit().fromSource()) {
    	Program p = (Program)compilationUnit().getParent().getParent();
    	String className = hostType().jvmName();
    	InputStream is = p.getInputStream(className);
    	ClassFile coffiClass = new ClassFile(className);
    	if(coffiClass.loadClassFile(is))
        loadClassFile = coffiClass;
    }
    return loadClassFile;
  }
  public JimpleBody TypeDecl.loadBodyFromBytecode(SootMethod sootMethod) {
    JimpleBody jb = Jimple.v().newBody(sootMethod);
    ClassFile coffiClass = loadClassFile();
    if(sootMethod.isAbstract() || sootMethod.isNative() || sootMethod.isPhantom() || coffiClass == null)
      return jb;
    String s1 = sootMethod.getSignature();
    s1 = s1.substring(s1.indexOf(':') + 2, s1.length() - 1);
    for(int i = 0; i < coffiClass.methods.length; i++) {
      method_info info = coffiClass.methods[i];
      String s2 = info.prototype(coffiClass.constant_pool);
      if(s2.startsWith("public") || s2.startsWith("private") || s2.startsWith("protected"))
    	  s2 = s2.substring(s2.indexOf(' ') + 1);
      if(s1.equals(s2)) {
        coffiClass.parseMethod(info);
        new soot.coffi.CFG(info);
        boolean oldPhantomValue = Scene.v().getPhantomRefs();
        info.cfg.jimplify(coffiClass.constant_pool, coffiClass.this_class, jb);
        Scene.v().setPhantomRefs(oldPhantomValue);
        /*
        info.instructions = null;
        info.cfg = null;
        info.attributes = null;
        info.code_attr = null;
        info.jmethod = null;
        */
        PackManager.v().getPack("jb").apply(jb);
        return jb;
      }
    }
    return jb;
  }

  syn lazy Collection TypeDecl.innerClassesAttributeEntries() {
    HashSet list = new HashSet();
    if(isNestedType())
      list.add(this);
    for(Iterator iter = nestedTypes().iterator(); iter.hasNext(); )
      list.add(iter.next());
    for(Iterator iter = usedNestedTypes().iterator(); iter.hasNext(); )
      list.add(iter.next());
    return list;
  }

  public void BodyDecl.jimplify2() {
  }

  public void MethodDecl.jimplify2() {
    if(!generate()) return;
    try {
      if(!hostType().compilationUnit().fromSource() && (!hasBlock() || getBlock().getNumStmt() == 0)) {
    		JimpleBody body = hostType().loadBodyFromBytecode(sootMethod);
    		sootMethod.setActiveBody(body);
    	}
      else if(hasBlock()) {
        JimpleBody body = Jimple.v().newBody(sootMethod);
        sootMethod.setActiveBody(body);
        Body b = new Body(hostType(), body);
        for(int i = 0; i < getNumParameter(); i++)
          getParameter(i).jimplify2(b);
        getBlock().jimplify2(b);
        if(type() instanceof VoidType)
          b.add(Jimple.v().newReturnVoidStmt());
      }
    } catch (RuntimeException e) {
      System.err.println("Error generating " + hostType().typeName() + ": " + this); 
      throw e;
    }
  }

  syn lazy SootField TypeDecl.getSootField(String name, TypeDecl type) {
    SootField f = new SootField(name, type.getSootType(), 0);
    getSootClassDecl().addField(f);
    return f;
  }

  public void ConstructorDecl.jimplify2() {
    if(!generate()) return;
    if(!hostType().compilationUnit().fromSource()) {
      JimpleBody body = hostType().loadBodyFromBytecode(sootMethod);
      sootMethod.setActiveBody(body);
      return;
    }

    JimpleBody body = Jimple.v().newBody(sootMethod);
    sootMethod.setActiveBody(body);
    Body b = new Body(hostType(), body);
    for(int i = 0; i < getNumParameter(); i++)
      getParameter(i).jimplify2(b);

    boolean needsInit = true;

    if(hasConstructorInvocation()) {
      getConstructorInvocation().jimplify2(b);
      Stmt stmt = getConstructorInvocation();
      if(stmt instanceof ExprStmt) {
        ExprStmt exprStmt = (ExprStmt)stmt;
        Expr expr = exprStmt.getExpr();
        if(!expr.isSuperConstructorAccess())
          needsInit = false;

      }
    }

    if(hostType().needsEnclosing()) {
      TypeDecl type = hostType().enclosingType();
      b.add(Jimple.v().newAssignStmt(
        Jimple.v().newInstanceFieldRef(
          b.emitThis(hostType()),
          hostType().getSootField("this$0", type).makeRef()
        ),
        asLocal(b, Jimple.v().newParameterRef(type.getSootType(), 0))
      ));
    }
    
    for(Iterator iter = hostType().enclosingVariables().iterator(); iter.hasNext(); ) {
      Variable v = (Variable)iter.next();
      ParameterDeclaration p = (ParameterDeclaration)parameterDeclaration("val$" + v.name()).iterator().next();
      b.add(Jimple.v().newAssignStmt(
        Jimple.v().newInstanceFieldRef(
          b.emitThis(hostType()),
          hostType().getSootField("val$" + v.name(), v.type()).makeRef()
        ),
        p.local
      ));
    }

    if(needsInit) {
      TypeDecl typeDecl = hostType();
      for(int i = 0; i < typeDecl.getNumBodyDecl(); i++) {
        BodyDecl bodyDecl = typeDecl.getBodyDecl(i);
        if(bodyDecl instanceof FieldDeclaration && bodyDecl.generate()) {
          FieldDeclaration f = (FieldDeclaration)bodyDecl;
          if(!f.isStatic() && f.hasInit()) {
            soot.Local base = b.emitThis(hostType());
            Local l = asLocal(b,
              f.getInit().type().emitCastTo(b, f.getInit(), f.type()) // AssignConversion
            );
            b.add(Jimple.v().newAssignStmt(
              Jimple.v().newInstanceFieldRef(base, f.sootRef()),
              l
            ));
          }
        }
        else if(bodyDecl instanceof InstanceInitializer && bodyDecl.generate()) {
          bodyDecl.jimplify2(b);
        }
      }
    }
    getBlock().jimplify2(b);
    b.add(Jimple.v().newReturnVoidStmt());
  }
}
