
aspect JAModuleQualifiedNames {
	public ModuleDot Expr.moduleQualifiesAccess(Access access) {
		ModuleDot dot = new ModuleDot(this, access);
		dot.lastDot = dot;
		return dot;
	}
	
	//This was cut and paste from ResolveAmbiguousNames. Check with Torbjorn if there is a problem
	private Access ModuleDot.qualifyTailWith(Access expr) {
		if(getRight/*NoTransform*/() instanceof AbstractDot) {
			AbstractDot dot = (AbstractDot)getRight/*NoTransform*/();
			return expr.qualifiesAccess(dot.getRight/*NoTransform*/());
		}
		return expr;
	}
	
	//Adapted from Java1.4Frontend/ResolveAmbiguousNames 
	rewrite ModuleDot {
		when(!duringSyntacticClassification() && leftSide().isPackageAccess() && rightSide().isPackageAccess())
		to Access {
			PackageAccess left = (PackageAccess)leftSide();
			PackageAccess right = (PackageAccess)rightSide();
			left.setPackage(left.getPackage() + "::" + right.getPackage());
			left.setEnd(right.end());
			return qualifyTailWith(left);
		}
	}
	// change a ModuleDot("m1", "Type") into a Dot("m1::", "Type")
	rewrite ModuleDot {
		when(!duringSyntacticClassification() && leftSide().isPackageAccess() && !((Access)leftSide()).hasPrevExpr() && rightSide() instanceof TypeAccess)
		to Access {
			PackageAccess left = (PackageAccess)leftSide();
			TypeAccess right = (TypeAccess)rightSide();
			//change left to left::
			left.setPackage(left.getPackage() + "::");
			return qualifyTailWith(left.qualifiesAccess(right));
			}
	}
	
}