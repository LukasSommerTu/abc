//STANDING NOTE: Make VERY sure that all JAModule passes before the java 
//errorcheck DO NOT TOUCH any AST nodes below CompilationUnit to avoid 
//the REWRITES


aspect JAModuleErrorCheck {
	//dependent on Java1.4Frontend/ErrorCheck.CompilationUnit.errors/warnings
	//adapted from abc-ja-exts/CheckModuleErrors.jrag
  	public void Program.initErrHandling(Collection err, Collection warn) {
  		err.clear();
  		warn.clear();
  		
  		for (Object node : getCompilationUnitList()) {
  			CompilationUnit cu = (CompilationUnit) node;
  			if(cu.fromSource()) {
  				cu.initErrHandling();
  			}
  		}
  	}
  	public void CompilationUnit.initErrHandling() {
  		errors.clear();
  		warnings.clear();
  	}
  	public void ModuleCompilationUnit.initErrHandling() {
  		errors.clear();
  		warnings.clear();
		for (CompilationUnit cu : getCompilationUnitList()) {
			cu.initErrHandling();
		}  		
  	}
  
  	public void Program.collectModuleErrors(Collection err, Collection warn) {
  		for (Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
  			CompilationUnit cu = (CompilationUnit)iter.next();
  			if(cu.fromSource()) {
  				cu.collectModuleErrors(err, warn);
  			}
  		}
  	}
  	public void CompilationUnit.collectModuleErrors(Collection err, Collection warn) {
  		err.addAll(errors);
  		warn.addAll(warnings);
  	}
  	
  	//Single error checks, done before CU insertions/generatOwn
  	public void ASTNode.checkModuleErrorsPass1() {
  		checkModuleDecls();
  		//checkModulePackageDecls();
  		checkModuleCycles();
  		checkDuplicateModuleNames();
  	
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).checkModuleErrorsPass1();
		}
  	}
  	//STANDING NOTE: Cut off errorcheck at CompilationUnit/ModuleCompilationUnit children
  	//so that the rewrites are not triggered
  	public void CompilationUnit.checkModuleErrorsPass1() {
  		checkModuleDecls();
  		//checkModulePackageDecls();
  		checkModuleCycles();
  		checkDuplicateModuleNames();

		if (getModuleDecl() != null) {
			getModuleDecl().checkModuleErrorsPass1();  	
		}
  	}
  	
  	//CU module access lookup checks 
  	public void ASTNode.checkModuleDecls() {}
  	//This must be called before the CUs are rearranged by InsertModuleCUs
  	public void CompilationUnit.checkModuleDecls() {
  		if (getModuleDecl() != null && lookupModuleCUNoTransform() == null) {
  			getModuleDecl().getModuleAccess().error("Module not found: " + getModuleDecl().getModuleAccess().getID()); 
  		} 
  	}
  	
  	//CU package decl (if a module is defined, then a package shouldn't be defined (and vice versa)
  	//unused for now
  	public void ASTNode.checkModulePackageDecls() {}
  	public void CompilationUnit.checkModulePackageDecls() {
  		if (!getPackageDecl().equals("") && getModuleDecl() != null) {
  			getModuleDecl().error("A module declaration cannot be used if there is a package declaration on the compilation unit.");
  		}
  	}
  	
	//Cyclic imports
	public void ASTNode.checkModuleCycles() {}
	public void ModuleCompilationUnit.checkModuleCycles() {
		checkModuleCycles(new LinkedList<ModuleCompilationUnit>());
	}
	public boolean ModuleCompilationUnit.checkModuleCycles(Collection<ModuleCompilationUnit> visited) {
		boolean noCycles = true;
		
		if (visited.contains(this)) {
			noCycles = false;
			String cycleStr = "";
			boolean first = true;
			for (ModuleCompilationUnit cycleMember : visited) {
				if (!first) {
					cycleStr += ", ";
				}
				cycleStr += cycleMember.getModuleName();
				first = false;
			}
			getModuleDecl().error("Module " + getModuleName() + " involved in an import cycle with these other modules: " + cycleStr);
			throw new jastadd.UnrecoverableSemanticError("Module " + getModuleName() + " involved in an import cycle with these other modules: " + cycleStr);
		}
		
		for (ModuleMemberDecl member : getModuleMemberDeclList()) {
			if (member instanceof ModuleImportDecl) {
				ModuleImportDecl importDecl = (ModuleImportDecl) member;
				ModuleCompilationUnit importedCU = getHostProgram().lookupModuleCUNoTransform(importDecl.getImportModule());
				if (importedCU == null) { //when the imported module does not exist
					continue;
				}
				Collection newVisited = new LinkedList<ModuleCompilationUnit>(visited);
				newVisited.add(this);
				noCycles = importedCU.checkModuleCycles(newVisited);
				if (noCycles == false) {
					return noCycles;
				}
			}
		}
		
		return noCycles;
	}
	
	//TODO: Duplicate module names
	public void ASTNode.checkDuplicateModuleNames() {
	}
	public void ModuleCompilationUnit.checkDuplicateModuleNames() {
		for (String name : getHostProgram().getModuleNames()) {
			if (this.getModuleName().compareTo(name) == 0) {
			getModuleDecl().error("Duplicate module name: " + this.getModuleName());
			throw new jastadd.UnrecoverableSemanticError("Duplicate module name: " + this.getModuleName());
			}
		}
		getHostProgram().getModuleNames().add(this.getModuleName());
	}

	//TODO: Find a way to clear this once error checking is done
	protected Set<String> Program.moduleNames = new HashSet();
	public Set<String> Program.getModuleNames() {
		return this.moduleNames;
	}
	
	
	//refines/implements
	//from Java1.4Frontend/ErrorCheck.jrag
	public void ModuleCompilationUnit.collectErrors() {
		nameCheck();
		typeCheck();
		accessControl();
		exceptionHandling();
		checkUnreachableStmt();
		definiteAssignment();
		checkModifiers();
		//Don't go down into child CUs, compilationUnitIterator will go through them anyway
	}
	
}