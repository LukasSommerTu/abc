import jastaddmodules.*;
aspect CollectLocalModulePackages {
	public void Program.collectLocalModulePackages() {
		List<CompilationUnit> cuList = getCompilationUnitList();
		for (CompilationUnit cu : cuList) {
			cu.collectLocalModulePackages();
		}
	}
	public void ModuleCompilationUnit.collectLocalModulePackages() {
		//collect packages from member cus
		for (CompilationUnit cu : getCompilationUnitList()) {
			cu.collectLocalModulePackages();
		}
		//TODO: process exported pacakges
		//TODO: Add packages to Program.packageToMCU
		for (String localPackageName : getLocalPackageMap().keySet()) {
			LocalModulePackage localPackage = getLocalPackage(localPackageName);
			String globalPackageName = makeGlobalPackageName(localPackageName, localPackage);
			getHostProgram().addPackageToMCU(globalPackageName, this);
		}
	}
	public void CompilationUnit.collectLocalModulePackages() {
		ModuleCompilationUnit mcu = getModuleCompilationUnit();
		if (mcu != null) {
			if (mcu.getLocalPackage(moduleLocalPackageName()) == null) {
				mcu.addLocalPackage(moduleLocalPackageName(), new LocalModulePackage(true));
			}
		}
	}
	
	//map needed to refine AccessControl.TypeDecl.accessibleFromPackage
	protected HashMap<String, ModuleCompilationUnit> Program.packageToMCU = new 
		HashMap<String, ModuleCompilationUnit>();
	public void Program.addPackageToMCU(String packageName, ModuleCompilationUnit mcu) {
		assert (errorsFound() || this.packageToMCU.get(packageName) == null) : "Duplicate entry already in Program.packageToMCU";
		packageToMCU.put(packageName, mcu);
	}
	public ModuleCompilationUnit Program.getPackageToMCU(String packageName) {
		return packageToMCU.get(packageName);
	}
	
}