
aspect CollectSuperModuleCUs {

	protected ModuleCompilationUnit ModuleCompilationUnit.superModuleCU = null;
	public void ModuleCompilationUnit.setSuperModuleCU(ModuleCompilationUnit superModuleCU) {
		this.superModuleCU = superModuleCU;
	}
	public ModuleCompilationUnit ModuleCompilationUnit.getSuperModuleCU() {
		return this.superModuleCU;
	}
	public boolean ModuleCompilationUnit.hasSuperModule() {
		return getModuleDecl().hasExtends();
	}
	
	syn lazy ModuleCompilationUnit ModuleCompilationUnit.getSuperModuleCUNoTransform() {
		if (!hasSuperModule()) {
			return null;
		}
		return getHostProgram().lookupModuleCUNoTransform(getModuleDecl().getExtends());
	}

	//gets the module's super module, and creates a copy of the CU subtree of that module
	public boolean Program.collectSuperModules() {
		List<CompilationUnit> cuList = getCompilationUnitList();
		for (CompilationUnit cu : cuList) {
			cu.collectSuperModules();
		}
		return true;
	}
	public boolean CompilationUnit.collectSuperModules() {
		//do nothing
		return true;
	}
	public boolean ModuleCompilationUnit.collectSuperModules() {
		//module decl has no extends, do nothing
		if (!getModuleDecl().hasExtends()) {
			return true;
		}
		//if the super module is already set, don't collect this node again
		if (getSuperModuleCU() != null) {
			return true;
		}
		this.setSuperModuleCU(getHostProgram().lookupModuleCUNoTransform(getModuleDecl().getExtends()));
		assert (this.getSuperModuleCU() != null) : "Supermodule should have been set: " + getModuleDecl().getExtends().toString();

		//collect the super modules of the super module;
		getSuperModuleCU().collectSuperModules();
		
		return true;
	}
	
	//only gets non-implicit members
	syn lazy LinkedList<ModuleMemberDecl> ModuleCompilationUnit.getSuperMemberList() {
		LinkedList<ModuleMemberDecl> ret = new LinkedList<ModuleMemberDecl>();
		if (getSuperInstance() != null) {
			ret.addAll(getSuperInstance().getSuperMemberList());
		}
		for (ModuleMemberDecl member : getModuleMemberDeclList()) {
			//don't get the implicit imports (specifically jastadd$framework)
			if (!(member instanceof ImplicitModuleImportDecl)) {
				ret.add(member);
			}
		}
		return ret;
	}
	//collects non-implicit members of supers, then all of self
	syn lazy LinkedList<ModuleMemberDecl> ModuleCompilationUnit.getSelfAndSuperMemberList() {
		LinkedList<ModuleMemberDecl> ret = new LinkedList<ModuleMemberDecl>();
		if (getSuperInstance() != null) {
			ret.addAll(getSuperInstance().getSuperMemberList());
		}
		for (ModuleMemberDecl member : getModuleMemberDeclList()) {
			ret.add(member);
		}
		return ret;
	}
}