
aspect JAModuleErrorCheck {
	//dependent on ErrorCheck.CompilationUnit.errors/warnings
	//adapted from abc-ja-exts/CheckModuleErrors.jrag
  	public void Program.initErrHandling(Collection err, Collection warn) {
  		err.clear();
  		warn.clear();
  		
  		for (CompilationUnit cu : getCompilationUnitList()) {
  			if(cu.fromSource()) {
  				cu.initErrHandling();
  			}
  		}
  	}
  	public void CompilationUnit.initErrHandling() {
  		errors.clear();
  		warnings.clear();
  	}
  	public void ModuleCompilationUnit.initErrHandling() {
  		errors.clear();
  		warnings.clear();
		for (CompilationUnit cu : getCompilationUnitList()) {
			cu.initErrHandling();
		}  		
  	}
  
  	public void Program.collectModuleErrors(Collection err, Collection warn) {
  		for (Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
  			CompilationUnit cu = (CompilationUnit)iter.next();
  			if(cu.fromSource()) {
  				cu.collectModuleErrors(err, warn);
  			}
  		}
  	}
  	public void CompilationUnit.collectModuleErrors(Collection err, Collection warn) {
  		err.addAll(errors);
  		warn.addAll(warnings);
  	}	
  	public void ModuleCompilationUnit.collectModuleErrors(Collection err, Collection warn) {
  		err.addAll(errors);
  		warn.addAll(warnings);
		for (CompilationUnit cu : getCompilationUnitList()) {
			cu.collectModuleErrors(err, warn);
		}  		
  	}
  	
  	//CU module access lookup checks 
  	public void ASTNode.checkModuleDecls() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).checkModuleDecls();
		}
  	}
  	//This must be called before the CUs are rearranged by InsertModuleCUs
  	public void CompilationUnit.checkModuleDecls() {
  		if (getModuleDecl() != null && lookupModuleCUNoTransform() == null) {
  			getModuleDecl().getModuleAccess().error("Module not found: " + getModuleDecl().getModuleAccess().getID()); 
  		} 
  	}
	//TODO: Duplicate module name
	//should never happen, but check anyway
	public HashSet<String> Program.moduleNames = new HashSet<String>();
	public void ASTNode.checkDuplicateModuleName() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).checkDuplicateModuleName();
		}
	}
	public void ModuleCompilationUnit.checkDuplicateModuleName() {
		if (getHostProgram().moduleNames.contains(this.getModuleName())) {
			getModuleDecl().error("Duplicate module name: " + this.getModuleName());
		}
		super.checkDuplicateModuleName();
	}
	
	//TODO: Cyclic imports
	//TODO: Visibility checks
}