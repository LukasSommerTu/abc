//STANDING NOTE: Make GODDAMN sure that all JAModule passes DO NOT FUCKING
//TOUCH any AST nodes below CompilationUnit to avoid the GODFORSAKEN DEVIL
//SPAWNED REWRITES

//Inserts implicit module imports to modules
aspect InsertImplicit {

	public boolean ASTNode.insertImplicitModuleImports() {
		for (int i = 0 ; i < getNumChild(); i++) {
			getChild(i).insertImplicitModuleImports();
		}
		return true;
	}
	public boolean CompilationUnit.insertImplicitModuleImports() {
		boolean result = false;
		result = this.insertModulePackageImports();
		if (!result) {
			return result;
		}
		return result;
	}
	public boolean ModuleCompilationUnit.insertImplicitModuleImports() {
		boolean result = false;
		result = inserJAFrameworkModuleImport();
		if (!result) {
			return result;
		}
		return result;
	}


	//add import <imported_module_package_name>.*; to all CU members of the module
	public boolean CompilationUnit.insertModulePackageImports() {
		//don't process ModuleCUs 
		if (this instanceof ModuleCompilationUnit) {
			return true;
		}
		
		//continue only if in a module
		if (!isInJAModule()) {
			return true;
		}
		
		//insert module package import into CUs
		ModuleCompilationUnit moduleCU = getModuleCompilationUnit();
		assert (moduleCU != null) : "Compilation unit " + this.relativeName() + " should be a module member.";

		ImportDecl modulePackageImport = new TypeImportOnDemandDecl(moduleCU.createPackageAccess());
		getImportDeclList().add(modulePackageImport);
		
		return true;
	}
	
	//add import jastadd$framwork to all modules
	public boolean ModuleCompilationUnit.inserJAFrameworkModuleImport() {
		if (getModuleName().compareTo(Program.JASTADD_FRAMEWORK_MODULE) != 0) {
			ModuleImportDecl frameworkImport = new ModuleImportDecl(
				new ModuleImportTypeNorm(),
				new ModuleAccess(Program.JASTADD_FRAMEWORK_MODULE),
				new AsTypeNone(),
				new NullModuleAccess());
			getModuleMemberDeclList().add(frameworkImport);
		}
		return true;
	}
	
	public PackageAccess ModuleCompilationUnit.createPackageAccess() {
		return new PackageAccess(this.getModuleName(), 0, 0);
	}
}