//STANDING NOTE: Make GODDAMN sure that all JAModule passes DO NOT FUCKING
//TOUCH any AST nodes below CompilationUnit to avoid the GODFORSAKEN DEVIL
//SPAWNED REWRITES

//Inserts implicit module imports to modules
aspect InsertImplicit {

	//add import jastadd$framwork to all modules
	public boolean Program.inserJAFrameworkModuleImport() {
		for (Iterator i = compilationUnitIterator(); i.hasNext(); ) {
			CompilationUnit cu = (CompilationUnit) i.next();
			cu.inserJAFrameworkModuleImport();
		}
		return true;
	}
	public boolean CompilationUnit.inserJAFrameworkModuleImport() {return true;}
	public boolean ModuleCompilationUnit.inserJAFrameworkModuleImport() {
		if (!getModuleName().equals(Program.JASTADD_FRAMEWORK_MODULE)) {
			ModuleImportDecl frameworkImport = new ModuleImportDecl(
				new ModuleImportTypeNorm(),
				new ModuleAccess(Program.JASTADD_FRAMEWORK_MODULE),
				new AsTypeNone(),
				new NullModuleAccess());
			getModuleMemberDeclList().add(frameworkImport);
		}
		return true;
	}
	
	//add import <imported_module_package_name>.*; to all CU members of the module
	public boolean Program.insertModulePackageImports() {
		for (Iterator i = compilationUnitIterator(); i.hasNext(); ) {
			CompilationUnit cu = (CompilationUnit) i.next();
			cu.insertModulePackageImports();
		}
		return true;
	}
	public boolean CompilationUnit.insertModulePackageImports() {
		//continue only if in a module
		if (!isInJAModule()) {
			return true;
		}
		
		//insert module package import into CUs
		ModuleCompilationUnit moduleCU = getModuleCompilationUnit();
		assert (moduleCU != null) : "Compilation unit " + this.relativeName() + " should be a module member.";

		ImportDecl modulePackageImport = new TypeImportOnDemandDecl(moduleCU.createPackageAccess());
		getImportDeclList().add(modulePackageImport);
		
		//insert imported modules into CUs
		for (ModuleCompilationUnit importedCU : moduleCU.getImportedModuleMap().values()) {
			modulePackageImport = new TypeImportOnDemandDecl(importedCU.createPackageAccess());
			getImportDeclList().add(modulePackageImport);
		}
		
		return true;
	}
	public boolean ModuleCompilationUnit.insertModulePackageImports() {return true;}
	
	public PackageAccess ModuleCompilationUnit.createPackageAccess() {
		return new PackageAccess(this.getModuleName(), 0, 0);
	}
}