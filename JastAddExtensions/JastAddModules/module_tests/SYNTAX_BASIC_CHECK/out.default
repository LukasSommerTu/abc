Arguments: 
-debug -d classes -instance-module M AST.ast AST2.ast AST3.ast X.jrag Y.jrag A.java B.java C.java M.N.O.module M.module M2.module M3.module M4.module ../testlib/ASTNode.java ../testlib/List.java ../testlib/Opt.java ../testlib/jastadd$framework.module End arguments
----------Module contents----------
------AST3.ast------
module: module M3;;
Original AST file: AST3.ast
module CU : M3.module
module name : M3
------------------------
------../testlib/jastadd$framework.module------
module jastadd$framework;
------------------------
------../testlib/Opt.java------
module: module jastadd$framework;;
module CU : ../testlib/jastadd$framework.module
module name : jastadd$framework
------------------------
------X.jrag------
module: module M;;
module CU : M.module
module name : M
------------------------
------M.module------
module M;
import  M2 as none null;
import own M3 as none null;
import own M4 export as PublicM4;
import own M.N.O export as MNOPublic;
merge M2, M3, M4 as MyMs;
merge M2, M3, M4 export as MyMs;
------------------------
------AST.ast------
module: module M;;
Original AST file: AST.ast
module CU : M.module
module name : M
------------------------
------../testlib/List.java------
module: module jastadd$framework;;
module CU : ../testlib/jastadd$framework.module
module name : jastadd$framework
------------------------
------C.java------
module: module M3;;
module CU : M3.module
module name : M3
------------------------
------M4.module------
module M4;
------------------------
------B.java------
module: module M2;;
module CU : M2.module
module name : M2
------------------------
------Y.jrag------
module: module M.N.O;;
module CU : M.N.O.module
module name : M.N.O
------------------------
------AST2.ast------
module: module M2;;
Original AST file: AST2.ast
module CU : M2.module
module name : M2
------------------------
------A.java------
module: module M;;
module CU : M.module
module name : M
------------------------
------M.N.O.module------
module M.N.O;
------------------------
------../testlib/ASTNode.java------
module: module jastadd$framework;;
module CU : ../testlib/jastadd$framework.module
module name : jastadd$framework
------------------------
------M2.module------
module M2;
------------------------
------M3.module------
module M3;
------------------------
----------CU AST before insert----------
AST3.ast package:
module: jastadd$framework, file: ../testlib/jastadd$framework.module, base module: jastadd$framework
../testlib/Opt.java package:
X.jrag package:
module: M, file: M.module, base module: M
AST.ast package:
../testlib/List.java package:
C.java package:
module: M4, file: M4.module, base module: M4
B.java package:
Y.jrag package:
AST2.ast package:
A.java package:
module: M.N.O, file: M.N.O.module, base module: M.N.O
../testlib/ASTNode.java package:
module: M2, file: M2.module, base module: M2
module: M3, file: M3.module, base module: M3
----------CU AST after insert----------
module: jastadd$framework, file: ../testlib/jastadd$framework.module, base module: jastadd$framework
	../testlib/Opt.java package:jastadd$framework
	../testlib/List.java package:jastadd$framework
	../testlib/ASTNode.java package:jastadd$framework
module: M, file: M.module, base module: M
	X.jrag package:M
	AST.ast package:M
	A.java package:M
module: M4, file: M4.module, base module: M4
module: M.N.O, file: M.N.O.module, base module: M.N.O
	Y.jrag package:M.N.O
module: M2, file: M2.module, base module: M2
	B.java package:M2
	AST2.ast package:M2
module: M3, file: M3.module, base module: M3
	AST3.ast package:M3
	C.java package:M3
----------Module CU imports before import own----------
module jastadd$framework, base:jastadd$framework, context:[], instantiated:false
module M, base:M, context:[], instantiated:false
module M4, base:M4, context:[], instantiated:false
module M.N.O, base:M.N.O, context:[], instantiated:false
module M2, base:M2, context:[], instantiated:false
module M3, base:M3, context:[], instantiated:false
Unrecoverable semantic error(s) found.
M.module:6,7:
  Semantic Error: Module being merged is a base module or is accessed through a base module. Merging is only allowed for import own modules.
