// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   C.ast

package m1.m3;

import jastadd$framework.ASTNode;
import java.util.*;

// Referenced classes of package m1.m3:
//            CAspect

public class CType extends ASTNode
{

    public CType()
    {
        functionC_m1$m3$CType$value = new HashMap(4);
        functionC_m1$m3$CType$visited = new HashSet(4);
        functionA$visited = false;
    }

    protected void init$children()
    {
        children = new ASTNode[0];
    }

    public Object clone()
        throws CloneNotSupportedException
    {
        CType node = (CType)super.clone();
        functionC_m1$m3$CType$value = new HashMap(4);
        node.inCircle = false;
        node.is$Final = false;
        return node;
    }

    public String functionC(CType c)
    {
        Object parameters$ = c;
        if(this.functionC_m1$m3$CType$value.containsKey(parameters$))
            return (String)(Object)this.functionC_m1$m3$CType$value.get(parameters$);
        boolean interruptedCircle = false;
        if(functionC_m1$m3$CType$visited.contains(parameters$))
            throw new RuntimeException("Circular definition of attr: functionC(m1.m3.CType) in class: m1.m3.CType");
        functionC_m1$m3$CType$visited.add(parameters$);
        if(IN_CIRCLE)
        {
            interruptedCircle = true;
            IN_CIRCLE = false;
            pushEvalStack();
        }
        int num$ = boundariesCrossed;
        boolean localFinal$ = is$Final;
        String functionC_m1$m3$CType$value = CAspect.impl$body$functionC(this, c);
        if(localFinal$ && num$ == boundariesCrossed)
        {
            Object _tmp = (Object)this.functionC_m1$m3$CType$value.put(parameters$, functionC_m1$m3$CType$value);
        }
        functionC_m1$m3$CType$visited.remove(parameters$);
        if(interruptedCircle)
        {
            IN_CIRCLE = true;
            popEvalStack();
        }
        return functionC_m1$m3$CType$value;
    }

    public String functionA()
    {
        boolean interruptedCircle = false;
        if(functionA$visited)
            throw new RuntimeException("Circular definition of attr: functionA() in class: m1.m3.CType");
        functionA$visited = true;
        if(IN_CIRCLE)
        {
            interruptedCircle = true;
            IN_CIRCLE = false;
            pushEvalStack();
        }
        ASTNode n = getParent();
        ASTNode caller = this;
        ASTNode child = null;
        for(; !(n instanceof jastadd$framework.ASTNode.Defines.functionA); n = n.getParent())
        {
            child = caller;
            caller = n;
        }

        String functionA$value = ((jastadd$framework.ASTNode.Defines.functionA)n).Defines$functionA(caller, child);
        functionA$visited = false;
        if(interruptedCircle)
        {
            IN_CIRCLE = true;
            popEvalStack();
        }
        return functionA$value;
    }

    public ASTNode rewriteTo()
    {
        return super.rewriteTo();
    }

    public int getNumChild()
    {
        return 0;
    }

    public boolean mayHaveRewrite()
    {
        return false;
    }

    private Map functionC_m1$m3$CType$value;
    private HashSet functionC_m1$m3$CType$visited;
    private boolean functionA$visited;
}
