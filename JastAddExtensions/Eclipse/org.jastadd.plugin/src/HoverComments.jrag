aspect HoverComments {
  
  syn String ASTNode.javaDocComment() {
    CompilationUnit cu = declarationCompilationUnit();
    if(cu != null) {
      String s = cu.comment(declarationLocationLine());
      if(s != null && s.startsWith("/**"))
        return s;
    }
    return null;
  }
  
  syn String ASTNode.hoverComment() = "[" + ASTNode.getLine(getStart()) + "," + ASTNode.getColumn(getStart()) + "->" + 
       ASTNode.getLine(getEnd()) + "," + ASTNode.getColumn(getEnd()) + "]";
  eq MethodDecl.hoverComment() {
     StringBuffer res = new StringBuffer(type().typeName());
     res.append(" " + name() + "(");
     for (int i = 0; i < getNumParameter(); i++) {
       res.append(getParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")");
     String javaDoc = javaDocComment();
     if (javaDoc != null) 
       res.append("\n\n" + javaDoc);
     return res.toString();
  }
  eq ConstructorDecl.hoverComment() {
     StringBuffer res = new StringBuffer(name() + "(");
     for (int i = 0; i < getNumParameter(); i++) {
       res.append(getParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")");
     String javaDoc = javaDocComment();
     if (javaDoc != null) 
       res.append("\n\n" + javaDoc);
     return res.toString();
  }
  eq FieldDeclaration.hoverComment() {
     StringBuffer res = new StringBuffer(type().typeName());
     res.append(" " + name());
     String javaDoc = javaDocComment();
     if (javaDoc != null) 
       res.append("\n\n" + javaDoc);
     return res.toString();
  }  

  eq VariableDeclaration.hoverComment() {
     StringBuffer res = new StringBuffer(type().typeName());
     res.append(" " + name());
     String javaDoc = javaDocComment();
     if (javaDoc != null) 
       res.append("\n\n" + javaDoc);
     return res.toString();
  }  

  eq ParameterDeclaration.hoverComment() {
     StringBuffer res = new StringBuffer(type().typeName());
     res.append(" " + name());
     String javaDoc = javaDocComment();
     if (javaDoc != null) 
       res.append("\n\n" + javaDoc);
     return res.toString();
  }  
  
  
  eq MethodAccess.hoverComment() = decl().hoverComment();
  eq TypeAccess.hoverComment() = decl().hoverComment();
  eq TypeDecl.hoverComment() = typeName();
  eq VarAccess.hoverComment() = ((ASTNode)decl()).hoverComment();
}