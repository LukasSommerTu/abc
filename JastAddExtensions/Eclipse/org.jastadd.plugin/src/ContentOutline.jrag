aspect ContentOutline {
   syn boolean ASTNode.showInContentOutline() = false;
   eq ClassDecl.showInContentOutline() = true;
   eq InterfaceDecl.showInContentOutline() = true;
   eq MethodDecl.showInContentOutline() = true;
   eq FieldDeclaration.showInContentOutline() = true;
   eq ConstructorDecl.showInContentOutline() = true;
   
   syn String ASTNode.contentOutlineLabel() = this.getClass().getName();
   eq ClassDecl.contentOutlineLabel() = name();
   eq InterfaceDecl.contentOutlineLabel() = name();
   eq FieldDeclaration.contentOutlineLabel() = name();
   eq MethodDecl.contentOutlineLabel() {
     StringBuffer res = new StringBuffer(type().typeName());
     res.append(" " + name() + "(");
     for (int i = 0; i < getNumParameter(); i++) {
       res.append(getParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")");
     return res.toString();
   }
   eq ConstructorDecl.contentOutlineLabel() {
     StringBuffer res = new StringBuffer();
     res.append(" " + name() + "(");
     for (int i = 0; i < getNumParameter(); i++) {
       res.append(getParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")");
     return res.toString();
   }
   
   /**
     hasVisibleChildren
   */
   syn boolean ASTNode.hasVisibleChildren() {
     if(showInContentOutline())
       return true;
     for(int i = 0; i < getNumChild(); i++)
       if(getChild(i).hasVisibleChildren())
         return true;
     return false;
   }
   
   /**
     outline children
   */
   syn ArrayList ASTNode.outlineChildren() {
     ArrayList list = new ArrayList();
     for(int i = 0; i < getNumChild(); i++) {
       if(getChild(i).showInContentOutline())
         list.add(getChild(i));
       else if(getChild(i).hasVisibleChildren())
         list.addAll(getChild(i).outlineChildren());
     }
     return list;
   }
     
   
}