aspect JastAddContentOutline {
  eq SynEq.showInContentOutline() = true;
  eq InhEq.showInContentOutline() = true;

  eq IntertypeMethodDecl.contentOutlineLabel() {
     StringBuffer res = new StringBuffer(type().typeName());
     res.append(" " + introducedType().name() + "." + name() + "(");
     for (int i = 0; i < getNumParameter(); i++) {
       res.append(getParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")");
     return res.toString();
   }
   eq SynEq.contentOutlineLabel() {
     StringBuffer res = new StringBuffer();
     res.append("eq " + introducedType().name() + "." + name() + "(");
     for (int i = 0; i < getNumParameter(); i++) {
       res.append(getParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")");
     return res.toString();
   }
   
   eq InhEq.contentOutlineLabel() {
     StringBuffer res = new StringBuffer();
     res.append("eq " + introducedType().name() + "." + getChildName() + "(");
     for (int i = 0; i < getNumChildParameter(); i++) {
       res.append(getChildParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")." + name() + "(");
     for (int i = 0; i < getNumParameter(); i++) {
       res.append(getParameter(i).type().typeName());
       if (i != 0) {
         res.append(",");
       }
     } 
     res.append(")");
     return res.toString();
   }
	  
}