aspect ASTParsing {
  refine ASTGrammar private void Program.loadASTFile(String name) {
    try {
      FileInputStream is = new FileInputStream(name);
      org.jastadd.plugin.jastadd.scanner.JavaScanner scanner = new org.jastadd.plugin.jastadd.scanner.JavaScanner(new scanner.Unicode(is));
      scanner.enterJastAdd();
      CompilationUnit cu = (CompilationUnit)new org.jastadd.plugin.jastadd.parser.JavaParser().parse(scanner, org.jastadd.plugin.jastadd.parser.JavaParser.AltGoals.ast_file);
      scanner.previousState();
      is.close();
      List importList = cu.getImportDeclList();
      for(int i = 0; i < cu.getTypeDeclList().getNumChild(); i++) {
        TypeDecl typeDecl = (TypeDecl)cu.getTypeDeclList().getChildNoTransform(i);
        CompilationUnit unit = new CompilationUnit(
            cu.getPackageDecl(),
            (List)importList.fullCopy(),
            new List().add(typeDecl)
            );
        unit.setFromSource(true);
        unit.setRelativeName(name);
        unit.setPathName(name);
        addCompilationUnit(unit);
      }
    } catch (Exception e) {
      throw new Error(e.getMessage());
    }
  }
  
  
  syn boolean CompilationUnit.isFromASTFile() = relativeName().endsWith("ast");
    
  inh ArrayList CompilationUnit.collectRelatedASTDecls(String relativeName);
  eq Program.getCompilationUnit(int i).collectRelatedASTDecls(String relativeName) {
  	ArrayList list = new ArrayList();
  	for (Iterator iter = getCompilationUnits().iterator(); iter.hasNext();) {
  		CompilationUnit unit = (CompilationUnit)iter.next();
  		String name = unit.relativeName();
  		//System.out.println("CU name: " + name);
  		if (name != null && name.equals(relativeName)) {
  			for (Iterator iter2 = unit.getTypeDecls().iterator(); iter2.hasNext();) {
  				list.add(iter2.next());
  			}
  		}
  	}
  	return list;
  }


}

