aspect Compile {
  Program implements org.jastadd.plugin.jastaddj.AST.IProgram;
  TypeDecl implements org.jastadd.plugin.jastaddj.AST.ITypeDecl;
  ClassDecl implements org.jastadd.plugin.jastaddj.AST.IClassDecl;
  
  
  public Collection Program.files() {
    return options().files();
  }
  public void Program.addKeyValueOption(String name) {
    options().addKeyValueOption(name);
  }	
	
  public void Program.addOptions(String[] options) {
    options().addOptions(options);
  }

  public void Program.initOptions() {
    options().initOptions();
  }
  

  // flush 
  public void Program.flushSourceFiles(java.util.Collection fileNames) {
    try {
      flushAttributes();
    } catch (NullPointerException e) {
      setCompilationUnitList(new List());
    }
    List list = new List();
    for(int i = 0; i < getNumCompilationUnit(); i++) {
    	CompilationUnit cu = getCompilationUnit(i);
    	String pathName = cu.pathName();
    	if(!cu.fromSource() || !fileNames.contains(pathName)) {
    		list.add(cu);
    		files().remove(pathName);
    	}
    }
    setCompilationUnitList(list);
  }
  
  public void ASTNode.flushAttributes() {
    flushCache();
    for(int i = 0; i < getNumChild(); i++)
      if(getChildNoTransform(i) != null)
        getChildNoTransform(i).flushAttributes();
  }
  
  public void Program.addSourceFile(String name, String contents) {
    try {
  	  java.io.InputStream is = new java.io.ByteArrayInputStream(contents.getBytes());
      CompilationUnit u = javaParser.parse(is, name);
      is.close();
       
      u.setPathName(name);
      u.setRelativeName(name);
      u.setFromSource(true);
      addCompilationUnit(u);
    } catch(Exception e) {
    }
  }
}