import java.io.*;

/*
 * Visualization of the call graph using Dot
 */
aspect CallGraphVisualDot {
  public void CompilationUnit.visualiseCallGraphUsingDot(PrintStream out, StringBuffer edgeBuffer) {
	out.println("\t//" + relativeName());
	for (int i = 0; i < getNumTypeDecl(); i++) {
		getTypeDecl(i).visualiseCallGraphUsingDot(out, edgeBuffer);
	}
  }
  public void TypeDecl.visualiseCallGraphUsingDot(PrintStream out, StringBuffer edgeBuffer) {
	out.println("\tsubgraph cluster_" + this.hashCode() + " {");
	out.println("\t\tcolor=blue;label=\"" + getID() + "\";");
	for (int i = 0; i < getNumBodyDecl(); i++) {
		getBodyDecl(i).visualiseCallGraphUsingDot(out, edgeBuffer);
	}	
	out.println("\t}");
  }
  public void BodyDecl.visualiseCallGraphUsingDot(PrintStream out, StringBuffer edgeBuffer) {
  }
  public void MethodDecl.visualiseCallGraphUsingDot(PrintStream out, StringBuffer edgeBuffer) {
    out.println("\t\t" + this.hashCode() + 
		"[shape=box,label=\"" + visualCallGraphName() + "\"];");
	for (CGNode decl : callees()) {
		edgeBuffer.append("\t" + this.hashCode() + " -> " + decl.hashCode() + ";\n");
	}
  }
  public void ConstructorDecl.visualiseCallGraphUsingDot(PrintStream out, StringBuffer edgeBuffer) {
    out.println("\t\t" + this.hashCode() + 
		"[color=lightgrey,shape=box,label=\"" + visualCallGraphName() + "\"];");
	for (CGNode decl : callees()) {
		edgeBuffer.append("\t" + this.hashCode() + " -> " + decl.hashCode() + ";\n");
		if (!decl.hostType().compilationUnit().fromSource()) {
		    out.println("\t\t" + decl.hashCode() + 
				"[shape=box,peripheries=2,label=\"" + decl.visualCallGraphName() + "\"];");
		}
	}
  }
}

/* 
 * Visualization of the call graph using a simple text format:
 *
 * > --------------------------------------------------------
 * > signature:_CompilationUnit/TypeDecl/BodyDecl_(in:#edges/out:#edges)\n
 * > in:__caller signature\n
 * > ...
 * > out:_callee signature\n
 * > ...
 *
 */
aspect CallGraphVisualText {
  syn String BodyDecl.visualCallGraphName() = "";
  eq MethodDecl.visualCallGraphName() = signature();
  eq ConstructorDecl.visualCallGraphName() = signature();
  eq StaticInitializer.visualCallGraphName() = "staticInitBlock-" + childNbr();
  eq InstanceInitializer.visualCallGraphName() = "instanceInitBlock-" + childNbr();
  eq FieldDeclaration.visualCallGraphName() = "field: " + getTypeAccess() + " " + name();

  inh int BodyDecl.childNbr();
  eq TypeDecl.getBodyDecl(int i).childNbr() = i;
  eq EnumConstant.getBodyDecl(int i).childNbr() = i;

  public void CompilationUnit.visualiseCallGraphUsingText(PrintStream out) {
	for (int i = 0; i < getNumTypeDecl(); i++) {
		getTypeDecl(i).visualiseCallGraphUsingText(out);
	}
  }
  public void TypeDecl.visualiseCallGraphUsingText(PrintStream out) {
	for (int i = 0; i < getNumBodyDecl(); i++) {
		getBodyDecl(i).visualiseCallGraphUsingText(out);
	}	
  }
  public void BodyDecl.visualiseCallGraphUsingText(PrintStream out) {
	out.println("-------------------------------");
    out.println("signature: " + hostType().name() + "/" + visualCallGraphName() + 
		" (in:"+ calls().size() + "/out:" + callees().size() + ")");
	for (CGNode decl : calls()) {
		out.println("in:  " + decl.hostType().name() + "/" + decl.visualCallGraphName());
	}
	for (CGNode decl : callees()) {
		out.println("out: " + decl.hostType().name() + "/" + decl.visualCallGraphName());
	}
  }
}

aspect IntraTypeFlowVisual {
	public void CompilationUnit.visualiseIntraTypeFlowText(PrintStream out) {
		for (int i = 0; i < getNumTypeDecl(); i++) {
			getTypeDecl(i).visualiseIntraTypeFlowText(out);
		}
	}
  public void TypeDecl.visualiseIntraTypeFlowText(PrintStream out) {
	out.println("--------------------------------");
	out.print("Static flow [" + name() + "|succ]: ");
	if (staticEntry() != staticExit()) {
		staticEntry().printStaticIntraSuccFlow(out);
	} 
	out.println();
	out.print("Static flow [" + name() + "|pred]: ");
	if (staticEntry() != staticExit()) {
		staticExit().printStaticIntraPredFlow(out);
	} 
	out.println();
	out.print("Instance flow [" + name() + "|succ]: ");
	if (instanceEntry() != instanceExit()) {
		instanceEntry().printInstanceIntraSuccFlow(out);
	} 
	out.println();
	out.print("Instance flow [" + name() + "|pred]: ");
	if (instanceEntry() != instanceExit()) {
		instanceExit().printInstanceIntraPredFlow(out);
	} 
	out.println();
  }

  public void FlowNode.printStaticIntraSuccFlow(PrintStream out);
  public void TypeDecl.printStaticIntraSuccFlow(PrintStream out) {
	out.print("exit");
  }
  public void EnumConstant.printStaticIntraSuccFlow(PrintStream out) {
  	out.print("exit");
  }
  public void BodyDecl.printStaticIntraSuccFlow(PrintStream out) {
    out.print(visualCallGraphName() + " -> ");
	for (FlowNode staticSucc : staticSucc()) {
		staticSucc.printStaticIntraSuccFlow(out);
	}
  }

  public void FlowNode.printStaticIntraPredFlow(PrintStream out);
  public void TypeDecl.printStaticIntraPredFlow(PrintStream out) {
	out.print("exit -> ");
	for (FlowNode staticPred : staticPred()) {
		staticPred.printStaticIntraPredFlow(out);
	}
  }
  public void EnumConstant.printStaticIntraPredFlow(PrintStream out) {
  	out.print("exit -> ");
	for (FlowNode staticPred : staticPred()) {
		staticPred.printStaticIntraPredFlow(out);
	}
  }
  public void BodyDecl.printStaticIntraPredFlow(PrintStream out) {
    out.print(visualCallGraphName() + " -> ");
	for (FlowNode staticPred : staticPred()) {
		staticPred.printStaticIntraPredFlow(out);
	}
  }

  public void FlowNode.printInstanceIntraSuccFlow(PrintStream out);
  public void TypeDecl.printInstanceIntraSuccFlow(PrintStream out) {
	out.print("exit");
  }
  public void EnumConstant.printInstanceIntraSuccFlow(PrintStream out) {
  	out.print("exit");
  }
  public void BodyDecl.printInstanceIntraSuccFlow(PrintStream out) {
    out.print(visualCallGraphName() + " -> ");
	for (FlowNode instanceSucc : instanceSucc()) {
		instanceSucc.printInstanceIntraSuccFlow(out);
	}
  }

  public void FlowNode.printInstanceIntraPredFlow(PrintStream out);
  public void TypeDecl.printInstanceIntraPredFlow(PrintStream out) {
	out.print("exit -> ");
	for (FlowNode instancePred : instancePred()) {
		instancePred.printInstanceIntraPredFlow(out);
	}
  }
  public void EnumConstant.printInstanceIntraPredFlow(PrintStream out) {
  	out.print("exit -> ");
	for (FlowNode instancePred : instancePred()) {
		instancePred.printInstanceIntraPredFlow(out);
	}
  }
  public void BodyDecl.printInstanceIntraPredFlow(PrintStream out) {
    out.print(visualCallGraphName() + " -> ");
	for (FlowNode instancePred : instancePred()) {
		instancePred.printInstanceIntraPredFlow(out);
	}
  }

}
