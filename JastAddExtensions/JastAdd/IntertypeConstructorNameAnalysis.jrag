aspect IntertypeMethodNameAnalysis {
  eq IntertypeConstructorDecl.getTargetType().nameType() = NameType.TYPE_NAME;
  
  syn TypeDecl IntertypeConstructorDecl.introducedType() = getTargetType().type();

  syn TypeDecl IntertypeConstructorDecl.hostType() = introducedType();
  eq IntertypeConstructorDecl.getBlock().hostType() = hostType();
  eq IntertypeConstructorDecl.getConstructorInvocation().hostType() = hostType();
  eq IntertypeConstructorDecl.getParameter(int index).hostType() = hostType();

  eq IntertypeConstructorDecl.getConstructorInvocation().lookupConstructor(ConstructorAccess a) = hostType().lookupConstructor(a);
  eq IntertypeConstructorDecl.getBlock().lookupConstructor(ConstructorAccess a) = hostType().lookupConstructor(a);
  eq IntertypeConstructorDecl.getConstructorInvocation().lookupSuperConstructor(ConstructorAccess a) = hostType().lookupSuperConstructor(a);
  eq IntertypeConstructorDecl.getBlock().lookupSuperConstructor(ConstructorAccess a) = hostType().lookupSuperConstructor(a);



  // Hack to avoid multiple declared intertype constructors
  public ConstructorDecl AspectDecl.lookupConstructor(ConstructorDecl signature) {
    return signature;
  }
  public ConstructorDecl ASTDecl.lookupConstructor(ConstructorDecl signature) {
    return signature;
  }

  refine LookupMethod public ArrayList TypeDecl.findConstructor(List argList, TypeDecl typeDecl) {
    ArrayList maxSpecific = LookupMethod.TypeDecl.findConstructor(argList, typeDecl);
    for(Iterator iter = introducedConstructors().iterator(); iter.hasNext(); ) {
      ConstructorDecl decl = (ConstructorDecl)iter.next();
      if(decl.compatible(argList) && decl.accessibleFrom(typeDecl)) {
        if(maxSpecific.isEmpty()) {
          maxSpecific.add(decl);
        }
        else {
          if(decl.moreSpecificThan((ConstructorDecl)maxSpecific.get(0))) {
            maxSpecific.clear();
            maxSpecific.add(decl);
          }
          else if(!((ConstructorDecl)maxSpecific.get(0)).moreSpecificThan(decl)) {
            maxSpecific.add(decl);
          }
        }
      }
    }
    return maxSpecific;
  }

  protected void IntertypeConstructorDecl.collectIntertypeDecls(HashMap map) {
    super.collectIntertypeDecls(map);
    TypeDecl typeDecl = introducedType();
    if(!map.containsKey(typeDecl))
      map.put(typeDecl, new ArrayList());
    Collection c = (Collection)map.get(typeDecl);
    c.add(this);
  }

  syn lazy Collection TypeDecl.introducedConstructors() {
    Collection c = new ArrayList();
    for(Iterator iter = intertypeDecls().iterator(); iter.hasNext(); ) {
      ASTNode node = (ASTNode)iter.next();
      if(node instanceof IntertypeConstructorDecl)
        c.add(node);
    }
    return c;
  }


}
