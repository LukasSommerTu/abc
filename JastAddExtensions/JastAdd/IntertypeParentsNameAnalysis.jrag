aspect IntertypeParentsNameAnalysis {

  eq IntertypeImplements.getTargetType().nameType() = NameType.TYPE_NAME;
  eq IntertypeImplements.getInterfaceType().nameType() = NameType.TYPE_NAME;

  syn TypeDecl IntertypeImplements.introducedType() = getTargetType().type();
  
  syn lazy List ASTDecl.getImplementsList() {
    List list = new List();
    for(Iterator iter = introducedImplements().iterator(); iter.hasNext(); ) {
      IntertypeImplements decl = (IntertypeImplements)iter.next();
      list.add(decl.getInterfaceType().type().createQualifiedAccess());
    }
    return list;
  }

  protected void IntertypeImplements.collectIntertypeDecls(HashMap map) {
    super.collectIntertypeDecls(map);
    TypeDecl typeDecl = introducedType();
    if(!map.containsKey(typeDecl))
      map.put(typeDecl, new ArrayList());
    Collection c = (Collection)map.get(typeDecl);
    c.add(this);
  }

  syn lazy Collection TypeDecl.introducedImplements() {
    Collection c = new ArrayList();
    for(Iterator iter = intertypeDecls().iterator(); iter.hasNext(); ) {
      ASTNode node = (ASTNode)iter.next();
      if(node instanceof IntertypeImplements)
        c.add(node);
    }
    return c;
  }

}
