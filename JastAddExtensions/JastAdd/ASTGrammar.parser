%goal goal ;
%goal ast_file ;


TypeDecl type_declaration =
  tree_node_declaration                                {: return tree_node_declaration; :}
  ;


BodyDecl aspect_body_declaration =
  tree_node_declaration                                {: return new MemberClassDecl(tree_node_declaration); :}
  ;

CompilationUnit ast_file =
    package_declaration.p import_declarations.i ast_declarations.t {: return new CompilationUnit(p.getID(), i, t); :}
  |                       import_declarations.i ast_declarations.t {: return new CompilationUnit("", i, t); :}
  | package_declaration.p                       ast_declarations.t {: return new CompilationUnit(p.getID(), new List(), t); :}
  |                                             ast_declarations.t {: return new CompilationUnit("", new List(), t); :}
  | package_declaration.p import_declarations.i                     {: return new CompilationUnit(p.getID(), i, new List()); :}
  |                       import_declarations.i                     {: return new CompilationUnit("", i, new List()); :}
  | package_declaration.p                                           {: return new CompilationUnit(p.getID(), new List(), new List()); :}
  |                                                                 {: return new CompilationUnit("", new List(), new List()); :}
  ;

List ast_declarations =
    ast_declaration {: return new List().add(ast_declaration); :}
  | ast_declarations ast_declaration {: return ast_declarations.add(ast_declaration); :}
  ;

ASTDecl ast_declaration =
    IDENTIFIER.id SEMICOLON 
    {: return new ASTDecl(new Modifiers(new List().add(new Modifier("public"))), id, new Opt(), new List()); :}
  | IDENTIFIER.id COLON name SEMICOLON 
    {: return new ASTDecl(new Modifiers(new List().add(new Modifier("public"))), id, new Opt(name), new List()); :}
  | IDENTIFIER.id ASTEQ ast_child_list_opt SEMICOLON
    {: return new ASTDecl(new Modifiers(new List().add(new Modifier("public"))), id, new Opt(), ast_child_list_opt); :}
  | IDENTIFIER.id COLON name ASTEQ ast_child_list_opt SEMICOLON
    {: return new ASTDecl(new Modifiers(new List().add(new Modifier("public"))), id, new Opt(name), ast_child_list_opt); :}
  | ABSTRACT IDENTIFIER.id SEMICOLON 
    {: return new ASTDecl(new Modifiers(new List().add(new Modifier("public")).add(new Modifier("abstract"))), id, new Opt(), new List()); :}
  | ABSTRACT IDENTIFIER.id COLON name SEMICOLON 
    {: return new ASTDecl(new Modifiers(new List().add(new Modifier("public")).add(new Modifier("abstract"))), id, new Opt(name), new List()); :}
  | ABSTRACT IDENTIFIER.id ASTEQ ast_child_list_opt SEMICOLON
    {: return new ASTDecl(new Modifiers(new List().add(new Modifier("public")).add(new Modifier("abstract"))), id, new Opt(), ast_child_list_opt); :}
  | ABSTRACT IDENTIFIER.id COLON name ASTEQ ast_child_list_opt SEMICOLON
    {: return new ASTDecl(new Modifiers(new List().add(new Modifier("public")).add(new Modifier("abstract"))), id, new Opt(name), ast_child_list_opt); :}
  ;
  

ASTDecl tree_node_declaration =
    modifiers AST IDENTIFIER.id SEMICOLON 
    {: return new ASTDecl(modifiers, id, new Opt(), new List()); :}
  | modifiers AST IDENTIFIER.id COLON name SEMICOLON 
    {: return new ASTDecl(modifiers, id, new Opt(name), new List()); :}
  | modifiers AST IDENTIFIER.id ASTEQ ast_child_list_opt SEMICOLON
    {: return new ASTDecl(modifiers, id, new Opt(), ast_child_list_opt); :}
  | modifiers AST IDENTIFIER.id COLON name ASTEQ ast_child_list_opt SEMICOLON
    {: return new ASTDecl(modifiers, id, new Opt(name), ast_child_list_opt); :}
  | AST IDENTIFIER.id SEMICOLON 
    {: return new ASTDecl(new Modifiers(new List()), id, new Opt(), new List()); :}
  | AST IDENTIFIER.id COLON name SEMICOLON 
    {: return new ASTDecl(new Modifiers(new List()), id, new Opt(name), new List()); :}
  | AST IDENTIFIER.id ASTEQ ast_child_list_opt SEMICOLON
    {: return new ASTDecl(new Modifiers(new List()), id, new Opt(), ast_child_list_opt); :}
  | AST IDENTIFIER.id COLON name ASTEQ ast_child_list_opt SEMICOLON
    {: return new ASTDecl(new Modifiers(new List()), id, new Opt(name), ast_child_list_opt); :}
  ;

List ast_child_list_opt =
                       {: return new List(); :}
  | ast_child_list     {: return ast_child_list; :}
  ;

List ast_child_list =
    ast_child                 {: return new List().add(ast_child); :}
  | ast_child_list ast_child  {: return ast_child_list.add(ast_child); :}
  ;

ASTChild ast_child =
    IDENTIFIER.id
    {: return new ASTElementChild(id, new Opt()); :}
  | DIV IDENTIFIER.id DIV
    {: return new NTAElementChild(id, new Opt()); :}
  | IDENTIFIER.id COLON name
    {: return new ASTElementChild(id, new Opt(name)); :}
  | DIV IDENTIFIER.id COLON name DIV
    {: return new NTAElementChild(id, new Opt(name)); :}
    
  | LBRACK IDENTIFIER.id RBRACK
    {: return new ASTOptionalChild(id, new Opt()); :}
  | DIV LBRACK IDENTIFIER.id RBRACK DIV
    {: return new NTAOptionalChild(id, new Opt()); :}
  | LBRACK IDENTIFIER.id COLON name RBRACK
    {: return new ASTOptionalChild(id, new Opt(name)); :}
  | DIV LBRACK IDENTIFIER.id COLON name RBRACK DIV
    {: return new NTAOptionalChild(id, new Opt(name)); :}
    
  | IDENTIFIER.id MULT
    {: return new ASTListChild(id, new Opt()); :}
  | DIV IDENTIFIER.id MULT DIV
    {: return new NTAListChild(id, new Opt()); :}
  | IDENTIFIER.id COLON name MULT
    {: return new ASTListChild(id, new Opt(name)); :}
  | DIV IDENTIFIER.id COLON name MULT DIV
    {: return new NTAListChild(id, new Opt(name)); :}
    
  | LT IDENTIFIER.id GT
    {: return new ASTTokenChild(id, new Opt()); :}
  | DIV LT IDENTIFIER.id GT DIV
    {: return new NTATokenChild(id, new Opt()); :}
  | LT IDENTIFIER.id COLON type GT 
    {: return new ASTTokenChild(id, new Opt(type)); :}
  | DIV LT IDENTIFIER.id COLON type GT DIV
    {: return new NTATokenChild(id, new Opt(type)); :}

  ;
