aspect NonNullEmit {
  class Input {
    java.io.FileReader r;
    int line;
    int column;
    public Input(String fileName) throws java.io.IOException {
      r = new java.io.FileReader(fileName);
      line = 1;
      column = 1;
    }
    public void emitUntil(int line, int column, java.io.PrintWriter w) throws java.io.IOException {
      if(line == 0 || column == 0)
        return;
      l: while(this.line < line || this.column < column) {
        boolean newLine = false;
        while(this.line < line) {
          int c = r.read();
          if(c == -1)
            break l;
          w.write((char)c);
          if(!newLine && c == '\r') {
            this.line++;
            this.column = 1;
          }
          else if(c == '\n') {
            this.line++;
            this.column = 1;
            newLine = true;
          }
          else {
            newLine = false;
          }
        }
        while(this.column < column) {
          int c = r.read();
          if(c == -1)
            break l;
          w.write(c);
          this.column++;
        }
      }
    }
    public void emitUntil(char stop, java.io.PrintWriter w) throws java.io.IOException {
      boolean newLine = false;
      while(true) {
        int c = r.read();
        if(c == -1)
          break;
        w.write((char)c);
        if(!newLine && c == '\r') {
          this.line++;
          this.column = 1;
        }
        else if(c == '\n') {
          this.line++;
          this.column = 1;
          newLine = true;
        }
        else {
          newLine = false;
        }
        if(c == stop)
          return;
      }
    }
    public void close() throws java.io.IOException {
      r.close();
    }
  }

  public void Program.emit() {
    String destinationPath = Program.getValueForOption("-d");
    for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
      CompilationUnit unit = (CompilationUnit)iter.next();
      if(unit.fromSource()) {
        String fileName = unit.pathName();
        String destinationName = destinationPath + java.io.File.separator + unit.relativeName();
        System.out.println("Writing " + destinationName);
        try {
          Input input = new Input(fileName);
          new java.io.File(destinationName).getParentFile().mkdirs();
          java.io.PrintWriter w = new java.io.PrintWriter(new java.io.FileWriter(destinationName));
          unit.emit(w, input);
          int line = getLine(unit.getEnd());
          int column = getColumn(unit.getEnd());
          input.emitUntil(line+1, column, w);
          input.close();
          w.close();
        } catch(IOException e) {
          e.printStackTrace();
        }
      }
    }
  }

  public void Program.emitTest() {
    for(Iterator iter = compilationUnitIterator(); iter.hasNext(); ) {
      CompilationUnit unit = (CompilationUnit)iter.next();
      if(unit.fromSource()) {
        String fileName = unit.pathName();
        try {
          Input input = new Input(fileName);
          java.io.PrintWriter w = new java.io.PrintWriter(System.out);
          unit.emit(w, input);
          int line = getLine(unit.getEnd());
          int column = getColumn(unit.getEnd());
          input.emitUntil(line+1, column, w);
          w.close();
          input.close();
        } catch(IOException e) {
          e.printStackTrace();
        }
      }
    }
  }

  public void ASTNode.emit(PrintWriter p, Input input) throws java.io.IOException {
    if(this instanceof NonNullAnnotated) {
      NonNullAnnotated a = (NonNullAnnotated)this;
      int line = getLine(getStart());
      int column = getColumn(getStart());
      if(line != 0 && column != 0) {
        input.emitUntil(line, column, p);
        a.emitAnnotations(p);
      }
    }
    for(int i = 0; i < getNumChild(); i++) {
      getChild(i).emit(p, input);
    }
  }

  public void CompilationUnit.emit(PrintWriter p, Input input) throws java.io.IOException {
    if(Program.hasValueForOption("-import") && getNumTypeDecl() > 0) {
      String importString = "import " + Program.getValueForOption("-import") + ";";
      boolean found = false;
      for(int i = 0; i < getNumImportDecl() && !found; i++)
        if(getImportDecl(i).toString().equals(importString))
          found = true;
      if(!found) {
        int line = getLine(getImportDeclList().getEnd());
        int column = getColumn(getImportDeclList().getEnd());
        if(line != 0 && column != 0) {
          line += 1;
          column = 1;
          input.emitUntil(line, column, p);
          p.println(importString);
        }
        else {
          input.emitUntil(';', p);
          input.emitUntil(input.line + 1, 1, p);
          p.println("\n" + importString);
        }
        getTypeDeclList().emit(p, input);
        return;
      }
    }
    super.emit(p, input);
  }

  interface NonNullAnnotated {
    void emitAnnotations(java.io.PrintWriter p);
  }
  ParameterDeclaration implements NonNullAnnotated;
  VariableDeclaration implements NonNullAnnotated;
  FieldDeclaration implements NonNullAnnotated;
  MethodDecl implements NonNullAnnotated;

  public void ParameterDeclaration.emitAnnotations(java.io.PrintWriter p) {
    if(inferedNonNull() && !getModifiers().isNotNull())
      p.write(Program.nonNullAnnotation());
    if(inferedRaw() && !getModifiers().isRawObjectType())
      p.write(Program.rawAnnotation());
  }

  public void VariableDeclaration.emitAnnotations(java.io.PrintWriter p) {
    if(addNonNull())
      p.write(Program.nonNullAnnotation());
    if(inferedRaw() && !getModifiers().isRawObjectType())
      p.write(Program.rawAnnotation());
  }

  public void FieldDeclaration.emitAnnotations(java.io.PrintWriter p) {
    if(addNonNull())
      p.write(Program.nonNullAnnotation());
    if(inferedRaw() && !getModifiers().isRawObjectType())
      p.write(Program.rawAnnotation());
  }

  public void MethodDecl.emitAnnotations(java.io.PrintWriter p) {
    if(addNonNull())
      p.write(Program.nonNullAnnotation());
    if(inferedRaw() && !getModifiers().isRawObjectType())
      p.write(Program.rawAnnotation());
    if(inferedRawThis() && !getModifiers().isRawThisObjectType())
      p.write(Program.rawThisAnnotation());
  }

  public static String Program.nonNullAnnotation() {
    if(Program.hasOption("-legacysyntax"))
      return "/*@NonNull*/ ";
    else
      return "@NonNull ";
  }
  public static String Program.rawAnnotation() {
    if(Program.hasOption("-legacysyntax"))
      return "/*@Raw*/ ";
    else
      return "@Raw ";
  }
  public static String Program.rawThisAnnotation() {
    if(Program.hasOption("-legacysyntax"))
      return "/*@RawThis*/ ";
    else
      return "@RawThis ";
  }

}

