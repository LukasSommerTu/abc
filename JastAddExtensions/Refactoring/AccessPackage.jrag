aspect AccessPackage {
	
	inh Access ASTNode.accessPackage(String pkg);
	inh Access BodyDecl.accessPackage(String pkg);
	inh Access Block.accessPackage(String pkg);
	inh Access Expr.accessPackage(String pkg);
	
	inh boolean Block.hasPackage(String packageName);
	inh boolean CompilationUnit.hasPackage(String packageName);
	
	inh SimpleSet Stmt.lookupType(String name);
	inh SimpleSet BodyDecl.lookupType(String name);

	eq CompilationUnit.getChild(int i).accessPackage(String pkg) {
		String[] path = pkg.split("\\.");
		if(lookupType(path[0]).isEmpty() && hasPackage(pkg))
			return new PackageAccess(pkg);
		return null;
	}
	
	eq TypeDecl.getBodyDecl(int i).accessPackage(String pkg) {
		String[] path = pkg.split("\\.");
		if(getBodyDecl(i).lookupType(path[0]).isEmpty() && 
				getBodyDecl(i).lookupVariable(path[0]).isEmpty() && hasPackage(pkg)) {
			return new PackageAccess(pkg);
		}
		return null;
	}
	
	eq Block.getStmt(int i).accessPackage(String pkg) {
		String[] path = pkg.split("\\.");
		if(getStmt(i).lookupType(path[0]).isEmpty() && 
				getStmt(i).lookupVariable(path[0]).isEmpty() && hasPackage(pkg))
			return new PackageAccess(pkg);
		return null;
	}

	eq AbstractDot.getRight().accessPackage(String pkg) {
		Expr left = getLeft();
		if(left.isPackageAccess()) {
			String fullname = ((PackageAccess)left).packageName() + "." + pkg;
			if(hasPackage(fullname))
				return new PackageAccess(fullname);
		}
		return null;
	}
	
}