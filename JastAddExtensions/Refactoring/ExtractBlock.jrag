/*
 * The first part of the Extract Method refactoring, Extract Block takes a piece of
 * code (given by its start and end statements) and turns it into a block.
 * 
 * We need to ensure that this is possible (see precondition checks), and possibly
 * move some declarations for variables that are used outside the selection out of
 * the generated block.
 */

aspect ExtractBlock {

	public Block Block.extractBlock(int begin, int end) throws RefactoringException {
		AdjustmentTable table = new AdjustmentTable();
		
		// ensure indices make sense
		if(end <= begin) { int tmp = end; end = begin; begin = tmp;	}
		if(begin < 0 || end >= getNumStmt() || end < begin)
			throw new RefactoringException("indices out of range");

		// lock; create new block
		lockAllAccesses(table);
		new_block = new Block(new List());
		insertStmt(end+1, new_block);
		
		// push statements into block
		for(int i=end;i>=begin;--i) {
			Stmt stmt = getStmt(i);
			boolean leftover_decl = stmt.pushIntoBlock();
			// take care of left-over variable declarations
			if(leftover_decl && i > begin) {
				stmt = getStmt(i);
				removeStmt(i);
				insertStmt(begin++, stmt);
				i++;
				programRoot().flushCaches();
			}
		}
		
		// unlock
		programRoot().flushCaches();
		table.adjust();
		return new_block;
	}
}
