aspect LockedTypeAccess {
	// not all types have a name
	public boolean TypeDecl.hasName() { return true; }
	public boolean AbstractWildcardType.hasName() { return false; }
	public boolean NullType.hasName() { return false; }
	public boolean EmptyType.hasName() { return false; }
	public boolean AnonymousDecl.hasName() { return false; }
	public boolean ClassDeclSubstituted.hasName() { return false; }
	public boolean GenericClassDeclSubstituted.hasName() { return false; }
	public boolean UnknownType.hasName() { return false; }
	public boolean GLBType.hasName() { return false; }
	public boolean GenericInterfaceDeclSubstituted.hasName() { return false; }
	public boolean LUBType.hasName() { return false; }
	
	/* A locked type access is a type access that does not obey the normal type lookup
	 * rules, but instead immediately binds to its target. */
	private SavedTypeDecl TypeAccess.targetType = null;
	private boolean CompilationUnit.locked = false;
	
	refine LookupType eq TypeAccess.decls() = targetType == null ? refined() : targetType.getDecl();
	refine Generics eq TypeAccess.decl() = targetType == null ? refined() : targetType.getDecl();
	
	refine PrettyPrint public void TypeAccess.toString(StringBuffer s) {
		if(targetType == null) {
			refined(s);
		} else {
			s.append("[[");
			refined(s);
			s.append("]]");
		}
	}
	
	public Access TypeDecl.createLockedAccess() {
		TypeAccess acc = new TypeAccess(name());
		acc.lock(this);
		return acc;
	}
	
	public Access GenericTypeDecl.createLockedAccess() {
		Access tacc = rawType().createLockedAccess();
		List<Access> targs = new List<Access>();
		for(int i=0;i<getNumTypeParameter();++i)
			targs.add(getTypeParameter(i).createLockedAccess());
		return new ParTypeAccess(tacc, targs); 
	}
	
	public ASTNode TypeAccess.lockNames(Collection<String> endangered) {
		if(targetType == null &&
				(endangered.contains(name()) || endangered.contains(getTopLevelPackage())))
			return lock();
		return super.lockNames(endangered);
	}
	
	public ASTNode ParTypeAccess.lockNames(Collection<String> endangered) {
		String name = getTypeAccess().type().name();
		if(endangered.contains(name))
			return lock();
		return super.lockNames(endangered);
	}
	
	// absolute type access; can't get shadowed anyway
	public ASTNode BytecodeTypeAccess.lockNames(Collection<String> endangered) { return this; }
	
	public ASTNode CompilationUnit.lockNames(Collection<String> endangered) {
		if(fromSource() && !locked && endangered.contains(getID()))
			locked = true;
		return super.lockNames(endangered);
	}
	
	public Access TypeAccess.eliminateLockedNames() {
		return targetType == null ? this : unlock();
	}

	public CompilationUnit CompilationUnit.eliminateLockedNames() {
		if(locked && fromSource()) {
			locked = false;
			// make sure this compilation unit has same name as publicly declared class
			for(TypeDecl t : getTypeDecls()) {
				if(t.isPublic()) {
					setID(t.name());
					break;
				}
			}
		}
		return this;
	}
	
	refine TypeVariableExt protected void TypeAccess.collectUsedTypeVars(Collection<TypeVariable> tvars) {
		if(targetType != null)
			targetType.collectUsedTypeVars(tvars);
		refined(tvars);
	}
	
	public ASTNode TypeAccess.lock() { return lock(decl());	}
	public ASTNode TypeAccess.lock(TypeDecl decl) {
		assert decl != null && !decl.isUnknown();
		targetType = decl.save();
		return this;
	}
	
	public ASTNode ParTypeAccess.lock() { return lock(type()); }
	public ASTNode ParTypeAccess.lock(TypeDecl decl) {
		Access tacc = decl.createLockedAccess();
		replaceWith(tacc);
		return tacc;
	}
	
	public Access TypeAccess.unlock() {
		TypeDecl target = targetType.getDecl();
		if(!target.hasName())
			throw new RefactoringException("cannot unlock access to nameless type");
		try {
			if(hostType() == null && !target.accessibleFromPackage(hostPackage())
					|| hostType() != null && !target.accessibleFrom(hostType()))
				throw new RefactoringException("inaccessible type");
			if(!fromSource()) {
				if(!decl().equals(target))
					throw new RefactoringException("cannot fix access in library");
				return this;
			}
			if(target.isGenericType() && !inImportDecl())
				return unlockGenericTypeAccess((GenericTypeDecl)target);
			if(target.isRawType())
				target = target.erasure();
			if(target.isParameterizedType())
				return unlockParTypeAccess((ParTypeDecl)target);
			if(target.isTypeVariable())
				return unlockTypeVariableAccess((TypeVariable)target);
			if(target instanceof PrimitiveType || target instanceof VoidType)
				return unlockPrimitiveTypeAccess(target);
			if(target.isArrayDecl())
				return unlockArrayTypeAccess((ArrayDecl)target);
			if(target.isLocalClass())
				return unlockLocalClassAccess((ClassDecl)target);
			if(target.isMemberType())
				return unlockMemberTypeAccess(target);
			if(target.isTopLevelType())
				return unlockTopLevelTypeAccess(target);
			throw new Error("cannot fix access to this kind of type");
		} finally {
			targetType = null;
		}
	}
	
	protected Access TypeAccess.unlockPrimitiveTypeAccess(TypeDecl target) {
		if(isQualified())
			throw new RefactoringException("cannot access primitive type under qualifier");
		setID(target.name());
		return this;
	}
	
	protected Access TypeAccess.unlockTypeVariableAccess(TypeVariable target) {
		if(isQualified())
			throw new RefactoringException("cannot access type variable under type qualifier");
		if(!lookupName(target.name()).isSingleton(target))
			throw new RefactoringException("cannot access shadowed/obscured type variable");
		setPackage("");
		setID(target.name());
		return this;
	}
	
	protected Access TypeAccess.unlockLocalClassAccess(ClassDecl target) {
		if(isQualified())
			throw new RefactoringException("cannot access local class under type qualifier");
		if(!lookupName(target.name()).isSingleton(target))
			throw new RefactoringException("cannot access shadowed/obscured local class");
		setPackage("");
		setID(target.name());
		return this;
	}

	protected Access TypeAccess.unlockMemberTypeAccess(TypeDecl target) {
		if(isQualified()) {
			if(!qualifier().isTypeAccess())
				throw new RefactoringException("cannot access member type under non-type qualifier");
			TypeDecl outer = qualifier().type();
			if(!outer.memberTypes(target.name()).isSingleton(target))
				throw new RefactoringException("cannot access shadowed member type");
			setPackage("");
			setID(target.name());
			return this;
		} else {
			if(lookupName(target.name()).isSingleton(target)) {
				setPackage("");
				setID(target.name());
				return this;
			} else {
				TypeDecl outer = target.enclosingType();
				if(!outer.memberTypes(target.name()).isSingleton(target))
					throw new RefactoringException("cannot access shadowed member type");
				setPackage("");
				setID(target.name());
				// TODO: more thought on when precisely this is necessary
				// (rationale here is that if target is a generic type declaration, we are actually
				// trying to build an access to its raw type)
				if(target.isGenericType() && outer.isGenericType())
					outer = ((GenericTypeDecl)outer).rawType();
				return outer.createLockedAccess().qualifiesAccess(this);
			}
		}
	}
	
	protected Access TypeAccess.unlockTopLevelTypeAccess(TypeDecl target) {
		if(isQualified())
			throw new RefactoringException("cannot access toplevel type under qualifier");
		programRoot().flushCaches();
		if(lookupName(target.name()).isSingleton(target)) {
			setPackage("");
			setID(target.name());
			return this;
		}
		setPackage(target.packageName());
		setID(target.name());
		String pkg = getTopLevelPackage();
		SimpleSet s = lookupName(pkg);
		if(!s.isEmpty() && !s.isSingleton(lookupPackage(pkg))
				|| !lookupType(target.packageName(), target.name()).equals(target))
			throw new RefactoringException("cannot access toplevel type");
		return this;
	}
	
	protected Access TypeAccess.unlockParTypeAccess(ParTypeDecl target) {
		List<Access> args = new List<Access>();
		for(int i=0;i<target.getNumArgument();++i)
			args.add(target.getArgument(i).type().createLockedAccess());
		return new ParTypeAccess(((GenericTypeDecl)target.genericDecl()).rawType().createLockedAccess(), args);
	}
	
	protected Access TypeAccess.unlockGenericTypeAccess(GenericTypeDecl target) {
		List<Access> args = new List<Access>();
		for(int i=0;i<target.getNumTypeParameter();++i)
			args.add(target.getTypeParameter(i).createLockedAccess());
		return new ParTypeAccess(target.rawType().createLockedAccess(), args);
	}

	protected Access TypeAccess.unlockArrayTypeAccess(ArrayDecl target) {
		return new ArrayTypeAccess(target.componentType().createLockedAccess());
	}
	
	protected Access ArrayTypeAccess.unlockArrayTypeAccess(ArrayDecl target) {
		setAccess(target.componentType().createLockedAccess());
		return this;
	}
}