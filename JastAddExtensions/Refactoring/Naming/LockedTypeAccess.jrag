aspect LockedTypeAccess {
	// not all types have a name
	public boolean TypeDecl.hasName() { return true; }
	public boolean AbstractWildcardType.hasName() { return false; }
	public boolean NullType.hasName() { return false; }
	public boolean EmptyType.hasName() { return false; }
	public boolean AnonymousDecl.hasName() { return false; }
	public boolean UnknownType.hasName() { return false; }
	public boolean GLBType.hasName() { return false; }
	public boolean LUBType.hasName() { return false; }
	
	/* A locked type access is a type access that does not obey the normal type lookup
	 * rules, but instead immediately binds to its target. */
	private TypeDecl TypeAccess.targetType = null;
	private boolean CompilationUnit.locked = false;
	
	public boolean TypeAccess.isLocked() { return targetType != null; }
	public boolean CompilationUnit.isLocked() { return locked; }
	
	refine LookupType eq TypeAccess.decls() = isLocked() ? targetType : refined();
	refine Generics eq TypeAccess.decl() = isLocked() ? targetType : refined();
	
	refine PrettyPrint public void TypeAccess.toString(StringBuffer s) {
		if(!isLocked()) {
			refined(s);
		} else {
			s.append("[[");
			refined(s);
			s.append("]]");
		}
	}
	
	public Access TypeDecl.createLockedAccess() {
		TypeAccess acc = new TypeAccess(name());
		acc.lock(this);
		return acc;
	}
	
	public Access ArrayDecl.createLockedAccess() {
		return new ArrayTypeAccess(componentType().createLockedAccess());
	}
	
	public Access GenericTypeDecl.createLockedAccess() {
		Access tacc = rawType().createLockedAccess();
		List<Access> targs = new List<Access>();
		for(int i=0;i<getNumTypeParameter();++i)
			targs.add(getTypeParameter(i).createLockedAccess());
		return new ParTypeAccess(tacc, targs); 
	}
	
	public Access ParTypeDecl.createLockedAccess() {
		List<Access> args = new List<Access>();
		for(int i=0;i<getNumArgument();++i)
			args.add(getArgument(i).type().createLockedAccess());
		TypeDecl gen = ((GenericTypeDecl)genericDecl()).rawType();
		return new ParTypeAccess(gen.createLockedAccess(), args);
	}
	
	public Access RawClassDecl.createLockedAccess() {
		TypeAccess acc = new TypeAccess(name());
		acc.lock(this);
		return acc;
	}
	
	public Access RawInterfaceDecl.createLockedAccess() {
		TypeAccess acc = new TypeAccess(name());
		acc.lock(this);
		return acc;
	}
	
	public Access WildcardType.createLockedAccess() {
		return new Wildcard();
	}
	
	public Access WildcardExtendsType.createLockedAccess() {
		return new WildcardExtends(extendsType().createLockedAccess());
	}
	
	public Access WildcardSuperType.createLockedAccess() {
		return new WildcardSuper(superType().createLockedAccess());
	}
	
	public ASTNode TypeAccess.lockNames(Collection<String> endangered) {
		if(!isLocked() &&
				(endangered.contains(name()) || endangered.contains(getTopLevelPackage())))
			return lock();
		return super.lockNames(endangered);
	}
	
	public ASTNode ArrayTypeAccess.lockNames(Collection<String> endangered) {
		setAccess((Access)getAccess().lockNames(endangered));
		return this;
	}
	
	// absolute type access; can't get shadowed anyway
	public ASTNode BytecodeTypeAccess.lockNames(Collection<String> endangered) { return this; }
	
	public ASTNode CompilationUnit.lockNames(Collection<String> endangered) {
		if(fromSource() && !locked && endangered.contains(getID()))
			locked = true;
		return super.lockNames(endangered);
	}
	
	public Access TypeAccess.eliminateLockedNames() {
		return isLocked() ? unlock(null) : this;
	}

	public CompilationUnit CompilationUnit.eliminateLockedNames() {
		if(locked && fromSource()) {
			locked = false;
			// make sure this compilation unit has same name as publicly declared class
			for(TypeDecl t : getTypeDecls()) {
				if(t.isPublic()) {
					setID(t.name());
					break;
				}
			}
		}
		return this;
	}
	
	public ASTNode Access.lock() { return this; }
	public ASTNode TypeAccess.lock() { return lock(decl());	}
	public ASTNode AbstractWildcard.lock() { return this; }
	public ASTNode TypeAccess.lock(TypeDecl decl) {
		assert decl != null && !decl.isUnknown();
		targetType = decl;
		return this;
	}
	
	public ASTNode ArrayTypeAccess.lock() {
		setAccess((Access)getAccess().lock());
		return this;
	}
	
	// primitive types can never be shadowed, so there's no point in locking them
	public ASTNode PrimitiveTypeAccess.lock() { return this; }
	public Access PrimitiveTypeAccess.unlock(Expr qual) { assert qual == null; return this; }
	
	public Access TypeAccess.unlock(Expr qual) {
		assert qual == null || qual.isPure();
		TypeDecl target = targetType.refresh();
		targetType = null;
		flushCaches();
		if(!target.hasName())
			throw new RefactoringException("cannot unlock access to nameless type");
		// the following check doesn't quite work: see test_nonstatic_8 of MoveInnerToTopLevel
		/*if(!target.accessibleFrom(hostType()) || getParent() instanceof ClassInstanceExpr && ((ClassInstanceExpr)getParent()).decl().hostType().isUnknown())
			throw new RefactoringException("cannot unlock access to inaccessible type");*/
		try {
			if(hostType() == null && !target.accessibleFromPackage(hostPackage())
					|| hostType() != null && !target.accessibleFrom(hostType()))
				throw new RefactoringException("inaccessible type");
			if(!fromSource()) {
				if(!decl().equals(target))
					throw new RefactoringException("cannot fix access in library");
				return this;
			}
			if(target.isRawType())
				target = target.erasure();
			if(target.isParameterizedType())
				return unlockParTypeAccess((ParTypeDecl)target, qual);
			if(target.isTypeVariable())
				return unlockTypeVariableAccess((TypeVariable)target, qual);
			if(target instanceof PrimitiveType || target instanceof VoidType)
				return unlockPrimitiveTypeAccess(target, qual);
			if(target.isArrayDecl())
				return unlockArrayTypeAccess((ArrayDecl)target, qual);
			if(target.isLocalClass())
				return unlockLocalClassAccess((ClassDecl)target, qual);
			if(target.isMemberType())
				return unlockMemberTypeAccess(target, qual);
			if(target.isTopLevelType())
				return unlockTopLevelTypeAccess(target, qual);
			throw new Error("cannot fix access to this kind of type");
		} finally {
			targetType = null;
		}
	}
	
	protected Access TypeAccess.unlockPrimitiveTypeAccess(TypeDecl target, Expr qual) {
		setID(target.name());
		return this;
	}
	
	protected Access TypeAccess.unlockTypeVariableAccess(TypeVariable target, Expr qual) {
		if(!lookupName(target.name()).isSingleton(target))
			throw new RefactoringException("cannot access shadowed/obscured type variable");
		setPackage("");
		setID(target.name());
		return this;
	}
	
	protected Access TypeAccess.unlockLocalClassAccess(ClassDecl target, Expr qual) {
		if(!lookupName(target.name()).isSingleton(target))
			throw new RefactoringException("cannot access shadowed/obscured local class");
		setPackage("");
		setID(target.name());
		return this;
	}

	protected Access TypeAccess.unlockMemberTypeAccess(TypeDecl target, Expr qual) {
		if(qual != null) {
			// try to build an access using the given qualifier
			if(qual.isTypeAccess()) {
				TypeDecl outer = qual.type().refresh();
				if(outer.memberTypes(target.name()).isSingleton(target)) {
					setPackage("");
					setID(target.name());
					return qual.qualifiesAccess(this);
				}
			}
			// we need to throw away the qualifier, but make sure it is pure
			if(!qual.isPure())
				throw new RefactoringException("cannot access member type");
		}
		if(lookupName(target.name()).isSingleton(target)) {
			setPackage("");
			setID(target.name());
			return this;
		} else {
			TypeDecl outer = target.enclosingType();
			if(!target.isStatic() && getParent() instanceof ClassInstanceExpr && hostType().withinBodyThatSubclasses(outer) == null)
				throw new RefactoringException("cannot access non-static member types without enclosing instance in instanceof");
			if(!outer.memberTypes(target.name()).isSingleton(target))
				throw new RefactoringException("cannot access shadowed member type");
			setPackage("");
			setID(target.name());
			// TODO: more thought on when precisely this is necessary
			// (rationale here is that if target is a generic type declaration, we are actually
			// trying to build an access to its raw type)
			if(target.isGenericType() && outer.isGenericType())
				outer = ((GenericTypeDecl)outer).rawType();
			return outer.createLockedAccess().qualifiesAccess(this);
		}
	}
	
	protected Access TypeAccess.unlockTopLevelTypeAccess(TypeDecl target, Expr qual) {
		programRoot().flushCaches();
		if(lookupName(target.name()).isSingleton(target)) {
			setPackage("");
			setID(target.name());
			return this;
		}
		setPackage(target.packageName());
		setID(target.name());
		String pkg = getTopLevelPackage();
		SimpleSet s = lookupName(pkg);
		if(!s.isEmpty() && !s.isSingleton(lookupPackage(pkg))
				|| !lookupType(target.packageName(), target.name()).equals(target))
			throw new RefactoringException("cannot access toplevel type");
		return this;
	}
	
	protected Access TypeAccess.unlockParTypeAccess(ParTypeDecl target, Expr qual) {
		List<Access> args = new List<Access>();
		for(int i=0;i<target.getNumArgument();++i)
			args.add(target.getArgument(i).type().createLockedAccess());
		Access acc = new ParTypeAccess(((GenericTypeDecl)target.genericDecl()).rawType().createLockedAccess(), args);
		if(qual != null)
			acc = qual.qualifiesAccess(acc);
		return acc;
	}
	
	protected Access TypeAccess.unlockGenericTypeAccess(GenericTypeDecl target, Expr qual) {
		List<Access> args = new List<Access>();
		for(int i=0;i<target.getNumTypeParameter();++i)
			args.add(target.getTypeParameter(i).createLockedAccess());
		Access acc = new ParTypeAccess(target.rawType().createLockedAccess(), args);
		if(qual != null)
			acc = qual.qualifiesAccess(acc);
		return acc;
	}

	protected Access TypeAccess.unlockArrayTypeAccess(ArrayDecl target, Expr qual) {
		Access acc = target.componentType().createLockedAccess();
		if(qual != null)
			acc = qual.qualifiesAccess(acc);
		return new ArrayTypeAccess(acc);
	}
	
	protected Access ArrayTypeAccess.unlockArrayTypeAccess(ArrayDecl target, Expr qual) {
		setAccess(target.componentType().createLockedAccess());
		return qual == null ? this : qual.qualifiesAccess(this);
	}
}