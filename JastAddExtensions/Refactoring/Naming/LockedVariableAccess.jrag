aspect LockedVariableAccess {
	/* A locked variable access is a variable access that does not obey the normal variable lookup
	 * rules, but instead immediately binds to its target. */
	private Variable VarAccess.targetVariable = null;
	
	public VarAccess Variable.createLockedAccess() {
		VarAccess va = new VarAccess(this.name());
		va.lock(this);
		return va;
	}
	
	refine IntertypeFieldNameAnalysis eq VarAccess.decls() = targetVariable == null ? refined() : SimpleSet.emptySet.add(targetVariable);
	
	refine PrettyPrint public void VarAccess.toString(StringBuffer s) {
		if(targetVariable == null) {
			refined(s);
		} else {
			s.append("[[");
			refined(s);
			s.append("]]");
		}
	}
	
	// introducing locked variable accesses
	public ASTNode VarAccess.lockNames(Collection<String> endangered) {
		if(endangered.contains(name()))
			return lock();
		else
			return super.lockNames(endangered);
	}
	
	public ASTNode VarAccess.lock() {
		return targetVariable == null ? lock(decl()) : this;
	}
	
	public ASTNode VarAccess.lock(Variable target) {
		assert target != null;
		targetVariable = target.isSubstituted() ? target.sourceVariableDecl() : target;
		return this;
	}
	
	public boolean Variable.isSubstituted() { return false; }
	public boolean FieldDeclarationSubstituted.isSubstituted() { return true; }
	public boolean ParameterDeclarationSubstituted.isSubstituted() { return true; }
	public boolean VariableArityParameterDeclarationSubstituted.isSubstituted() { return true; }
	
	public boolean VarAccess.isLocked() { return targetVariable != null; }
	
	// eliminating locked variable accesses
	inh TypeDecl VarAccess.enclosingType();
	public Access VarAccess.eliminateLockedNames() { return targetVariable == null ? this : unlock(null); }
	public Access VarAccess.unlock(Expr qual) {
		Variable target = targetVariable;
		targetVariable = null;
		flushCache();
		if(fromSource())
			setID(target.name());
		if(decl().sameSourceDeclAs(target)) {
			return qual == null ? this : qual.qualifiesAccess(this);
		} else if(fromSource() && !(target instanceof LocalVariable)) {
			VariableAccessInfo acc = accessVariable(target);
			if(acc == null && (qual == null || qual.isPure())) {
				if(target.isStatic()) {
					TypeDecl host = target.hostType();
					if(host.accessibleFrom(hostType()) && mayAccess((FieldDeclaration)target))
						return host.createLockedAccess().qualifiesAccess(this);
				}
				throw new RefactoringException("cannot access variable "+target.name());
			}
			return acc.eliminate(qual, enclosingType());
		} else {
			throw new RefactoringException("cannot access variable "+target.name());
		}
	}
	
	// eliminating locked variable accesses
	public Access VariableAccessInfo.eliminate(Expr qualifier, TypeDecl enclosing) {
		FieldDeclaration target = (FieldDeclaration)getVariable();
		if(target.isStatic()) {
			return target.hostType().createLockedAccess().qualifiesAccess(new VarAccess(target.name()));
		} else {
			if(isDirectlyVisible()) {
				if(qualifier != null)
					return qualifier.qualifiesAccess(new VarAccess(target.name()));
				return new VarAccess(target.name());
			} else {
				TypeDecl source = getSource(), bend = getBend();
				VarAccess va = new VarAccess(target.name());
				if(qualifier == null) {
					if(source.sameSourceDeclAs(bend)) {
						if(bend.equals(enclosing)) {                                             // this.f
							return new ThisAccess("this").qualifiesAccess(va);
						} else {                                                                       // B.this.f
							return bend.createLockedAccess().qualifiesAccess(
									new ThisAccess("this").qualifiesAccess(va));
						}
					} else if(bend.isClassDecl() && source.equals(((ClassDecl)bend).superclass())) {
						if(bend.equals(enclosing)) {                                             // super.f
							return new SuperAccess("super").qualifiesAccess(va);
						} else {
							return bend.createLockedAccess().qualifiesAccess(                               // B.super.f
									new SuperAccess("super").qualifiesAccess(va));
						}
					} else {
						if(bend.equals(enclosing)) {
							return new ParExpr(new CastExpr(source.createLockedAccess(),                    // ((S)this).f 
									new ThisAccess("this"))).qualifiesAccess(va);
						} else {
							return new ParExpr(new CastExpr(source.createLockedAccess(),                    // ((S)B.this).f
									bend.createLockedAccess().qualifiesAccess(
											new ThisAccess("this")))).qualifiesAccess(va);
						}
					}
				} else {
					if(!bend.equals(qualifier.type()))
						throw new RefactoringException("cannot access variable");
					if(source.equals(qualifier.type()))
						return qualifier.qualifiesAccess(va);
					return new ParExpr(new CastExpr(source.createLockedAccess(), qualifier)).qualifiesAccess(va);
				}
			}
		}
	}
	
	// a locked this access remembers which enclosing instance it is supposed to refer to;
	// a super access remembers the enclosing instance whose super class it is supposed to refer to
	private TypeDecl ThisAccess.targetType = null;
	private TypeDecl SuperAccess.targetType = null;
	
	public boolean ThisAccess.isLocked() { return targetType != null; }
	public boolean SuperAccess.isLocked() { return targetType != null; }
	
	refine Glue eq ThisAccess.decl() = targetType == null ? refined() : targetType;
	refine Glue eq SuperAccess.decl() = targetType == null ? refined() : targetType;
	
	public ThisAccess ThisAccess.lock() { return targetType == null ? lock(decl()) : this; }
	public ThisAccess ThisAccess.lock(TypeDecl target) { targetType = target; return this; }
	public SuperAccess SuperAccess.lock() { return targetType == null ? lock(decl()) : this; }
	public SuperAccess SuperAccess.lock(TypeDecl target) { targetType = target; return this; }
	
	refine PrettyPrint public void ThisAccess.toString(StringBuffer s) {
		if(targetType == null)
			refined(s);
		else
			s.append("[[this]]");
	}
	refine PrettyPrint public void SuperAccess.toString(StringBuffer s) {
		if(targetType == null)
			refined(s);
		else
			s.append("[[super]]");
	}

	public Access ThisAccess.eliminateLockedNames() { return targetType == null ? this : unlock(null); }
	public Access ThisAccess.unlock(Expr qual) {
		TypeDecl target = targetType;
		targetType = null;
		flushCaches();
		if(decl().instanceOf(target))
			return qual == null ? this : qual.qualifiesAccess(this);
		if(!fromSource())
			throw new RefactoringException("cannot adjust this access");
		if(!thisType().isInnerTypeOf(target))
			throw new RefactoringException("enclosing instance not reachable");
		assert qual == null || qual.isPure();
		return target.createLockedAccess().qualifiesAccess(new ThisAccess("this"));
	}
	public Access SuperAccess.eliminateLockedNames() { return targetType == null ? this : unlock(null); }
	public Access SuperAccess.unlock(Expr qual) {
		TypeDecl target = targetType;
		targetType = null;
		flushCaches();
		if(decl().instanceOf(target))
			return qual == null ? this : qual.qualifiesAccess(this);
		if(!fromSource())
			throw new RefactoringException("cannot adjust this access");
		if(!thisType().isInnerTypeOf(target))
			throw new RefactoringException("super instance not reachable");
		assert qual == null || qual.isPure();
		return target.createLockedAccess().qualifiesAccess(new SuperAccess("super"));
	}
}