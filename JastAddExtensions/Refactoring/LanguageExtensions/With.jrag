aspect With {
	public WithStmt.WithStmt(Access acc, Block block) {
		this(new List<Access>().add(acc), block);
	}
	
	// pretty printing
	public void WithStmt.toString(StringBuffer s) {
		s.append(indent());
		s.append("with(");
		for(int i=0;i<getNumQualifier();++i) {
			if(i!=0)
				s.append(", ");
			getQualifier(i).toString(s);
		}
		s.append(") ");
		getStmt().toString(s);
	}
	
	// naming
	eq WithStmt.getStmt().inStaticContext() = getNumQualifier() == 0;
	
	eq WithStmt.getStmt().hostType() = getQualifier(getNumQualifier()-1).type();
	eq WithStmt.getStmt().thisType() = getQualifier(getNumQualifier()-1).type();
	
	eq WithStmt.getStmt().lookupVariable(String name) {
		for(int i=getNumQualifier()-1;i>=0;--i) {
			TypeDecl td = getQualifier(i).type();
			SimpleSet c = td.memberFields(name);
			if(td.inStaticContext() || td.isStatic())
				c = removeInstanceVariables(c);
			if(!c.isEmpty())
				return c;
		}
		return removeFields(lookupVariable(name));
	}
	
	public SimpleSet ASTNode.removeFields(SimpleSet s) {
		SimpleSet res = SimpleSet.emptySet;
		for(Iterator iter=s.iterator();iter.hasNext();) {
			Variable v = (Variable)iter.next();
			if(!v.isInstanceVariable() && !v.isClassVariable())
				res = res.add(v);
		}
		return res;
	}

	// TODO: accessVariable, accessMethod
	
	eq WithStmt.getStmt().lookupMethod(String name) {
		for(int i=getNumQualifier()-1;i>=0;--i) {
			TypeDecl td = getQualifier(i).type();
			Collection c = td.memberMethods(name);
			if(!c.isEmpty())
				return c;
		}
		return Collections.EMPTY_LIST;
	}
	
	eq WithStmt.getStmt().lookupType(String name) {
		for(int i=getNumQualifier()-1;i>=0;--i) {
			SimpleSet c = getQualifier(i).qualifiedLookupType(name);
			if(!c.isEmpty())
				return c;
		}
		// TODO: filter out non-static ones?
		return lookupType(name);
	}
	
	// control flow
	eq WithStmt.succ() = 
		getNumQualifier() == 0 ? singleNode(getStmt()) : singleNode(getQualifier(0).first());
	eq WithStmt.getQualifier(int i).following() = 
		i+1 < getNumQualifier() ? singleNode(getQualifier(i+1).first()) : singleNode(getStmt()); 
	eq WithStmt.getStmt().following() = following();
	
	// eliminating with statements
	public static LanguageExtension ASTNode.WITH_STMT = new LanguageExtension("with statement") {
		public ASTNode eliminateOn(ASTNode n) {
			return n.eliminateWith();
		}
	};
	
	public ASTNode ASTNode.eliminateWith() { return this; }
	
	public Block Block.eliminateWith() {
		for(int i=0;i<getNumStmt();++i) {
			Stmt s = getStmt(i);
			if(s instanceof WithStmt) {
				Stmt s2 = ((WithStmt)s).eliminateWith();
				setStmt(s2, i);
				if(s2 instanceof Block)
					((Block)s2).inline();
			}
		}
		return this;
	}
	
	public Stmt WithStmt.eliminateWith() {
		getStmt().eliminateWith(getQualifiers(), hostType());
		return getStmt();
	}
	
	public void ASTNode.eliminateWith(List<Access> qualifiers, TypeDecl hostType) {
		for(int i=0;i<getNumChild();++i)
			getChild(i).eliminateWith(qualifiers, hostType);
	}
	
	public void TypeDecl.eliminateWith(List<Access> qualifiers, TypeDecl hostType) {
		qualifiers.add(this.createLockedAccess().qualifiesAccess(new ThisAccess("this")));
		super.eliminateWith(qualifiers, hostType);
		qualifiers.removeChild(qualifiers.getNumChild()-1);
	}
	
	public void Expr.eliminateWith(List<Access> qualifiers, TypeDecl hostType) {
		if(isThisAccess()) {
			for(int i=qualifiers.getNumChild()-1;i>=0;--i) {
				Access qual = qualifiers.getChild(i);
				TypeDecl qual_type = qual.type().isParameterizedType() ? ((ParTypeDecl)qual.type()).genericDecl() : qual.type();
				if(this.type().equals(qual_type)) {
					if(!qual.isThisAccess())
						replaceWith(qual.fullCopy());
					return;
				}
			}
			throw new RefactoringException("cannot eliminate this");
		} else if(isSuperAccess()) {
			for(int i=qualifiers.getNumChild()-1;i>=0;--i) {
				Access qual = qualifiers.getChild(i);
				TypeDecl qual_type = qual.type().isParameterizedType() ? ((ParTypeDecl)qual.type()).genericDecl() : qual.type();
				if(!qual_type.isClassDecl() || !((ClassDecl)qual_type).hasSuperclass())
					continue;
				ClassDecl cd = (ClassDecl)qual_type;
				if(this.type().equals(cd.superclass())) {
					if(!qual.isThisAccess()) {
						if(((Access)this).qualifiesMethodAccess())
							throw new RefactoringException("cannot eliminate with on super method calls");
						replaceWith(new ParExpr(new CastExpr(cd.superclass().createLockedAccess(),
								                             (Expr)qual.fullCopy())));
					}
					return;
				}
			}
			throw new RefactoringException("cannot eliminate super");
		} else {
			super.eliminateWith(qualifiers, hostType);
		}
	}
	
	public void AbstractDot.eliminateWith(List<Access> qualifiers, TypeDecl hostType) {
		rotateLeft();
		if(isThisAccess() || isSuperAccess()) {
			super.eliminateWith(qualifiers, hostType);
		} else {
			getRight().eliminateWith(qualifiers, hostType);
			getLeft().eliminateWith(qualifiers, hostType);
		}
	}
	
	public void MethodAccess.eliminateWith(List<Access> qualifiers, TypeDecl hostType) {
		if(isQualified()) {
			super.eliminateWith(qualifiers, hostType);
		} else {
			for(int i=qualifiers.getNumChild()-1;i>=0;i--) {
				Access qual = qualifiers.getChild(i);
				if(qual.type().memberMethods(name()).contains(decl())) {
					if(!decl().accessibleFrom(hostType))
						throw new RefactoringException("method not accessible");
					qualifyWith((Expr)qual.fullCopy());
					flushCaches();
					super.eliminateWith(qualifiers, hostType);
					return;
				}
			}
			throw new RefactoringException("cannot eliminate with");
		}
	}
	
	public void ClassInstanceExpr.eliminateWith(List<Access> qualifiers, TypeDecl hostType) {
		TypeDecl td = getAccess().type();
		if(!isQualified() && td.isMemberType() && !td.isStatic()) {
			for(int i=qualifiers.getNumChild()-1;i>=0;i--) {
				Access qual = qualifiers.getChild(i);
				TypeDecl qual_type = qual.type().isParameterizedType() ? ((ParTypeDecl)qual.type()).genericDecl() : qual.type();
				if(qual_type.subtype(td.enclosingType())) {
					if(!getAccess().type().accessibleFrom(hostType))
						throw new RefactoringException("type not accessible");
					qualifyWith((Expr)qual.fullCopy());
					flushCaches();
					super.eliminateWith(qualifiers, hostType);
					return;
				}
			}
			throw new RefactoringException("cannot eliminate with");
		}
		super.eliminateWith(qualifiers, hostType);
	}
	
	public void VarAccess.eliminateWith(List<Access> qualifiers, TypeDecl hostType) {
		enclosingBodyDecl().flushCaches();
		if(!isQualified() && decl() instanceof FieldDeclaration && !decl().isStatic()) {
			for(int i=qualifiers.getNumChild()-1;i>=0;i--) {
				Access qual = qualifiers.getChild(i);
				if(qual.type().memberFields(name()).contains(decl())) {
					if(!((FieldDeclaration)decl()).accessibleFrom(hostType))
						throw new RefactoringException("field not accessible");
					qualifyWith((Expr)qual.fullCopy());
					flushCaches();
					super.eliminateWith(qualifiers, hostType);
					return;
				}
			}
			throw new RefactoringException("cannot eliminate with");
		}
		super.eliminateWith(qualifiers, hostType);
	}
	
	syn lazy boolean Access.qualifiesMethodAccess() = hasParentDot() && parentDot().isMethodAccess(); 
}