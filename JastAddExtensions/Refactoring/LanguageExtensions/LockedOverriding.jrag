aspect LockedOverriding {
	public void ASTNode.lockOverridingDependencies(String... names) {
		lockOverridingDependencies(Arrays.asList(names));
	}
	public void ASTNode.lockOverridingDependencies(Collection<String> names) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null)
				child.lockOverridingDependencies(names);
		}
	}
	
	private HashSet<SavedMethodDecl> MethodDecl.lockedOverridingDependencies = null;
	public void MethodDecl.lockOverridingDependencies(Collection<String> names) {
		if(names.contains(name())) {
			HashSet<SavedMethodDecl> deps = new HashSet<SavedMethodDecl>();
			for(MethodDecl md : overriddenMethods())
				deps.add(md.save());
			this.lockedOverridingDependencies = deps;
		}
	}
	
	refine Overriding eq MethodDecl.overriddenMethods() {
		if(lockedOverridingDependencies == null) {
			return refined();
		} else {
			HashSet<MethodDecl> res = new HashSet<MethodDecl>();
			for(SavedMethodDecl md : lockedOverridingDependencies)
				res.add(md.getDecl());
			return res;
		}
	}
	
	refine LookupMethod eq MethodDecl.overrides(MethodDecl m) {
		if(lockedOverridingDependencies == null) {
			return refined(m);
		} else {
			return overriddenMethods().contains(m);
		}
	}
	
	public void MethodDecl.clearOverridingDependencies() {
		lockedOverridingDependencies = null;
	}
	
	public static LanguageExtension ASTNode.LOCKED_OVERRIDING = new LanguageExtension("locked overriding") {
		public void eliminateOn(ASTNode n) {
			n.unlockOverriding();
			n.flushCaches();
		}
	};
	
	public void ASTNode.unlockOverriding() {
		for(int i=0;i<getNumChild();++i) {
			ASTNode ch = getChild(i);
			if(ch != null)
				ch.unlockOverriding();
		}
	}
	public void MethodDecl.unlockOverriding() {
		if(lockedOverridingDependencies != null) {
			HashSet<MethodDecl> old_overridden = overriddenMethods();
			lockedOverridingDependencies = null;
			this.flushCaches();
			if(!old_overridden.equals(overriddenMethods()))
				throw new RefactoringException("overriding has changed");
		}
		super.unlockOverriding();
	}
}