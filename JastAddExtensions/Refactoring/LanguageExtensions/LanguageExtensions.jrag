aspect LanguageExtensions {
	class LanguageExtension {
		private static int NEXT_LANG_EXT = 0;
		private int index;
		private String name;
		
		public LanguageExtension(String name) { 
			if(NEXT_LANG_EXT > 30)
				throw new IllegalStateException("too many language extensions");
			this.index = 1<<NEXT_LANG_EXT++;
			this.name = name;
		}
		
		public int getIndex() {
			return index;
		}
		
		public String toString() {
			return name;
		}
	}

	public boolean ASTNode.hasExtension(LanguageExtension le) {
		return (state().rewritePhase & le.getIndex()) == 0;
	}
	
	public void ASTNode.introduce(LanguageExtension... les) {
		int phase = state().rewritePhase;
		for(LanguageExtension le : les)
			phase &= ~le.getIndex();
		programRoot().applyRewrites(phase);
	}
	
	public void ASTNode.eliminate(LanguageExtension... les) {
		for(LanguageExtension le : les)
			eliminate(le);
	}
	
	public void ASTNode.eliminate(LanguageExtension le) {
		int phase = state().rewritePhase;
		phase |= le.getIndex();
		programRoot().applyRewrites(phase);
	}
	
	public void Program.applyRewrites(int stage) {
		flushCaches();
		enterRewritePhase(stage);
		is$Final(stage);
		for(CompilationUnit cu : getCompilationUnits())
			cu.triggerRewrites();
	}
	
	public void ASTNode.triggerRewrites() {
		for(int i=0;i<getNumChild();++i)
			getChild(i).triggerRewrites();
	}
}