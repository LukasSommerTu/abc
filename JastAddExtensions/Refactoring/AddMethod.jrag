aspect AddMethod {
	
	inh Collection ASTNode.lookupMethod(String name);

	public void TypeDecl.addMethod(MethodDecl md, boolean mayOverride, 
								   boolean mayBeOverridden, boolean mayBeCaptured) 
								   throws RefactoringException {
		addMethod(getNumBodyDecl(), md, mayOverride, mayBeOverridden, mayBeCaptured);
	}
	
	public void TypeDecl.addMethod(int index, MethodDecl md, 
				boolean mayOverride, boolean mayBeOverridden, boolean mayBeCaptured) 
			throws RefactoringException {
		throw new RefactoringException("cannot add method");
	}

	// add method md to class; the flags specify whether the added method may
	// override an existing method, be overridden by an existing method, and possibly
	// be referenced by some method access in the program
	public void ClassDecl.addMethod(int index, MethodDecl md, 
				boolean mayOverride, boolean mayBeOverridden, boolean mayBeCaptured) 
			throws RefactoringException {
        AdjustmentTable table = new AdjustmentTable();
        // collect all uses of methods of the same name
        for(Iterator i=unqualifiedLookupMethod(md.getID()).iterator();i.hasNext();) {
            MethodDecl m = (MethodDecl)i.next();
            for(Iterator j=m.uses().iterator();j.hasNext();) {
                MethodAccess acc = (MethodAccess)j.next();
                table.add(acc);
            }
        }
        getBodyDeclList().insertChild(md, index);
        programRoot().flushCaches();
        if(localMethodsSignature(md.signature()).size() > 1)
            throw new RefactoringException("a method of signature "+md.signature()+" already exists");
		if(!mayBeCaptured && !md.uses().isEmpty())
			throw new RefactoringException("new method "+md.getID()+" could be captured");
		SimpleSet overrides = md.overrides();
		if(mayOverride) {
			for(Iterator i=overrides.iterator();i.hasNext();) {
				MethodDecl md2 = (MethodDecl)i.next();
				if(!md.canOverrideOrHide(md2))
					throw new RefactoringException("new method "+md.getID()+
							" cannot override method in "+md2.hostType().typeName());
			}
		} else if(!overrides.isEmpty()) {
			throw new RefactoringException("new method "+md.getID()+" overrides other method");
		}
		HashSet overriders = md.overriders();
		if(mayBeOverridden) {
			for(Iterator i=overriders.iterator();i.hasNext();) {
				MethodDecl md2 = (MethodDecl)i.next();
				if(!md2.canOverrideOrHide(md))
					throw new RefactoringException("new method "+md.getID()+
							" cannot be overriden by method in "+md2.hostType().typeName());
			}
		} else if(!overriders.isEmpty()) {
			throw new RefactoringException("new method "+md.getID()+" is overridden");
		}
        // make sure that uses of methods of the same name can be adjusted
        table.adjust();
	}

}