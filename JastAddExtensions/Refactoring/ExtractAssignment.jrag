aspect ExtractAssignment {
	
	// extract an expression as an assignment to a variable
	public VariableDeclaration Expr.extractAssignment(VariableDeclaration v) throws RefactoringException {
		return new ExtractAssignmentRefactoring(this, v).execute();
	}
	
	class ExtractAssignmentRefactoring {
		private Expr expr;
		private Stmt stmt;
		private int index;
		private Block block;
		private VariableDeclaration var;
		
		public ExtractAssignmentRefactoring(Expr expr, VariableDeclaration var) throws RefactoringException {
			this.expr = expr;
			this.stmt = expr.enclosingStmt();
			if(!(stmt.getParent().getParent() instanceof Block))
				throw new RefactoringException("can only extract assignment into block");
			this.block = (Block)stmt.getParent().getParent();
			this.index = block.getIndexOfStmt(stmt);
			this.var = var;
		}
		
		public VariableDeclaration execute() throws RefactoringException {
			AdjustmentTable table = new AdjustmentTable(block.programRoot());
			expr.lockAllDFlow(table);
			expr.replaceWith(var.createLockedVarAccess(table));
			block.insertStmt(index, AssignExpr.asStmt(var.createLockedVarAccess(table), expr));
			block.programRoot().flushCaches();
			table.adjust();
			// TODO: need to check that the new assignment has precisely one dataflow successor, namely
			//       the newly created reference to var
			return var;
		}
	}
	
}