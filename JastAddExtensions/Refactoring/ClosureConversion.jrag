aspect ClosureConversion {
	public ClosureInvocation ClosureInvocation.convert() throws RefactoringException {
		AdjustmentTable table = new AdjustmentTable();
		for(LocalDeclaration decl : getBlock().collectCapturedLocalVars(this))
			introduceParameter(decl, table, liveAtEntry(decl), liveAtExit(decl) && mayDef((Variable)decl));
		flushCaches();
		for(LocalDeclaration decl : getBlock().collectCapturedLocalVars(this))
			introduceLocalVariable(decl, table);
		flushCaches();
		table.adjust();
		return this;
	}
	
	public boolean ClosureInvocation.liveAtEntry(LocalDeclaration decl) {
		return getBlock().live(decl);
	}
	
	public boolean ClosureInvocation.liveAtExit(LocalDeclaration decl) {
		return this.live(decl);
	}
	
	private boolean ClosureInvocation.declaredOutside(VarAccess v) {
		return !((ASTNode)v.decl()).beneath(this);
	}

	public ParameterDeclaration ClosureInvocation.introduceParameter(LocalDeclaration decl, AdjustmentTable table, boolean isIn, boolean isOut) 
			throws RefactoringException {
		if(!isIn && !isOut)
			return null;
		List<Modifier> modlist = new List<Modifier>();
		if(decl.isFinal())
			modlist.add(new Modifier("final"));
		if(isOut)
			modlist.add(new Modifier(isIn ? "ref" : "out"));
		Modifiers modifiers = new Modifiers(modlist);
		ParameterDeclaration 
		  pd = new ParameterDeclaration(modifiers, decl.type().getLockedAccess(table), decl.name());
		addParameter(pd);
		addArg(new VarAccess(decl.name()));
		return pd;
	}
	
	private VariableDeclaration ClosureInvocation.introduceLocalVariable(LocalDeclaration decl, AdjustmentTable table) throws RefactoringException {
		VariableDeclaration vd = new VariableDeclaration(decl.type().getLockedAccess(table), decl.name());
		getBlock().insertStmt(0, vd);
		return vd;
	}

	public boolean ASTNode.beneath(ASTNode n) {
		ASTNode p;
		for(p=this;p!=n&&p!=null;p=p.getParent())
			;
		return p!=null;
	}

	// determine all local declarations referred to in this subtree, which are defined outside root
	public java.util.Set<LocalDeclaration> ASTNode.collectCapturedLocalVars(ASTNode root) {
		java.util.Set<LocalDeclaration> res = new HashSet<LocalDeclaration>();
		collectCapturedLocalVars(res, root);
		return res;
	}

	public void ASTNode.collectCapturedLocalVars(java.util.Set<LocalDeclaration> res, ASTNode root) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null)
				child.collectCapturedLocalVars(res, root);
		}
	}
	
	public void VarAccess.collectCapturedLocalVars(java.util.Set<LocalDeclaration> res, ASTNode root) {
		if(decl() instanceof LocalDeclaration && !((ASTNode)decl()).beneath(root))
			res.add((LocalDeclaration)decl());
		super.collectCapturedLocalVars(res, root);
	}
}