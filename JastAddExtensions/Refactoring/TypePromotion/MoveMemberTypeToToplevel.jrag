// move a member class to toplevel
aspect MoveMemberTypeToToplevel {
	public void MemberTypeDecl.moveToToplevel() {
		Program root = programRoot();
		TypeDecl td = typeDecl();
		root.lockNames(td.name());
		td.lockAllNames();
		if(!td.isStatic()) {
			LinkedList<FieldDeclaration> encls = td.addEnclosingInstanceFields(hostType(), 1);
			td.adjustMemberMethods(encls);
		}
		td.removeNonToplevelModifiers();
		compilationUnit().addTypeDecl(td);
		getParent().removeChild(getChildIndex());
		root.eliminate(WITH_STMT, LOCKED_NAMES);
	}
	
	public void TypeDecl.removeNonToplevelModifiers() {
		Modifiers new_mods = new Modifiers();
		for(Modifier mod : getModifiers().getModifiers()) {
			String id = mod.getID();
			if(id.equals("public") || id.equals("abstract") || id.equals("final"))
				new_mods.addModifier(mod);
		}
		setModifiers(new_mods);
	}

	public LinkedList<FieldDeclaration> TypeDecl.addEnclosingInstanceFields(TypeDecl encl, int i) {
		if(encl == null)
			return new LinkedList<FieldDeclaration>();
		LinkedList<FieldDeclaration> encls = addEnclosingInstanceFields(encl.enclosingType(), i+1);
		FieldDeclaration fd = new FieldDeclaration(new Modifiers("private", "final"), encl.createLockedAccess(), "this$"+i);
		addBodyDecl(fd);
		encls.add(fd);
		for(ConstructorDecl cd : (Collection<ConstructorDecl>)constructors()) {
			ParameterDeclaration pd = new ParameterDeclaration(encl.createLockedAccess(), "this$"+i); 
			cd.insertParameter(pd, 0);
			ConstructorAccess cacc = (ConstructorAccess)((ExprStmt)cd.getConstructorInvocation()).getExpr();
			if(cacc instanceof SuperConstructorAccess) {
				cd.getBlock().insertStmt(0, AssignExpr.asStmt(fd.createLockedAccess(), pd.createLockedAccess()));
			} else {
				cacc.insertArg(pd.createLockedAccess(), 0);
			}
			for(Access acc : cd.uses()) {
				boolean q = acc.isQualified();
				if(acc instanceof SuperConstructorAccess) {
					if(q)
						acc.bundleQualifier();
					Expr enclq = acc.enclosingInstanceQualifier(encl);
					if(enclq == null)
						throw new RefactoringException("no enclosing instance qualifier");
					((SuperConstructorAccess)acc).insertArg(enclq, 0);
					if(q)
						acc.getParent().replaceWith(acc);
				} else if(acc instanceof ClassInstanceExpr) {
					if(q)
						acc.bundleQualifier();
					Expr enclq = acc.enclosingInstanceQualifier(encl);
					if(enclq == null)
						throw new RefactoringException("no enclosing instance qualifier");
					((ClassInstanceExpr)acc).insertArg(enclq, 0);
					if(q)
						acc.getParent().replaceWith(acc);
				}
			}
		}
		return encls;
	}
	
	public void TypeDecl.adjustMemberMethods(LinkedList<FieldDeclaration> encls) {
		for(BodyDecl bd : getBodyDecls()) {
			if(bd instanceof MethodDecl) {
				MethodDecl md = (MethodDecl)bd;
				if(md.isStatic() || !md.hasBlock())
					continue;
				List<Access> withargs = new List<Access>();
				for(FieldDeclaration encl : encls)
					withargs.add(encl.createLockedAccess());
				md.setBlock(new Block(new WithStmt(withargs, md.getBlock())));
			}
		}
	}
	
	syn Expr Access.enclosingInstanceQualifier(TypeDecl td) = hostType().enclosingInstanceQualifier(td, true);
	eq ClassInstanceExpr.enclosingInstanceQualifier(TypeDecl td) {
		if(isQualified())
			return qualifier().type().instanceOf(td) ? parentDot().getLeft() : null;
		return super.enclosingInstanceQualifier(td);
	}
	eq SuperConstructorAccess.enclosingInstanceQualifier(TypeDecl td) {
		if(isQualified())
			return qualifier().type().instanceOf(td) ? parentDot().getLeft() : null;
		return super.enclosingInstanceQualifier(td);
	}
	public Expr TypeDecl.enclosingInstanceQualifier(TypeDecl td, boolean innermost) {
		if(this == td) {
			if(innermost)
				return new ThisAccess("this");
			else
				return createLockedAccess().qualifiesAccess(new ThisAccess("this"));
		} else {
			return enclosingType() == null ? null : enclosingType().enclosingInstanceQualifier(td, false);
		}
	}
	
	public void ConstructorAccess.insertArg(Expr arg, int i) {
		getArgList().insertChild(arg, i);
	}
	
	public void ClassInstanceExpr.insertArg(Expr arg, int i) {
		getArgList().insertChild(arg, i);
	}
}