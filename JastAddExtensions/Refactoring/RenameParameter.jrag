import java.util.*;

/*
 * The Rename Parameter refactoring; basic steps are as with Rename Field.
 */

aspect RenameParameter {
	
	// checks that the renaming doesn't lead to a name clash
	inh RefactoringException ParameterDeclaration.canRenameTo(String new_name);
	
	eq Methodoid.getParameter().canRenameTo(String new_name) {
		if(!parameterDeclaration(new_name).isEmpty())
			return new RefactoringException("parameter of the same name exists");
		if(this.hasBody())
			return getBlock().acceptLocal(new_name);
		return null;
	}
	
	eq CatchClause.getParameter().canRenameTo(String new_name) {
		return hostBodyDecl().acceptLocal(new_name);
	}
	
	public BodyDecl ASTNode.hostBodyDecl() {
		ASTNode p=null;
		for(p=this;!(p==null || p instanceof BodyDecl);p=p.getParent());
		return (BodyDecl)p;
	}
	
	public void ParameterDeclaration.rename(String new_name) throws RefactoringException {
		if(getID().equals(new_name))
			return;
		RefactoringException e = canRenameTo(new_name);
		if(e != null)
			throw e;
		AdjustmentTable table = findEndangeredVarAccesses(new_name);
		changeID(new_name);
		programRoot().flushCaches();
		table.adjust();
	}
	
	private AdjustmentTable ParameterDeclaration.findEndangeredVarAccesses(String new_name) {
		AdjustmentTable table = new AdjustmentTable();
		programRoot().findEndangeredVarAccesses(table, name(), new_name);
		return table;
	}
	
}
