aspect InlineClosureInvocation {
	
	public void ClosureInvocation.inline() throws RefactoringException {
		Program root = programRoot();
		if(getNumParameter() > 0)
			throw new RefactoringException("cannot inline this closure");
		if(getParent() instanceof ExprStmt) {
			boolean needLabel = false;
			String label = getBlock().pickFreshLabel("l");
			for(CFGNode node : returns()) {
				ReturnStmt ret = (ReturnStmt)node;
				if(ret.hasResult())
					throw new RefactoringException("cannot inline this closure");
				needLabel = true;
				ret.replaceWith(new BreakStmt(label));
			}
			getParent().replaceWith(needLabel ? new LabeledStmt(label, getBlock()) : getBlock());
			root.flushCaches();
		} else if(isExprClosure()) {
			replaceWith(getExpr());
			root.flushCaches();
		} else if(getParent() instanceof ReturnStmt) {
			getParent().replaceWith(getBlock());
			root.flushCaches();
		} else {
			throw new RefactoringException("cannot inline this closure");
		}
	}
	
	syn boolean ClosureInvocation.isExprClosure() 
	  = getBlock().getNumStmt() == 1 && getBlock().getStmt(0) instanceof ReturnStmt &&
	      ((ReturnStmt)getBlock().getStmt(0)).hasResult();
	
	syn Expr ClosureInvocation.getExpr() = ((ReturnStmt)getBlock().getStmt(0)).getResult(); 
	
	inh LabeledStmt Block.lookupLabel(String name);
	public String Block.pickFreshLabel(String base) {
		if(lookupLabel(base) == null && canIntroduceLabel(base))
			return base;
		for(int i=0;;++i) {
			String l = base + i;
			if(lookupLabel(l) == null && canIntroduceLabel(l))
				return l;
		}
	}
	
}