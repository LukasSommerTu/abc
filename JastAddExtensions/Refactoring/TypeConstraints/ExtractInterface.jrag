/*
 * The Extract Interface refactoring
 */
aspect ExtractInterface {
	public void ClassDecl.extractInterface(String pkg, String name, Collection<MethodDecl> methods) {
		if(!fromSource())
			throw new RefactoringException("cannot extract from non-source type");
		if(subtype(typeThrowable())) 
			throw new RefactoringException("cannot extract from throwable type");
		Program root = programRoot();
		List<BodyDecl> body = new List<BodyDecl>();
		Modifiers mods = (Modifiers)getModifiers().fullCopy();
		mods.removeNonToplevelModifiers();
		mods.removeModifier("abstract");
		mods.removeModifier("final");
		InterfaceDecl newInterface = new InterfaceDecl(mods, name, new List<Access>(), body);
		
		// TODO: determine path to put new compilation unit at
		String pathName = compilationUnit().pathName();
		String path = pathName.substring(0, pathName.lastIndexOf(File.separatorChar)+1);
		root.insertUnusedType(path, pkg == null ? packageName() : pkg, new List<ImportDecl>(), newInterface);
		addImplements(newInterface.createLockedAccess());
		for(MethodDecl md : methods) {
			if(md.hostType() != this)
				throw new RefactoringException("selected method is not a member of this type");
			if(md.isStatic())
				throw new RefactoringException("selected method is static");
			MethodDecl new_md = md.lockedCopyWithEmptyBody();
			new_md.getModifiers().removeModifier("synchronized");
			// for Eclipse compatibility
			new_md.getModifiers().addModifier("abstract");
			new_md.getModifiers().removeModifier("final");	
			body.add(new_md);
		}
		
		Collection<TypeConstraintVariable> updatable = computeUpdatableExprs(root.typeConstraints(this), this, newInterface);
		Collection<String> affectedMethods = new HashSet<String>();
		Collection<TypeDecl> affectedConstructors = new HashSet<TypeDecl>();
		
		findAffectedCallables(updatable, newInterface, affectedMethods, affectedConstructors);
		
		root.lockMethodNames(affectedMethods);
		root.lockConstructorCalls(affectedConstructors);
		root.lockOverridingDependencies(affectedMethods);
		
		for(TypeConstraintVariable tcv : updatable) {
			if(tcv instanceof Expr) {
				Expr e = (Expr)tcv;
				if(e.isTypeAccess())
					e.replaceWith(newInterface.createLockedAccess());
			}			
		}
	}
	
	public void ClassDecl.doExtractInterface(String pkg, String name, Collection<MethodDecl> methods) {
		Program root = programRoot();
		extractInterface(pkg, name, methods);
		root.eliminate(LOCKED_NAMES, LOCKED_OVERRIDING);
	}
}