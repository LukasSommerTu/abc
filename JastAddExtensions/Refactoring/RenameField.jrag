/*
 * The Rename Field refactoring. Like most name-based refactoring, it proceeds in
 * four steps:
 *   1. check preconditions (here: is there a field of the same name already?) 
 *   2. find uses of the field being renamed, and of everything that might be
 *      shadowed by the newly renamed field
 *   3. do the renaming
 *   4. adjust all uses collected in step 2
 */

aspect RenameField {

	public void FieldDeclaration.rename(String new_name) throws RefactoringException {
		if(getID().equals(new_name))
			// haha, very funny
			return;
		if(!isValidName(new_name))
			throw new RefactoringException("not a valid name: "+new_name);
		if(!hostType().localFields(new_name).isEmpty())
			throw new RefactoringException("couldn't rename: field name clash");
//TIME long time = System.currentTimeMillis();
		AdjustmentTable table = findEndangeredVarAccesses(new_name);
//TIME System.out.println("endangered accesses: "+table.size());
//TIME System.out.println("time to find: "+(System.currentTimeMillis()-time));
		changeID(new_name);
		programRoot().flushCaches();
//TIME time = System.currentTimeMillis();
		table.adjust();
//TIME System.out.println("adjustment: "+(System.currentTimeMillis()-time));
	}

	private AdjustmentTable FieldDeclaration.findEndangeredVarAccesses(String new_name) {
		AdjustmentTable table = new AdjustmentTable();
		programRoot().findEndangeredVarAccesses(table, name(), new_name);
		return table;
	}
	
	protected void ASTNode.findEndangeredVarAccesses(AdjustmentTable tbl, 
													String oldname, String newname) {
		for(int i=0;i<getNumChild();++i)
			getChild(i).findEndangeredVarAccesses(tbl, oldname, newname);
	}
		
	protected void VarAccess.findEndangeredVarAccesses(AdjustmentTable tbl,
													String oldname, String newname) {
		String name = name();
		if(name.equals(oldname))
			tbl.addFront(this);
		else if(name.equals(newname))
			tbl.add(this);
	}
	
	protected void BoundFieldAccess.findEndangeredVarAccesses(AdjustmentTable tbl,
													String oldname, String newname) {
		// nothing to be done here
	}

	protected void TypeAccess.findEndangeredVarAccesses(AdjustmentTable table, 
													String oldname, String newname) {
		String name = name();
		if(name.equals(oldname))
			table.addFront(this);
		else if(name.equals(newname))
			table.add(this);
		String pkg = getPackage();
		if(pkgNameStartsWith(pkg, oldname))
			table.addFront(this);
		else if(pkgNameStartsWith(pkg, newname))
			table.add(this);
	}

	protected void ArrayTypeAccess.findEndangeredVarAccesses(AdjustmentTable table, 
													String oldname, String newname) {
		for(int i=0;i<getNumChild();++i)
			getChild(i).findEndangeredVarAccesses(table, oldname, newname);
	}

	protected void BoundTypeAccess.findEndangeredVarAccesses(AdjustmentTable table,
													String oldname, String newname) {
		// nothing to be done here
	}

	protected void PackageAccess.findEndangeredVarAccesses(AdjustmentTable table,
													String oldname, String newname) {
		String pkg = name();
		if(pkgNameStartsWith(pkg, oldname))
			table.addFront(this);
		else if(pkgNameStartsWith(pkg, newname))
			table.add(this);
	}

}