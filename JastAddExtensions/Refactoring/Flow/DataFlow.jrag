aspect DataFlow {
	public void ASTNode.lockDataFlow() {
		for(int i=0;i<getNumChild();++i)
			getChild(i).lockDataFlow();
	}
	
	protected SmallSet<Definition> Access.lockedReachingDefs = null;
	protected SmallSet<Access> Access.lockedReachedUses = null;
	protected SmallSet<Definition> Access.lockedWriteDeps = null;
	
	public void Access.lockReachingDefsAndUses() {
		if(lockedReachingDefs == null)
			lockedReachingDefs = reachingDefinitions();
		if(lockedReachedUses == null)
			lockedReachedUses = reachedUses();
	}
	
	public void Access.lockWriteDeps() {
		if(lockedWriteDeps == null)
			lockedWriteDeps = writeDeps();
	}
	
	public void ArrayAccess.lockDataFlow() {
		lockReachingDefsAndUses();
		lockWriteDeps();
		super.lockDataFlow();
	}
	
	public void ClassInstanceExpr.lockDataFlow() {
		lockReachingDefsAndUses();
		lockWriteDeps();
		super.lockDataFlow();
	}
	
	public void ConstructorAccess.lockDataFlow() {
		lockReachingDefsAndUses();
		lockWriteDeps();
		super.lockDataFlow();
	}
	
	public void MethodAccess.lockDataFlow() {
		lockReachingDefsAndUses();
		lockWriteDeps();
		super.lockDataFlow();
	}
	
	public void VarAccess.lockDataFlow() {
		lockReachingDefsAndUses();
		if(decl().isField())
			lockWriteDeps();
		super.lockDataFlow();
	}
	
	public void ASTNode.unlockDataFlow() { }
	
	public void Access.unlockDataFlow() {
		if(hostType() != null)
			hostType().flushCollectionCache();
		if(lockedReachingDefs != null) {
			if(!reachingDefinitions().equals(lockedReachingDefs))
				throw new RefactoringException("couldn't preserve data flow");
			lockedReachingDefs = null;
		}
		if(lockedReachedUses != null) {
			if(!reachedUses().equals(lockedReachedUses))
				throw new RefactoringException("couldn't preserve data flow");
			lockedReachedUses = null;
		}
		if(lockedWriteDeps != null) {
			if(!writeDeps().equals(lockedWriteDeps))
				throw new RefactoringException("couldn't preserve data flow");
			lockedWriteDeps = null;
		}
	}
	
	public static LanguageExtension ASTNode.LOCKED_DATAFLOW = new LanguageExtension("locked data flow") {
		public ASTNode eliminateOn(ASTNode n) {
			n.unlockDataFlow();
			return n;
		}
	};
	
	// conservative approximation of data flow for method accesses
	Callable extends Location;
	
	eq MethodAccess.getLocation() = decl().isConstantMethod() ? null : decl();
	eq ConstructorAccess.getLocation() = decl();
	eq ClassInstanceExpr.getLocation() = isPure() ? null : decl();
	
	public boolean MethodDecl.isArrayElement() { return false; }
	public boolean ConstructorDecl.isArrayElement() { return false; }
	
	public boolean MethodDecl.isHeapLocation() { return true; }
	public boolean ConstructorDecl.isHeapLocation() { return true; }
	
	/* currently very crude: checks whether the method body is 'return c;' for a constant c */
	syn lazy boolean MethodDecl.isConstantMethod() {
		if(!isStatic() && !isPrivate() || !hasBlock())
			return false;
		Block body = getBlock();
		if(body.getNumStmt() != 1)
			return false;
		if(!(body.getStmt(0) instanceof ReturnStmt))
			return false;
		ReturnStmt ret = (ReturnStmt)body.getStmt(0);
		return !ret.hasResult() || ret.getResult().isConstant() || ret.getResult() instanceof NullLiteral;
	}
	
	refine Alias public boolean Variable.mayAlias(Location l) {
		return l instanceof Callable && this.isField() || refined(l);
	}
	
	refine Alias eq ArrayAccess.mayReferTo(Location l) = l instanceof Callable || refined(l);
	
	refine Alias eq MethodAccess.mayDefine(Location l) = !decl().isConstantMethod() && refined(l);
	
	// more precise analysis for fields of the receiver object (well-defined, since our analysis is always intra-procedural)
	class FieldInReceiver implements Location {
		private MethodDecl method;
		private FieldDeclaration field;
		
		public FieldInReceiver(MethodDecl method, FieldDeclaration field) {
			this.method = method;
			this.field = field;
		}
		
		public MethodDecl getMethod() {
			return method;
		}
		
		public FieldDeclaration getField() {
			return field;
		}
		
		public TypeDecl type() {
			return field.type();
		}
		
		public boolean isHeapLocation() {
			return true;
		}
		
		public boolean isArrayElement() {
			return false;
		}
		
		public boolean equals(Object o) {
			if(!(o instanceof FieldInReceiver))
				return false;
			FieldInReceiver that = (FieldInReceiver)o;
			return this.method.equals(that.method) && this.field.equals(that.field);
		}
	}
	
	refine Alias eq VarAccess.getLocation() {
		Variable decl = decl();
		BodyDecl host = hostBodyDecl();
		if(decl.isInstanceVariable() && host instanceof MethodDecl && 
				(!isQualified() || qualifier().isThisAccess() || qualifier().isSuperAccess()))
			return new FieldInReceiver((MethodDecl)host, (FieldDeclaration)decl);
		return decl;
	}
	
	refine Alias eq VarAccess.mayReferTo(Location l) {
		if(l instanceof FieldInReceiver) {
			FieldInReceiver fir = (FieldInReceiver)l;
			if(decl() == fir.getField())
				return true;
		}
		return refined(l);
	}
	
	refine Alias eq VarAccess.mustReferTo(Location l) {
		if(l instanceof FieldInReceiver) {
			FieldInReceiver fir = (FieldInReceiver)l;
			if(decl() == fir.getField() && hostBodyDecl() == fir.getMethod() &&
					(!isQualified() || qualifier().isThisAccess() || qualifier().isSuperAccess()))
				return true;
		} else if(l instanceof FieldDeclaration && ((FieldDeclaration)l).isStatic()) {
			return decl() == l;
		}
		return refined(l);
	}
}