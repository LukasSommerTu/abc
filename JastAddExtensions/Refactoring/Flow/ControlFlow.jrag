aspect ControlFlow {
	public void ASTNode.lockControlFlow() {
		for(int i=0;i<getNumChild();++i)
			getChild(i).lockControlFlow();
	}
	
	public void ASTNode.unlockControlFlow() {
		for(int i=0;i<getNumChild();++i)
			getChild(i).unlockControlFlow();
	}
	
	protected Collection<CFGNode> ASTNode.lockedSucc = null;
	protected Collection<CFGNode> ASTNode.lockedPred = null;
	
	public void CFGNode.lockControlFlow() {
		if(lockedSucc == null)
			lockedSucc = forward_cdep();
		if(lockedPred == null)
			lockedPred = backward_cdep();
	}
	
	public void CFGNode.unlockControlFlow() {
		if(lockedSucc != null) {
			if(!forward_cdep().equals(lockedSucc))
				throw new RefactoringException("couldn't preserve control flow");
			lockedSucc = null;
		}
		if(lockedPred != null) {
			if(!backward_cdep().equals(lockedPred))
				throw new RefactoringException("couldn't preserve control flow");
			lockedPred = null;
		}
	}
	
	syn lazy Collection<CFGNode> CFGNode.forward_cdep() {
		CFGNode p;
		for(p=this;p.succ().size() == 1;p=p.succ().iterator().next());
		Collection<CFGNode> dep = new HashSet<CFGNode>();
		for(CFGNode q : p.succ())
			dep.add(q);
		return dep;
	}
	
	syn lazy Collection<CFGNode> CFGNode.backward_cdep() {
		Collection<CFGNode> dep = new HashSet<CFGNode>();
		for(CFGNode p : pred())
			p.backward_cdep(dep);
		return dep;
	}
	
	public void CFGNode.backward_cdep(Collection<CFGNode> dep) {
		if(succ().size() > 1) {
			dep.add(this);
		} else {
			for(CFGNode p : pred())
				p.backward_cdep(dep);
		}
	}
}