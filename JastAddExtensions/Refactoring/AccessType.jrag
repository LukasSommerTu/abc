/*
 * The inherited attribute accessType(td) computes a SymbolicTypeAccess which
 * describes how to access type td from the current location in the AST. This
 * SymbolicTypeAccess can in turn be used to construct an actual access.
 * 
 * The implementation of accessType is mostly parallel to lookupType with
 * the same clauses and the same control flow, but with additional calls to
 * methods "moveInto" and "moveDownTo", which transport a symbolic access from a
 * parent type to a child type resp. an enclosing type to a nested type, adding
 * information about required qualifications in the process. For the implementation
 * of these methods see SymbolicTypeAccess.jrag
 */

aspect AccessType {
	
	inh NameType Access.nameType();

	// cf. attribute lookupType(String)
	inh SymbolicTypeAccess Expr.accessType(TypeDecl td);
	inh SymbolicTypeAccess Stmt.accessType(TypeDecl td);
	inh SymbolicTypeAccess BodyDecl.accessType(TypeDecl td);
	inh SymbolicTypeAccess TypeDecl.accessType(TypeDecl td);
	inh SymbolicTypeAccess CompilationUnit.accessType(TypeDecl td);
	inh SymbolicTypeAccess ImportDecl.accessType(TypeDecl td);

	eq Program.getChild().accessType(TypeDecl td) = accessType(td);

	// cf. attribute lookupType(String, String)
	syn lazy SymbolicTypeAccess Program.accessType(TypeDecl td) {
		addPrimitiveTypes();
		for(int i = 0; i < getNumCompilationUnit(); i++) {
			for(int j = 0; j < getCompilationUnit(i).getNumTypeDecl(); j++) {
				if(getCompilationUnit(i).getTypeDecl(j) == td)
					return new SymbolicTypeAccess(true, td);
			}
		}

		/* the following is probably unneccessary */
		CompilationUnit u = getCompilationUnit(td.fullName());
		if(u != null) {
			addCompilationUnit(u);
			getCompilationUnit(getNumCompilationUnit()-1);
			for(int j = 0; j < u.getNumTypeDecl(); j++) {
				if(u.getTypeDecl(j) == td) {
					return new SymbolicTypeAccess(true, td);
				}
			}
		}
		return null;
	}

	eq MethodAccess.getArg().accessType(TypeDecl td) = unqualifiedScope().accessType(td);
	eq ConstructorAccess.getArg().accessType(TypeDecl td) = unqualifiedScope().accessType(td);
	eq ArrayAccess.getExpr().accessType(TypeDecl td) = unqualifiedScope().accessType(td);
	eq ArrayTypeWithSizeAccess.getExpr().accessType(TypeDecl td) = unqualifiedScope().accessType(td);
	eq ClassInstanceExpr.getArg().accessType(TypeDecl td) = unqualifiedScope().accessType(td);

	eq CompilationUnit.getTypeDecl().accessType(TypeDecl td) {
		SymbolicTypeAccess acc = localAccessType(td);
		if(acc != null && td.accessibleFromPackage(packageName()))
			return acc;
		return null;
	}

	eq TypeDecl.getBodyDecl().accessType(TypeDecl td) = accessTypeFromInside(td);
	
	// encapsulate lookup inside a type declaration for use in other circumstances
	public SymbolicTypeAccess TypeDecl.accessTypeFromInside(TypeDecl td) {
		SymbolicTypeAccess acc = accessMemberType(td);
		if(acc != null) return acc;
		acc = accessType(td);
		if(acc == null) return acc;
		return acc.moveInto(this);
	}

	eq Block.getStmt(int index).accessType(TypeDecl td) {
	    for(int i = index; i >= 0 && !(getStmt(i) instanceof Case); i--) {
	      if(getStmt(i) instanceof LocalClassDeclStmt) {
	        TypeDecl t = ((LocalClassDeclStmt)getStmt(i)).getClassDecl();
	        if(td == t)
	        	return new SymbolicTypeAccess(td);
	      }
	    }
	    SymbolicTypeAccess acc = accessType(td);
	    if(acc == null) return acc;
	    return acc.moveInto(this, index);
	}
	
	eq ClassInstanceExpr.getAccess().accessType(TypeDecl td) {
		SymbolicTypeAccess acc = accessType(td);
		if(acc != null && isQualified())
			if(!(td.isInnerType() && td.isClassDecl()))
				return null;
		return acc;
	}

	eq ClassInstanceExpr.getTypeDecl().accessType(TypeDecl td) {
		SymbolicTypeAccess acc = localAccessType(td);
		if(acc != null) return acc;
		acc = accessType(td);
		if(acc != null) return acc.moveInto(this);
		acc = unqualifiedScope().accessType(td);
		if(acc == null) return acc;
		return acc.moveInto(this);
	}

	// cf. qualifiedLookupType(String)
	eq ParseName.qualifiedAccessType(TypeDecl td) = null;
	eq PackageOrTypeAccess.qualifiedAccessType(TypeDecl td) = null;
	eq AmbiguousAccess.qualifiedAccessType(TypeDecl td) = null;

	eq AbstractDot.getRight().accessType(TypeDecl td) =
		getLeft().qualifiedAccessType(td);
	
	syn SymbolicTypeAccess Expr.qualifiedAccessType(TypeDecl td) {
		if(typeAccessible(td))
			return type().accessMemberType(td);
		return null;
	}
	
	public boolean Expr.typeAccessible(TypeDecl td) {
		return hostType() != null && td.accessibleFrom(hostType()) 
			|| hostType() == null && td.accessibleFromPackage(hostPackage());
	}

	eq ClassInstanceExpr.qualifiedAccessType(TypeDecl td) {
		SymbolicTypeAccess acc = type().accessMemberType(td);
		if(acc != null && typeAccessible(td))
			return acc;
		if(type() == td)
			return new SymbolicTypeAccess(td).moveInto(this);
		return null;
	}

	eq PackageAccess.qualifiedAccessType(TypeDecl td) {
		if(td.isTopLevelType() && td.packageName().equals(packageName())) {
			if(nextAccess() instanceof ClassInstanceExpr &&
					td.accessibleFrom(hostType()))
				return new SymbolicTypeAccess(td);
			else if(typeAccessible(td))
				return new SymbolicTypeAccess(td);
		}
		return null;
	}
	
	// cf. localLookupType(String)
	syn lazy SymbolicTypeAccess ClassInstanceExpr.localAccessType(TypeDecl td) {
		if(hasTypeDecl() && getTypeDecl() == td)
			return new SymbolicTypeAccess(td);
		return null;
	}

	// cf. memberTypes(String)
	syn lazy SymbolicTypeAccess TypeDecl.accessMemberType(TypeDecl td) = null;
	eq ClassDecl.accessMemberType(TypeDecl td) {
		for(int i = 0; i < getNumBodyDecl(); i++) {
			if(getBodyDecl(i) instanceof MemberTypeDecl) {
				TypeDecl t = ((MemberTypeDecl)getBodyDecl(i)).typeDecl();
				if(t == td)
					return new SymbolicTypeAccess(this, false, td);
			}
		}
		for(Iterator outerIter = interfacesIterator(); outerIter.hasNext(); ) {
			TypeDecl type = (TypeDecl)outerIter.next();
			SymbolicTypeAccess acc = type.accessMemberType(td);
			if(acc != null && !td.isPrivate() && td.accessibleFrom(this))
				return acc.moveDownTo(this);
		}
		if(hasSuperclass()) {
			SymbolicTypeAccess acc = superclass().accessMemberType(td);
			if(acc != null && !td.isPrivate() && td.accessibleFrom(this))
				return acc.moveDownTo(this);
		}
		return null;
	}

	eq InterfaceDecl.accessMemberType(TypeDecl td) {
		for(int i = 0; i < getNumBodyDecl(); i++) {
			if(getBodyDecl(i) instanceof MemberTypeDecl) {
				TypeDecl t = ((MemberTypeDecl)getBodyDecl(i)).typeDecl();
				if(t == td)
					return new SymbolicTypeAccess(this, false, td);
			}
		}
		for(Iterator outerIter = superinterfacesIterator(); outerIter.hasNext(); ) {
			TypeDecl type = (TypeDecl)outerIter.next();
			SymbolicTypeAccess acc = type.accessMemberType(td);
			if(acc != null && !td.isPrivate() && td.accessibleFrom(this))
				return acc.moveDownTo(this);
		}
		return null;
	}

	// cf. localLookupType(String)
	syn lazy SymbolicTypeAccess CompilationUnit.localAccessType(TypeDecl td) {
	    for(int i = 0; i < getNumTypeDecl(); i++)
	    	if(getTypeDecl(i) == td)
	    		return new SymbolicTypeAccess(false, td);
	    SymbolicTypeAccess acc = null;
	    // The scope of a type imported by a single-type-import declaration
	    for(int i = 0; i < getNumImportDecl(); i++) {
	      if(!getImportDecl(i).isOnDemand()) {
	    	  acc = getImportDecl(i).accessImportedType(td);
	    	  if(acc != null) return acc;
	      }
	    }
		 
	    if(lookupType(packageName(), td.name()) == td)
	    	return new SymbolicTypeAccess(false, td);
		    
	    // The scope of a type imported by a type-import-on-demand declaration
	    for(int i = 0; i < getNumImportDecl(); i++) {
	      if(getImportDecl(i).isOnDemand())
	    	  acc = getImportDecl(i).accessImportedType(td);
	    	  if(acc != null) return acc;
	    }
	    
	    if(lookupType(PRIMITIVE_PACKAGE_NAME, td.name()) == td)
	    	return new SymbolicTypeAccess(td);
	    
	    if(lookupType("java.lang", td.name()) == td)
	    	return new SymbolicTypeAccess(false, td);
	    
	    if(lookupType(td.packageName(), td.name()) == td)
	    	return new SymbolicTypeAccess(true, td);

	    return null;
	}

	// cf. importedTypes(String)
	syn lazy SymbolicTypeAccess ImportDecl.accessImportedType(TypeDecl td) = null;
	
	eq SingleTypeImportDecl.accessImportedType(TypeDecl td) {
		if(getAccess().type() == td)
			return new SymbolicTypeAccess(false, td);
		return null;
	}
	
	eq TypeImportOnDemandDecl.accessImportedType(TypeDecl td) {
		if(getAccess() instanceof PackageAccess) {
			String packageName = ((PackageAccess)getAccess()).getPackage();
			if(packageName.equals(td.packageName()) &&
					td.accessibleFromPackage(packageName()))
				return new SymbolicTypeAccess(false, td);
		}
		else {
			TypeDecl outer = getAccess().type();
			SymbolicTypeAccess acc = outer.accessMemberType(td);
			if(acc != null && td.accessibleFromPackage(packageName()))
				return new SymbolicTypeAccess(outer, false, td);
		}
		return null;
	}
	
	public TypeDecl Block.localLookupType(String name, int index) {
		for(int i = index; i >= 0 && !(getStmt(i) instanceof Case); i--) {
			if(getStmt(i) instanceof LocalClassDeclStmt) {
				TypeDecl t = ((LocalClassDeclStmt)getStmt(i)).getClassDecl();
				if(t.name().equals(name))
					return t;
			}
		}
		return null;
	}
	
	// convenience methods to compute accesses at different nodes
	public Access TypeDecl.accessTypeFromInside(TypeDecl td, boolean ambiguous) {
		SymbolicTypeAccess acc = accessTypeFromInside(td);
		if(acc == null) return null;
		return acc.computeAccess(getMemberNamingContext(), ambiguous);
	}
	
	public Access ImportDecl.access(TypeDecl td, boolean ambiguous) {
		SymbolicTypeAccess acc = accessType(td);
		if(acc == null) return null;
		return acc.computeAccess(getNamingContext(), ambiguous);
	}
	
	public Access BodyDecl.access(TypeDecl td, boolean ambiguous) {
		SymbolicTypeAccess acc = accessType(td);
		if(acc == null) return null;
		return acc.computeAccess(getNamingContext(), ambiguous);
	}
	
	public Access Expr.access(TypeDecl td, boolean ambiguous) {
		SymbolicTypeAccess acc = accessType(td);
		if(acc == null) return null;
		return acc.computeAccess(getNamingContext(), ambiguous);
	}
	
	public Access Access.access(TypeDecl td, boolean ambiguous) {
		SymbolicTypeAccess acc = accessType(td);
		if(acc == null) return null;
		if(isQualified())
			return acc.computeQualifiedAccess(qualifier().type().getMemberNamingContext(),
										      ambiguous, getCompleteQualifier());
		else
			return acc.computeAccess(getNamingContext(), ambiguous);
	}
	
}