aspect AccessType {

	inh lazy Access ASTNode.accessType(TypeDecl td, boolean ambiguous);
	inh lazy Access CompilationUnit.accessType(TypeDecl td, boolean ambiguous);
	inh lazy Access TypeDecl.accessType(TypeDecl td, boolean ambiguous);
	inh lazy Access BodyDecl.accessType(TypeDecl td, boolean ambiguous);
	inh lazy Access Block.accessType(TypeDecl td, boolean ambiguous);
	inh lazy Access Expr.accessType(TypeDecl td, boolean ambiguous);
	
	inh lazy NameType ASTNode.nameType();

	eq Program.getChild().accessType(TypeDecl td, boolean ambiguous) {
		for(int i = 0; i < getNumCompilationUnit(); i++) {
			for(int j = 0; j < getCompilationUnit(i).getNumTypeDecl(); j++) {
				TypeDecl type = getCompilationUnit(i).getTypeDecl(j);
				if(type == td)
					return new TypeAccess(getCompilationUnit(i).packageName(), td.getID());
			}
		}
		return null;
	}

	eq CompilationUnit.getChild(int i).accessType(TypeDecl td, boolean ambiguous) {
		if(td.isNestedType()) {
			TypeDecl enc = td.enclosingType();
			Access encacc = getChild(i).accessType(enc, ambiguous);
			if(encacc == null) return null;
			Access acc = enc.getBodyDecl(0).accessType(td, ambiguous);
			if(acc == null) return null;
			return encacc.qualifiesAccess(acc);
		} else {
			SimpleSet set = localLookupType(td.getID());
			if(set.size() == 1 && (TypeDecl)set.iterator().next() == td) {
				return new TypeAccess(td.getID());
			}
			return accessType(td, ambiguous);
		}
	}

	eq TypeDecl.getBodyDecl(int i).accessType(TypeDecl td, boolean ambiguous) {
		if(memberTypes(td.getID()).contains(td)) {
			if(ambiguous && !getBodyDecl(i).lookupVariable(td.getID()).isEmpty()) {
				// if we are in an ambiguous context, we cannot access a member
				// type shadowed by a field of the same name
				return null;
			} else {
				return new TypeAccess(td.getID());
			}
		}
		if(td.isNestedType()) {
			TypeDecl enc = td.enclosingType();
			Access encacc = getBodyDecl(i).accessType(enc, ambiguous);
			if(encacc == null) return null;
			Access acc = enc.getBodyDecl(0).accessType(td, ambiguous);
			if(acc == null) return null;
			return encacc.qualifiesAccess(acc);
		} else {
			Access ta = accessType(td, ambiguous);
			if(ta == null) return null;
			String pkgname = "";
			if(ta instanceof TypeAccess) {
				pkgname = ((TypeAccess)ta).getPackage();
			} else if(ta instanceof AbstractDot) {
				pkgname = ((TypeAccess)((AbstractDot)ta).getRight()).getPackage();
			} else {
				assert(false);
			}
			if(pkgname.equals("") && memberTypes(td.getID()).isEmpty() 
					&& memberFields(td.getID()).isEmpty()) {
				return ta;
			} else {
				Access pkgacc = getBodyDecl(i).accessPackage(td.packageName());
				if(pkgacc == null) return null;
				return pkgacc.qualifiesAccess(ta);
			}
		}
	}
	
	eq MethodDecl.getBlock().accessType(TypeDecl td, boolean ambiguous) {
		Access acc = accessType(td, ambiguous);
		if(acc != null && !parameterDeclaration(td.getID()).isEmpty()) {
			if(acc instanceof AbstractDot) {
				Expr left = ((AbstractDot)acc).getLeft();
				if(left.isPackageAccess()) {
					Access pkgacc = accessPackage(((PackageAccess)left).getPackage());
					if(pkgacc == null) return null;
					return pkgacc.qualifiesAccess(((AbstractDot)acc).getRight());
				} else if(left.isTypeAccess()) {
					Access tacc = accessType(((TypeAccess)left).decl(), ambiguous);
					if(tacc == null) return null;
					return tacc.qualifiesAccess(((AbstractDot)acc).getRight());
				} else {
					assert(false);
				}
			} else {
				if(td.isNestedType()) {
					TypeDecl enc = td.enclosingType();
					Access encacc = getBlock().accessType(enc, ambiguous);
					if(encacc == null) return null;
					Access innacc = enc.getBodyDecl(0).accessType(td, ambiguous);
					if(acc == null) return null;
					return encacc.qualifiesAccess(acc);
				} else if(!td.packageName().equals("") && accessPackage(td.packageName()) != null) {
					return accessPackage(td.packageName()).qualifiesAccess(acc);
				} else {
					return null;
				}
			}
		} else {
			return acc;
		}
	}

	eq Block.getStmt(int i).accessType(TypeDecl td, boolean ambiguous) {
		Access acc = accessType(td, ambiguous);
		if(acc != null && localVariableDeclaration(td.getID()) != null) {
			if(acc instanceof AbstractDot) {
				Expr left = ((AbstractDot)acc).getLeft();
				if(left.isPackageAccess()) {
					Access pkgacc = accessPackage(((PackageAccess)left).getPackage());
					if(pkgacc == null) return null;
					return pkgacc.qualifiesAccess(((AbstractDot)acc).getRight());
				} else if(left.isTypeAccess()) {
					Access tacc = accessType(((TypeAccess)left).decl(), ambiguous);
					if(tacc == null) return null;
					return tacc.qualifiesAccess(((AbstractDot)acc).getRight());
				} else {
					assert(false);
				}
			} else {
				if(td.isNestedType()) {
					TypeDecl enc = td.enclosingType();
					Access encacc = getStmt(i).accessType(enc, ambiguous);
					if(encacc == null) return null;
					Access innacc = enc.getBodyDecl(0).accessType(td, ambiguous);
					if(acc == null) return null;
					return encacc.qualifiesAccess(acc);
				} else if(!td.packageName().equals("") && accessPackage(td.packageName()) != null) {
					return accessPackage(td.packageName()).qualifiesAccess(acc);
				} else {
					return null;
				}
			}
		} else {
			return acc;
		}
	}

	eq AbstractDot.getRight().accessType(TypeDecl td, boolean ambiguous) {
		return getLeft().qualifiedAccessType(td, ambiguous);
	}

	syn Access Expr.qualifiedAccessType(TypeDecl td, boolean ambiguous) {
		return type().getBodyDecl(0).accessType(td, ambiguous);
	}

	eq PackageAccess.qualifiedAccessType(TypeDecl td, boolean ambiguous) {
		if(lookupType(packageName(), td.getID()) == td)
			return new TypeAccess(td.getID());
		else
			return null;
	}

	eq TypeAccess.qualifiedAccessType(TypeDecl td, boolean ambiguous) {
		return type().getBodyDecl(0).accessType(td, ambiguous);
	}
	
	boolean Expr.isCastedThisAccess() { return false; }
	
	boolean ParExpr.isCastedThisAccess() {
		return getExpr().isCastedThisAccess();
	}
	
	boolean CastExpr.isCastedThisAccess() {
		return getExpr() instanceof ThisAccess;
	}

}
