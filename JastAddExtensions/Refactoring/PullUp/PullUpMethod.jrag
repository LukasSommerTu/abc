aspect PullUpMethod {
	public void MethodDecl.pullUp(boolean onlyAbstract) {
		if(!hostType().isClassDecl() || !hostType().fromSource() || !((ClassDecl)hostType()).superclass().fromSource())
			throw new RefactoringException("no fitting super class");
		ClassDecl host = (ClassDecl)hostType();
		ClassDecl sup = host.superclass();
		MethodDecl md = this;
		lockAllNames();
		translateTypeVars(host, sup);
		MethodDecl md_copy = (MethodDecl)fullCopy();
		md.replaceWith(md_copy);
		if(onlyAbstract)
			md.makeAbstract();
		sup.insertUnusedMethod(md);
		if(!md.isAbstract() || md_copy.isAbstract())
			host.removeBodyDecl(md_copy);
		programRoot().flushCaches();
	}
	
	public void MethodDecl.doPullUp(boolean onlyAbstract) {
		pullUp(onlyAbstract);
		programRoot().eliminate(LOCKED_NAMES);
	}
	
	public void MethodDecl.doPullUp() {
		doPullUp(false);
	}
	
	private void MethodDecl.translateTypeVars(TypeDecl sub, TypeDecl sup) {
		if(!sub.isGenericType() || !sup.isParameterizedType())
			return;
		GenericTypeDecl gsub = (GenericTypeDecl)sub;
		ParTypeDecl psup = (ParTypeDecl)sup;
		GenericTypeDecl gsup = (GenericTypeDecl)psup.genericDecl();
		Map<TypeVariable, TypeVariable> dict = new HashMap<TypeVariable, TypeVariable>();
		for(TypeVariable tv : (List<TypeVariable>)gsub.getTypeParameterList()) {
			for(int i=0;i<psup.getNumArgument();++i) {
				if(psup.getArgument(i).type() == tv)
					dict.put(tv, gsup.getTypeParameter(i));
			}
		}
		translateTypeVars(dict);
	}
	
}