aspect PullUpMembers {
	public void TypeDecl.pullUpMembers(MethodDecl[] meths, boolean[] makeAbstract, FieldDeclaration[] fields, MemberTypeDecl[] membertypes) {
		throw new RefactoringException("can only pull up from classes");
	}
	
	public void ClassDecl.pullUpMembers(MethodDecl[] meths, boolean[] makeAbstract, FieldDeclaration[] fields, MemberTypeDecl[] membertypes) {
		for(int i=0;i<meths.length;++i)
			meths[i].pullUp(makeAbstract[i]);
		for(int i=0;i<fields.length;++i)
			fields[i].moveTo(superclass());
		for(int i=0;i<membertypes.length;++i)
			membertypes[i].moveTo(superclass());
	}
	
	public void TypeDecl.doPullUpMembers(MethodDecl[] meths, boolean[] makeAbstract, FieldDeclaration[] fields, MemberTypeDecl[] membertypes) {
		pullUpMembers(meths, makeAbstract, fields, membertypes);
		programRoot().eliminate(LOCKED_DATAFLOW, LOCKED_NAMES);
	}
	
	public void TypeDecl.addRequiredMembers(java.util.Set<MethodDecl> meths, java.util.Set<FieldDeclaration> fds, java.util.Set<MemberTypeDecl> mtds) {
		LinkedList<MemberDecl> worklist = new LinkedList<MemberDecl>();
		worklist.addAll(meths);
		worklist.addAll(fds);
		worklist.addAll(mtds);
		while(!worklist.isEmpty())
			worklist.pop().addRequiredMembers(this, meths, fds, mtds);
	}
	
	public void ASTNode.addRequiredMembers(TypeDecl host, java.util.Set<MethodDecl> meths, java.util.Set<FieldDeclaration> fds, java.util.Set<MemberTypeDecl> mtds) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			child.addRequiredMembers(host, meths, fds, mtds);
		}
	}
	
	public void VarAccess.addRequiredMembers(TypeDecl host, java.util.Set<MethodDecl> meths, java.util.Set<FieldDeclaration> fds, java.util.Set<MemberTypeDecl> mtds) {
		if(decl().isInstanceVariable() && ((FieldDeclaration)decl()).hostType() == host)
			fds.add((FieldDeclaration)decl());
		super.addRequiredMembers(host, meths, fds, mtds);
	}
	
	public void MethodAccess.addRequiredMembers(TypeDecl host, java.util.Set<MethodDecl> meths, java.util.Set<FieldDeclaration> fds, java.util.Set<MemberTypeDecl> mtds) {
		if(/*!decl().isStatic() &&*/ decl().hostType() == host)
			meths.add(decl());
		super.addRequiredMembers(host, meths, fds, mtds);
	}
	
	public void TypeAccess.addRequiredMembers(TypeDecl host, java.util.Set<MethodDecl> meths, java.util.Set<FieldDeclaration> fds, java.util.Set<MemberTypeDecl> mtds) {
		if(!decl().isStatic() && decl().enclosingType() == host)
			mtds.add((MemberTypeDecl)decl().getParent());
		super.addRequiredMembers(host, meths, fds, mtds);
	}
}