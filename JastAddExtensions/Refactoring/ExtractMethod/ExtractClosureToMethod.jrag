aspect ExtractClosureToMethod {
	public MethodDecl AnonymousMethod.extractToMethod(int visibility, String name) {
		TypeDecl typedecl = hostType();
		eliminateOutParams();
		lockAllNames();
		Modifiers mods = new Modifiers(visibility);
		if(inStaticContext() || inExplicitConstructorInvocation())
			mods.addModifier("static");
		MethodDecl md = new MethodDecl(mods, getReturnType(), name, getParameters(), getExceptions(), new Opt(getBlock())); 
		// it is generally not a good idea to have the same node at two different places in the tree...
		setBlock(new Block(new List()));
		int index = typedecl.getBodyDeclList().getIndexOfChild(hostBodyDecl());
		typedecl.insertUnusedMethod(md, index+1);
		replaceWith(md.createLockedAccess(getArgList()));
		return md;
	}

	inh boolean AnonymousMethod.inExplicitConstructorInvocation();
	
	public MethodDecl AnonymousMethod.doExtractToMethod(int visibility, String name) {
		TypeDecl td = hostType();
		MethodDecl md = extractToMethod(visibility, name);
		td.eliminate(LOCKED_NAMES);
		return md;
	}
}