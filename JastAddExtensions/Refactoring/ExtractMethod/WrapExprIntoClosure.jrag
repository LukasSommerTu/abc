aspect WrapExprIntoClosure {

	public ClosureInvocation Expr.wrapIntoClosure() throws RefactoringException {
		// method calls are not valid in places where a constant expression is expected
		if(mustBeConstant())
			throw new RefactoringException("this expression must be constant, cannot be extracted to method");
		AdjustmentTable table = new AdjustmentTable(programRoot());
		List<Access> exns = computeExceptionsToDeclare(table);
		ClosureInvocation cl = 
			new ClosureInvocation(
					new List(),                      // parameters
					type().getLockedAccess(table),   // return type
					exns,                            // thrown exceptions
					null,                            // body (to be filled in shortly)
					new List<Expr>());               // arguments
		this.replaceWith(cl);
		ReturnStmt ret = new ReturnStmt(this);
		table.addReturnVoid(ret);
		cl.setBlock(new Block(new List().add(ret)));
		programRoot().flushCaches();
		table.adjust();
		return cl;
	}
	
	inh boolean Expr.mustBeConstant();
	eq Program.getChild().mustBeConstant() = false;
	eq ConstCase.getValue().mustBeConstant() = true;
	eq TypeDecl.getChild().mustBeConstant() = false;
	// there should be some more here...

}