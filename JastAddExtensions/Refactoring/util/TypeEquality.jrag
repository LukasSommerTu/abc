// builtin, special and derived types are realised through NTAs which may be flushed
// comparing them by reference equality is hence not a good idea
aspect TypeEquality {
	// singleton types
	public boolean WildcardType.equals(Object obj) { return obj instanceof WildcardType; }
	public boolean NullType.equals(Object obj)     { return obj instanceof NullType; }
	public boolean BooleanType.equals(Object obj)  { return obj instanceof BooleanType; }
	public boolean DoubleType.equals(Object obj)   { return obj instanceof DoubleType; }
	public boolean FloatType.equals(Object obj)    { return obj instanceof FloatType; }
	public boolean ByteType.equals(Object obj)     { return obj instanceof ByteType; }
	public boolean CharType.equals(Object obj)     { return obj instanceof CharType; }
	public boolean IntType.equals(Object obj)      { return obj instanceof IntType; }
	public boolean LongType.equals(Object obj)     { return obj instanceof LongType; }
	public boolean ShortType.equals(Object obj)    { return obj instanceof ShortType; }
	public boolean VoidType.equals(Object obj)     { return obj instanceof VoidType; }
	public boolean UnknownType.equals(Object obj)  { return obj instanceof UnknownType; }
	
	// derived types
	public boolean ArrayDecl.equals(Object obj) {
		return obj instanceof ArrayDecl && this.componentType().equals(((ArrayDecl)obj).componentType());
	}
	
	public boolean ParTypeDecl.equals(Object obj) {
		if(obj instanceof ParTypeDecl) {
			ParTypeDecl that = (ParTypeDecl)obj;
			if(this.genericDecl().equals(that.genericDecl()) 
					&& this.getNumArgument() == that.getNumArgument()) {
				for(int i=0;i<getNumArgument();++i)
					if(!this.getArgument(i).type().equals(that.getArgument(i).type()))
						return false;
				return true;
			}
		}
		return false;		
	}
	
	// SimpleSet should use equals instead of ==
	refine DataStructures eq FieldDeclaration.contains(Object o) = this.equals(o);
	refine DataStructures eq VariableDeclaration.contains(Object o) = this.equals(o);
	refine DataStructures eq ParameterDeclaration.contains(Object o) = this.equals(o);
	refine DataStructures eq TypeDecl.contains(Object o) = this.equals(o);
	refine DataStructures eq MethodDecl.contains(Object o) = this.equals(o);
}