aspect GenericsExt {
	refine Generics Opt MethodDecl.substituteBody(Parameterization parTypeDecl) {
		return (Opt)getBlockOpt().substituteAll(parTypeDecl);
	}
	
	public ASTNode ASTNode.substituteAll(Parameterization parTypeDecl) {
		ASTNode res = (ASTNode)copy();
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null)
				child = child.substituteAll(parTypeDecl);
			res.setChild(child, i);
		}
		return res;
	}
	
	public ASTNode TypeAccess.substituteAll(Parameterization parTypeDecl) {
		if(decl().isTypeVariable())
			return parTypeDecl.substitute((TypeVariable)decl()).createBoundAccess();
		else
			return super.substituteAll(parTypeDecl);
	}
	
	public TypeAccess BoundTypeAccess.substituteAll(Parameterization parTypeDecl) {
		return decl().createBoundAccess();
	}
	
	interface TypeDeclSubstituted { }
	ClassDeclSubstituted implements TypeDeclSubstituted;
	InterfaceDeclSubstituted implements TypeDeclSubstituted;
	GenericClassDeclSubstituted implements TypeDeclSubstituted;
	GenericInterfaceDeclSubstituted implements TypeDeclSubstituted;
	
	
	public Collection<FieldDeclarationSubstituted> FieldDeclaration.substitutedCopies() {
		Collection<FieldDeclarationSubstituted> res = new LinkedList<FieldDeclarationSubstituted>();
		if(!hostType().isGenericType())
			return res;
		GenericTypeDecl host = (GenericTypeDecl)hostType();
		for(int i=0;i<host.getNumParTypeDecl();++i) {
			ParTypeDecl ptd = host.getParTypeDecl(i);
			for(Iterator<FieldDeclarationSubstituted> iter=ptd.localFields(name()).iterator();iter.hasNext();)
				res.add(iter.next());
		}
		return res;
	}

	public Collection<MethodDeclSubstituted> MethodDecl.substitutedCopies() {
		Collection<MethodDeclSubstituted> res = new LinkedList<MethodDeclSubstituted>();
		if(!hostType().isGenericType())
			return res;
		GenericTypeDecl host = (GenericTypeDecl)hostType();
		for(int i=0;i<host.getNumParTypeDecl();++i) {
			ParTypeDecl ptd = host.getParTypeDecl(i);
			for(Object o : ptd.localMethodsSignatureMap().values())
				if(o instanceof MethodDeclSubstituted && ((MethodDeclSubstituted)o).sourceMethodDecl() == this)
					res.add((MethodDeclSubstituted)o);
		}
		return res;
	}
	
	// all calls that resolve to a parameterized instance of a generic method
	coll Collection<MethodAccess> GenericMethodDecl.parUses() [new HashSet<MethodAccess>()]
	                                                          with add root Program;
	MethodAccess contributes this
	when decl() instanceof ParMethodDecl
	to GenericMethodDecl.parUses()
	for ((ParMethodDecl)decl()).sourceMethodDecl(); 
	
}