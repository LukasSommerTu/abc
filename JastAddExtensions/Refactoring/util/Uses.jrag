aspect Uses {
	// bind all uses of a variable to its declaration
	public Collection<VarAccess> Variable.allUses() { return uses(); }
	
	coll Collection<VarAccess> FieldDeclaration.uses() [new HashSet<VarAccess>()] 
	                           with add root Program;
	VarAccess contributes
	this when decl() instanceof FieldDeclaration
	to FieldDeclaration.uses() for (FieldDeclaration)decl();
	
	coll Collection<VarAccess> VariableDeclaration.uses() [new HashSet<VarAccess>()] 
	                           with add root BodyDecl;
	VarAccess contributes
	this when decl() instanceof VariableDeclaration
	to VariableDeclaration.uses() for (VariableDeclaration)decl();

	coll Collection<VarAccess> ParameterDeclaration.uses() [new HashSet<VarAccess>()] 
	                           with add root BodyDecl;
	VarAccess contributes
	this when decl() instanceof ParameterDeclaration
	to ParameterDeclaration.uses() for (ParameterDeclaration)decl();
	
	// bind all uses of a type to its declaration
	coll Collection<TypeAccess> TypeDecl.uses() [new HashSet<TypeAccess>()]
	                            with add root Program;
	TypeAccess contributes this to TypeDecl.uses() for decl();
	
	// bind all method uses to any declaration they may resolve to at runtime
	coll Collection<MethodAccess> MethodDecl.polyUses() [new HashSet<MethodAccess>()]
	                              with add root Program;
	MethodAccess contributes this to MethodDecl.polyUses() for each possibleTargets();
	
	// bind all method uses to the declaration they resolve to
	coll Collection<MethodAccess> MethodDecl.uses() [new HashSet<MethodAccess>()]
	                              with add root Program;
	MethodAccess contributes this to MethodDecl.uses() for decl();
	
	// bind all class instance expressions and constructor accesses to the constructor they resolve to
	coll Collection<Access> ConstructorDecl.uses() [new HashSet<Access>()]
	                        with add root Program;
	ClassInstanceExpr contributes this to ConstructorDecl.uses() for decl();
	ConstructorAccess contributes this to ConstructorDecl.uses() for decl();
	
	// bind all uses of a label to its declaration
	coll Collection<Stmt> LabeledStmt.uses() [new HashSet<Stmt>()] 
	                                         with add root BodyDecl;
	BreakStmt contributes
	this when targetStmt() instanceof LabeledStmt
	to LabeledStmt.uses() for (LabeledStmt)targetStmt();
	
	ContinueStmt contributes
	this when targetStmt() instanceof LabeledStmt
	to LabeledStmt.uses() for (LabeledStmt)targetStmt();
}