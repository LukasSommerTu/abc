/** The "Wrap Block Into Closure" refactoring turns a block

      <pre>
      { b_1, ..., b_n }
      </pre>

    into a closure application statement

      <pre>
      (() : T throws e_1, ..., e_m => { b_1, ..., b_n }) ();
      </pre>

    Exceptions e_1, ..., e_m are all uncaught exceptions thrown in the block.
    The refactoring ensures that control flow stays intact. In particular, if the
    block contains any break, continue, or return statements with target outside
    the block, the refactoring will be rejected.

    Return type T will normally be void, except if the whole block cannot complete
    normally, in which case it will be the return type of the enclosing method
    and the application statement is wrapped into a return statement.
 */

aspect WrapBlockIntoClosure {

	public ClosureInvocation Block.wrapIntoClosure() throws RefactoringException {
		return wrapIntoClosure(false);
	}
	
	public ClosureInvocation Block.wrapIntoClosure(boolean fancy) throws RefactoringException {
		AdjustmentTable table = new AdjustmentTable(programRoot());
		lockAllCFlow(table);
		
		// create a closure without parameters returning and throwing all
		// uncaught checked exceptions of block
		// if the block cannot complete normally, we need to set the return type
		List<Access> exns = computeExceptionsToDeclare(table);
		Access rettype = canCompleteNormally() ? new PrimitiveTypeAccess("void")
			                                   : returnType().getLockedAccess(table);
		ClosureInvocation cl = 
			new ClosureInvocation(
					new List(),         // parameters
					rettype, 	        // return type
					exns,               // thrown exceptions
					null,               // body (to be filled in shortly)
					new List<Expr>());  // arguments
		Stmt stmt;
		if(canCompleteNormally()) {
			replaceWith(stmt = new ExprStmt(cl));
		} else {
			ReturnStmt ret = new ReturnStmt(cl);
			table.addReturnVoid(ret);
			replaceWith(stmt = ret);
		}
		cl.setBlock(this);
		programRoot().flushCaches();
		
		// qualify escaping statements
		LabeledStmt lblstmt = null;
		if(fancy) {
			Collection<Stmt> escapingStmts = cl.getBlock().findEscapingStmts(cl);
			if(!escapingStmts.isEmpty()) {
				String lbl = cl.getBlock().pickFreshLabel("l");
				lblstmt = new LabeledStmt(lbl, null);
				stmt.replaceWith(lblstmt);
				lblstmt.setStmt(stmt);
				for(Stmt s : escapingStmts)
					table.addQualifiedCFlow(s.qualify(lbl));
				programRoot().flushCaches();
			}
		}
		
		// adjust
		table.adjust();
		if(lblstmt != null)
			lblstmt.removeUselessLabel();
		return cl;
	}
	
	// return a list of locked type accesses to all exceptions in a subtree that should be declared
	public List<Access> ASTNode.computeExceptionsToDeclare(AdjustmentTable table) {
		List<Access> res = new List<Access>();
		for(TypeDecl exn : uncaughtExceptions())
			if(exn.shouldDeclareAsThrown())
				res.add(exn.getLockedAccess(table));
		return res;
	}
	
	// find all statements with an outgoing cflow edge
	public java.util.Set<Stmt> ASTNode.findEscapingStmts(ASTNode root) {
		java.util.Set<Stmt> res = new HashSet<Stmt>();
		findEscapingStmts(root, res);
		return res;
	}
	
	public void ASTNode.findEscapingStmts(ASTNode root, Collection<Stmt> res) { 
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null)
				child.findEscapingStmts(root, res);
		}
	}
	
	public void BreakStmt.findEscapingStmts(ASTNode root, Collection<Stmt> res) {
		if(!targetStmt().beneath(root))
			res.add(this);
	}
	
	public void ContinueStmt.findEscapingStmts(ASTNode root, Collection<Stmt> res) {
		if(!targetStmt().beneath(root))
			res.add(this);
	}
	
	public void ReturnStmt.findEscapingStmts(ASTNode root, Collection<Stmt> res) {
		res.add(this);
	}
	
	// same for continue and return
	
	// this is what the JLS calls a checked exception; the definitions in JastAddJ confuse me...
	inh lazy TypeDecl TypeDecl.typeThrowable();
	syn boolean TypeDecl.shouldDeclareAsThrown()
		= instanceOf(typeThrowable()) &&
		  !instanceOf(typeRuntimeException()) &&
		  !instanceOf(typeError());

	inh TypeDecl Block.returnType();
	inh TypeDecl ClosureInvocation.returnType();
	inh TypeDecl ReturnStmt.typeVoid();
	syn TypeDecl ReturnStmt.type() = hasResult() ? getResult().type() : typeVoid();

}