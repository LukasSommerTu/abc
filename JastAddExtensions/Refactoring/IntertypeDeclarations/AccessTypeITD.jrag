aspect AccessTypeITD {
	
	eq IntertypeFieldDeclaration.getInit().accessType(TypeDecl td) {
	    SymbolicTypeAccess acc = introducedType().accessMemberType(td);
	    if(acc != null) return acc;
		if(introducedType().sameSourceDeclAs(td))
			return introducedType().getSymbolicAccess().moveInto(introducedType());
		acc = accessType(td);
		if(acc != null)
			return acc.moveInto(this);
	    return null;
	}	
	
	eq IntertypeMethodDecl.getBlock().accessType(TypeDecl td) {
		SymbolicTypeAccess acc = introducedType().accessMemberType(td);
		if(acc != null) return acc;
		if(introducedType().sameSourceDeclAs(td))
			return introducedType().getSymbolicAccess().moveInto(introducedType());
		acc = accessType(td);
		if(acc != null)
			return acc.moveInto(this);
	    return null;
	}
	
	// member type lookup becomes a bit more complicated because of declared parents
	refine AccessType eq ClassDecl.accessMemberType(TypeDecl td) {
		SymbolicTypeAccess acc = accessLocalType(td);
		if(acc != null) return acc;
		for(Iterator outerIter = interfacesIteratorWithoutDeclareParents(); outerIter.hasNext(); ) {
			TypeDecl type = (TypeDecl)outerIter.next();
			acc = type.accessMemberType(td);
			if(acc != null && !td.isPrivate() && td.accessibleFrom(this))
				return acc.moveDownTo(this);
		}
		if(hasSuperclass()) {
			acc = superclassWithoutDeclareParents().accessMemberType(td);
			if(acc != null && !td.isPrivate() && td.accessibleFrom(this)) {
				if(introducedSuperclass() != null && !superclassWithoutDeclareParents().instanceOf(introducedSuperclass())) {
					acc = introducedSuperclass().accessLocalType(td);
					if(acc != null)
						return acc.moveDownTo(this);
				}
				return acc.moveDownTo(this);
			}
		}
		return null;
	}
	
	refine AccessType eq InterfaceDecl.accessMemberType(TypeDecl td) {
		SymbolicTypeAccess acc = accessLocalType(td);
		if(acc != null) return acc;
		for(Iterator outerIter = superinterfacesIteratorWithoutDeclareParents(); outerIter.hasNext(); ) {
			TypeDecl type = (TypeDecl)outerIter.next();
			acc = type.accessMemberType(td);
			if(acc != null && !td.isPrivate())
				return acc.moveDownTo(this);
		}
		return null;
	}
	
	SymbolicTypeAccess SymbolicTypeAccess.moveInto(IntertypeFieldDeclaration fd) {
		return addQualifier(!fd.introducedType().memberTypes(target.name()).isEmpty()
						|| fd.introducedType().name().equals(target.name()));
	}
	
	SymbolicTypeAccess SymbolicTypeAccess.moveInto(IntertypeMethodDecl md) {
		return addQualifier(!md.introducedType().memberTypes(target.name()).isEmpty()
						|| md.introducedType().name().equals(target.name()));
	}
	
	// a type in a surrounding aspect cannot be accessed as <Aspect>.<Type> unless it is static
	refine SymbolicTypeAccess public Access SymbolicMemberTypeAccess.computeAccess(NamingContext ctxt, boolean ambiguous) {
		if(needsQualifier || ctxt.isShadowed(target, ambiguous))
			if(source instanceof AspectDecl && !target.isStatic())
				return null;
		return SymbolicTypeAccess.SymbolicMemberTypeAccess.computeAccess(ctxt, ambiguous);
	}
	
}