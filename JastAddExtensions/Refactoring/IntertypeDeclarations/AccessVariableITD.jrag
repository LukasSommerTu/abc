aspect AccessVariableITD {

	eq IntertypeMethodDecl.getChild().accessVariable(Variable decl) {
		VarAccessInfo acc = accessParameterDeclaration(decl);
		// A declaration of a method parameter name shadows any other variable declarations
		if(acc != null) return acc;
		acc = introducedType().accessMemberField(decl);
		if(acc != null) 
			return acc.moveInto((MethodDecl)this);
		// Delegate to other declarations in scope
		acc = accessVariable(decl);
		if(acc != null)
			return acc.moveInto(this);
		return null;
	}
	
	eq IntertypeFieldDeclaration.getInit().accessVariable(Variable decl) {
		VarAccessInfo acc = introducedType().accessMemberField(decl);
		if(acc != null) return acc;
		acc = accessVariable(decl);
		if(acc != null)
			return acc.moveInto(this);
		return null;
	}

	VarAccessInfo VarAccessInfo.moveInto(IntertypeMethodDecl md) {
		return addQualifier(!md.introducedType().memberFields(target.name()).isEmpty() ||
				!md.parameterDeclaration(target.name()).isEmpty());
	}
	
	VarAccessInfo VarAccessInfo.moveInto(IntertypeFieldDeclaration fd) {
		return addQualifier(!fd.introducedType().memberFields(target.name()).isEmpty());
	}

	// we have to avoid refering to the enclosing aspect as "this" (or "super")
	// if that would happen, we just reject

	refine VarAccessInfo public Access VarAccessInfo.computeThisAccess(NamingContext ctxt) {
		if(bend instanceof AspectDecl)
			return null;
		return VarAccessInfo.VarAccessInfo.computeThisAccess(ctxt);
	}
		
	refine VarAccessInfo public Access VarAccessInfo.computeSuperAccess(NamingContext ctxt) {
		if(bend instanceof AspectDecl)
			return null;
		return VarAccessInfo.VarAccessInfo.computeSuperAccess(ctxt);
	}
		
	refine VarAccessInfo public Access VarAccessInfo.computeMonsterAccess(NamingContext ctxt) {
		if(bend instanceof AspectDecl)
			return null;
		return VarAccessInfo.VarAccessInfo.computeMonsterAccess(ctxt);
	}
	
	// the enclosing type of expressions and accesses has to be the thisType()
	// instead of the hostType()
	
	refine NamingContext public NamingContext Expr.getNamingContext() {
		return new NamingContext() {
			public boolean isStatic() { return inStaticContext(); }
			public TypeDecl enclosingType() { return thisType(); }
			public NamingContext unqualifiedCtxt() { return this; }
			public SimpleSet lookupType(String name) { return Expr.this.lookupType(name); }
			public SimpleSet lookupVariable(String name) { return Expr.this.lookupVariable(name); }
			public Access accessType(TypeDecl td, NameType nt) {
				return td.access(Expr.this, nt);
			}
		};
	}
	
	refine NamingContext public NamingContext Access.getNamingContext() {
		return new NamingContext() {
			public boolean isStatic() { return inStaticContext(); }
			public TypeDecl enclosingType() { return thisType(); }
			public NamingContext unqualifiedCtxt() {
				return Access.this.unqualifiedScope().getNamingContext();
			}
			public SimpleSet lookupType(String name) { 
				return Access.this.lookupType(name); 
			}
			public SimpleSet lookupVariable(String name) { 
				return Access.this.lookupVariable(name); 
			}
			public Access accessType(TypeDecl td, NameType nt) {
				return td.access(Access.this, nt);
			}
		};
	}
	
	
}