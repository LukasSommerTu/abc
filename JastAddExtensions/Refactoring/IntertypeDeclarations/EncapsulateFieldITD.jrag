aspect EncapsulateFieldITD {
	
	// new constructor: creates an ITD method decl from another method decl
	//                  and a host type access
	public IntertypeMethodDecl.IntertypeMethodDecl(MethodDecl orig, Access target) {
		this(orig.getModifiers(), orig.getTypeAccess(), orig.name(),
				orig.getParameterList(), orig.getExceptionList(), 
				orig.getBlockOpt(), target);
	}

	// refine method creation methods to return ITD method decls if appropriate
	refine Encapsulate private MethodDecl Accessors.makeGetter() {
		MethodDecl md = Encapsulate.Accessors.makeGetter();
		if(field instanceof IntertypeFieldDeclaration) {
			IntertypeFieldDeclaration ifd = (IntertypeFieldDeclaration)field;
			return new IntertypeMethodDecl(md, (Access)ifd.getTargetType().fullCopy());
		} else {
			return md;
		}
	}

	refine Encapsulate private MethodDecl Accessors.makeSetter(AssignExpr assign, String name_prefix) {
		MethodDecl md = Encapsulate.Accessors.makeSetter(assign, name_prefix);
		if(field instanceof IntertypeFieldDeclaration) {
			IntertypeFieldDeclaration ifd = (IntertypeFieldDeclaration)field;
			return new IntertypeMethodDecl(md, (Access)ifd.getTargetType().fullCopy());
		} else {
			return md;
		}
	}

	refine Encapsulate private MethodDecl Accessors.makeCrement(Expr expr, String name_prefix) {
		MethodDecl md = Encapsulate.Accessors.makeCrement(expr, name_prefix);
		if(field instanceof IntertypeFieldDeclaration) {
			IntertypeFieldDeclaration ifd = (IntertypeFieldDeclaration)field;
			return new IntertypeMethodDecl(md, (Access)ifd.getTargetType().fullCopy());
		} else {
			return md;
		}
	}
	
	// make sure to put the accessors into the aspect instead of the host type for
	// intertype field declarations
	refine Encapsulate public MethodDecl Accessors.accessor(String classname) throws RefactoringException {
		if(used.contains(classname)) {
			return (MethodDecl)methods.get(classname);
		} else {
			used = used.add(classname);
			MethodDecl md = (MethodDecl)methods.get(classname);
			if(md == null)
				throw new RefactoringException("no accessor for "+classname);
			TypeDecl hostType;
			if(field instanceof IntertypeFieldDeclaration) {
				IntertypeFieldDeclaration ifd = (IntertypeFieldDeclaration)field;
				hostType = ifd.hostAspect();
			} else {
				hostType = field.hostType();
			}
			hostType.addMethod(md, false, false, false);
			return md;
		}
	}
	
	
}