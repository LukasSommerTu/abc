aspect ITDLookup {
	
	// we refine a number of lookup rules to make them more AspectJ compatible
	
	refine IntertypeFieldNameAnalysis eq IntertypeFieldDeclaration.getInit().lookupVariable(String name) {
		SimpleSet set = introducedType().memberFields(name);
		if(!set.isEmpty())
			return set;
		return lookupVariable(name);
	}
	
	refine IntertypeMethodNameAnalysis eq IntertypeMethodDecl.getChild().lookupVariable(String name) {
		SimpleSet set = parameterDeclaration(name);
		// A declaration of a method parameter name shadows any other variable declarations
		if(!set.isEmpty()) return set;
		// Search member fields
		set = introducedType().memberFields(name);
		if(!set.isEmpty()) return set;
		// Delegate to other declarations in aspect
		return lookupVariable(name);
	}
	
	refine IntertypeFieldNameAnalysis eq IntertypeFieldDeclaration.getInit().lookupType(String name) {
	    SimpleSet set = introducedType().memberTypes(name);
	    if(!set.isEmpty()) return set;
		if(introducedType().name().equals(name))
			return SimpleSet.emptySet.add(introducedType());
	    return lookupType(name);
	}	
	
	refine IntertypeMethodNameAnalysis eq IntertypeMethodDecl.getBlock().lookupType(String name) {
		SimpleSet set = introducedType().memberTypes(name);
		if(!set.isEmpty()) return set;
		if(introducedType().name().equals(name))
			return SimpleSet.emptySet.add(introducedType());
		return lookupType(name);
	}
	
	refine IntertypeFieldNameAnalysis eq IntertypeFieldDeclaration.getInit().lookupMethod(String name) {
	    Collection c = introducedType().memberMethods(name);
	    if(!c.isEmpty()) return c;
	    return lookupMethod(name);
	}
	
	refine IntertypeMethodNameAnalysis eq IntertypeMethodDecl.getBlock().lookupMethod(String name) {
	    Collection c = introducedType().memberMethods(name);
	    if(!c.isEmpty()) return c;
	    return lookupMethod(name);
    }

}
