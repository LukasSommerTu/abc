What is where:
=============
./*.jrag ./*.jadd: implementation of the refactoring code; notably
	 	   - Access*.jrag: implements attributes to build accesses
		           to different sorts of declarations from
				   some point in the AST; the code parallels the corresponding
				   Lookup* attributes' structure
           - *AccessInfo.jrag: the access code at first only generates
                   symbolic representations of the accesses; from these,
                   actual accesses are generated by the code in these aspects
		   - AdjustAccess.jrag: implements an adjustment table, which
		           keeps track of a list of accesses and the
				   declarations they should point to; the table
				   can then run through the list and try and
				   make the declarations point to their
				   recorded destinations
		   - AddMethod.jrag: add a method to a class, checking for
		           name clashes and (optionally) possible
				   capture and overriding
           - LocalVarNesting.jrag: checks whether a local variable
		           can be added to a certain block without
				   provoking name clashes
		   - Overriding.jrag: find the overriding and overridden
		     	   methods for a method declaration
           - Uses.jrag:    find all the use sites of an entity
           - Encapsulate.jrag: the Encapsulate Field refactoring
           - ExtractBlock.jrag: the first half of the Extract Method
		           refactoring, which takes a chunk of code
				   and turns it into a block, possibly
				   moving declarations outside if they are
				   referenced after the chunk in question
           - MakeMethod.jrag: the second half, which turns the
		           newly created block into a method of its
				   own
           - Rename*.jrag: implements several flavours of renaming
           - Names.jrag:   implements a general interface for changing
		     	   the name of an entity
           - PackageName.ast: implements package declarations
           - Undo.jadd: this aspect implements an (almost oblivious)
		     	   undo facility on ASTs so that refactorings
				   can change the tree without having to
				   worry about how to restore the previous
				   state if there is an error
           - FileRange.jrag: a FileRange represents a range of
		           characters in a file; used for error
				   reporting and testing
           - Methodoid.jrag: a methodoid is either a method or
		     	   a constructor
           - Changes.jrag: abstract representations of AST changes, 
                   plus a class for refactoring exceptions; such 
                   exceptions are thrown when a refactoring discovers
                   that it cannot succeed
main/	   some command line tools for testing out refactorings
tests/	   JUnit tests for different parts of the code; see tests/README
		   for details
AST/, beaver/, parser/, scanner/  code generated by JastAdd

Building:
=========
Make sure that projects Analyses, Java1.4Frontend, and Java1.5Frontend are unpacked into sibling directories of this one, then do `ant clean' to be on the safe side.

The most commonly used ant goals in build.xml are:
gen 	   run JastAdd no generate node definitions and the scanner and
		   parser; does not compile the resulting Java code
build	   first runs gen, then compiles all Java files in all subdirs
		   except tests/ and tools/
cleanGen   deletes all generated Java code and subdirectories

To get include support for inter-type declarations, use buildITD.xml instead and make sure that IntertypeDeclarations is unpacked into a sibling directory as well.