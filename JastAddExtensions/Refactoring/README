                       Refactoring Engine
  		          for JastAddJ


The Refactoring engine is part of the JastAdd project (http://www.jastadd.org)
The source code copyright is held by Max Schäfer and Torbjörn Ekman.

The source code is covered by a modified BSD license. Details on licences for
the other tools are available in their respective folders.

Overview:
=========
This is the command-line version of the refactoring engine for JastAddJ.
It comes with a number of test and driver programs, but it should not be
thought of as an end-user tool. Supported refactorings include Renaming,
Extract Class, Push Down Method, Extract Method, Inline Method, Extract
Local Variable, Inline Local Variable, and Encapsulate Field. All these
refactorings are implemented for Java 5 with inter-type declarations.

Building:
=========
Make sure that projects ControlFlowGraph, Java1.4Frontend, Java1.5Frontend, and
IntertypeDeclarations are unpacked into sibling directories of this one, then
do `ant clean' to be on the safe side. These projects are all included in the
web distribution. The project is built using ant with build file build.xml

The most commonly used ant goals in build.xml are:
gen 	   run JastAdd no generate node definitions and the scanner and
	   parser; does not compile the resulting Java code
build	   first runs gen, then compiles all Java files in all subdirs
	   except tests/ and tools/
cleanGen   deletes all generated Java code and subdirectories

Executing Refactorings from the Command Line:
=============================================

In subdirectory main/, there are driver programs RenameField, RenameType, RenameLocalVariable, RenameVariable, and EncapsulateField to run refactorings from the command line.

For example, to rename type p.A in the first RenameType test to B, execute

  java main.RenameType p A B tests/data/RenameType/test1/in/A.java

and similar for the other drivers (see source files for details about argument syntax).

There is also a driver program test/ExtractMethod.java for Extract Method. It takes an input file with the region to be extracted marked up by /*[*/ comments /*]*/.

Note, however, that these tools will only perform refactorings on the in-memory representation of the program; it will never touch the actual on-disk files.

There is one subdirectory per refactoring, with subdirectories Naming/ and Flow/ for the name binding framework and the flow analyses, respectively.
