/*
 * The Rename Variable refactoring
 */

aspect RenameVariable {
	public void Variable.rename(String new_name) {
		if(name().equals(new_name))
			return;
		if(!isValidName(new_name))
			throw new RefactoringException("not a valid name: "+new_name);
		checkRenamingPreconds(new_name);
		programRoot().lockNames(name(), new_name);
		setID(new_name);
		programRoot().flushCaches();
		programRoot().eliminate(LOCKED_NAMES);
	}
	
	public void Variable.checkRenamingPreconds(String new_name) { }
	
	public void FieldDeclaration.checkRenamingPreconds(String new_name) {
		if(!hostType().localFields(new_name).isEmpty())
			throw new RefactoringException("field named "+new_name+" exists");
	}

	public void VariableDeclaration.checkRenamingPreconds(String new_name) {
		SimpleSet res = lookupVariable(new_name);
		for(Iterator<Variable> iter=res.iterator(); iter.hasNext();)
			if(!iter.next().isField())
				throw new RefactoringException("variable of same name is in scope");
		Stmt area = getArea();
		if(!area.canIntroduceLocal(new_name))
			throw new RefactoringException("variable of the same name is nested");
	}

	public void ParameterDeclaration.checkRenamingPreconds(String new_name) {
		if(!hostBodyDecl().canIntroduceLocal(new_name))
			throw new RefactoringException("cannot rename variable to "+new_name);
	}
	
	inh Stmt VariableDeclaration.getArea();
	eq Block.getStmt().getArea() = this;
	eq ForStmt.getInitStmt().getArea() = this;
	eq EnhancedForStmt.getVariableDeclaration().getArea() = this;
	eq Program.getChild().getArea() = null;
}