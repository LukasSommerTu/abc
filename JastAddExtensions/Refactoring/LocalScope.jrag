/*
 * A local scope represents the new variable bindings introduced by a syntactic
 * construct.
 */

aspect LocalScope {
	
	interface LocalScope {
		boolean hasVariable(String name);
	}

	TypeDecl implements LocalScope;
	public boolean TypeDecl.hasVariable(String name) {
		return !memberFields(name).isEmpty();
	}
	ConstructorDecl implements LocalScope;
	public boolean ConstructorDecl.hasVariable(String name) {
		return parameterDeclaration(name) != SimpleSet.emptySet;
	}
	MethodDecl implements LocalScope;
	public boolean MethodDecl.hasVariable(String name) {
		return parameterDeclaration(name) != SimpleSet.emptySet;
	}
	CatchClause implements LocalScope;
	public boolean CatchClause.hasVariable(String name) {
		return parameterDeclaration(name) != SimpleSet.emptySet;
	}
	ForStmt implements LocalScope;
	public boolean ForStmt.hasVariable(String name) { 
		return localVariableDeclaration(name) != null;
	}
	
	public Variable Block.localLookupVariable(String name, int index) {
		for(int i=0;i<=index;++i)
			if(getStmt(i) instanceof VariableDeclaration &&
					((VariableDeclaration)getStmt(i)).name().equals(name))
				return (VariableDeclaration)getStmt(i);
		return null;
	}
	
}