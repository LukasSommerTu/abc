/*
 * When we rename a local variable, it is important to check that the new name does
 * not clash with the name of an already existing local variable. The method
 * canIntroduceLocal(id) checks whether a node and its children could be inside the scope
 * of a local variable named id.
 * 
 * The method canIntroduceLabel(id) does the same for labels.
 */

aspect LocalVarNesting {
	
	// check whether this subtree contains a conflicting local declaration
	public boolean ASTNode.canIntroduceLocal(String name) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null && !child.canIntroduceLocal(name))
				return false;
		}
		return true;
	}
	
	// TODO: this should only be defined once, on LocalDeclaration
	public boolean ParameterDeclaration.canIntroduceLocal(String name) {
		if(name.equals(name()))
			return false;
		return super.canIntroduceLocal(name);
	}
	public boolean VariableDeclaration.canIntroduceLocal(String name) {
		if(name.equals(name()))
			return false;
		return super.canIntroduceLocal(name);
	}
	
	public boolean TypeDecl.canIntroduceLocal(String name) {
		return true;
	}
	
	// check whether this subtree contains a conflicting label
	public boolean ASTNode.canIntroduceLabel(String name) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null)
				if(!child.canIntroduceLabel(name))
					return false;
		}
		return true;
	}
	
	public boolean LabeledStmt.canIntroduceLabel(String name) {
		if(name.equals(getLabel()))
			return false;
		return super.canIntroduceLabel(name);
	}
}