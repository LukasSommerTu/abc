/*
 * a naming context provides information about naming at a certain point in
 * the AST
 */

aspect NamingContext {
	
	abstract class NamingContext {
		public abstract boolean isStatic();
		public abstract TypeDecl enclosingType();
		public abstract NamingContext unqualifiedCtxt();
		
		public boolean isShadowed(PackageAccess pkg, boolean ambiguous) {
			String fst = pkg.packageName().split("\\.")[0];
			return ambiguous && 
				(!lookupType(fst).isEmpty() || !lookupVariable(fst).isEmpty()); 
		}
		
		public boolean isShadowed(TypeDecl td, boolean ambiguous) {
			if(ambiguous && !lookupVariable(td.name()).isEmpty())
				return true;
			return !lookupType(td.name()).contains(td);
		}
		
		public abstract SimpleSet lookupType(String name);
		public abstract SimpleSet lookupVariable(String name);
		public abstract Access accessType(TypeDecl td, boolean ambiguous);
	}
	
	public NamingContext Expr.getNamingContext() {
		return new NamingContext() {
			public boolean isStatic() { return inStaticContext(); }
			public TypeDecl enclosingType() { return hostType(); }
			public NamingContext unqualifiedCtxt() { return this; }
			public SimpleSet lookupType(String name) { return Expr.this.lookupType(name); }
			public SimpleSet lookupVariable(String name) { return Expr.this.lookupVariable(name); }
			public Access accessType(TypeDecl td, boolean ambiguous) {
				return Expr.this.access(td, ambiguous);
			}
		};
	}

	inh boolean Stmt.inStaticContext();
	public NamingContext Stmt.getNamingContext() {
		return new NamingContext() {
			public boolean isStatic() { return inStaticContext(); }
			public TypeDecl enclosingType() { return hostType(); }
			public NamingContext unqualifiedCtxt() { return this; }
			public SimpleSet lookupType(String name) { return Stmt.this.lookupType(name); }
			public SimpleSet lookupVariable(String name) { return Stmt.this.lookupVariable(name); }
			public Access accessType(TypeDecl td, boolean ambiguous) {
				return Stmt.this.access(td, ambiguous);
			}
		};
	}
	
	public NamingContext Access.getNamingContext() {
		return new NamingContext() {
			public boolean isStatic() { return inStaticContext(); }
			public TypeDecl enclosingType() { return hostType(); }
			public NamingContext unqualifiedCtxt() {
				return Access.this.unqualifiedScope().getNamingContext();
			}
			public SimpleSet lookupType(String name) { 
				return Access.this.lookupType(name); 
			}
			public SimpleSet lookupVariable(String name) { 
				return Access.this.lookupVariable(name); 
			}
			public Access accessType(TypeDecl td, boolean ambiguous) {
				return Access.this.access(td, ambiguous);
			}
		};
	}
	
	inh boolean BodyDecl.inStaticContext();
	public NamingContext BodyDecl.getNamingContext() {
		return new NamingContext() {
			public boolean isStatic() { return inStaticContext(); }
			public TypeDecl enclosingType() { return hostType(); }
			public NamingContext unqualifiedCtxt() { return this; }
			public SimpleSet lookupType(String name) { return BodyDecl.this.lookupType(name); }
			public SimpleSet lookupVariable(String name) { return BodyDecl.this.lookupVariable(name); }
			public Access accessType(TypeDecl td, boolean ambiguous) {
				return BodyDecl.this.access(td, ambiguous);
			}
		};
	}
	
	public NamingContext TypeDecl.getMemberNamingContext() {
		return new NamingContext() {
			public boolean isStatic() { return TypeDecl.this.isStatic(); }
			public TypeDecl enclosingType() { return TypeDecl.this; }
			public NamingContext unqualifiedCtxt() { return this; }
			// BAD: this is (pretty much) c-n-p-ed from LookupType.jrag
			public SimpleSet lookupType(String name) {
			    SimpleSet c = memberTypes(name);
			    if(!c.isEmpty()) return c;
			    return TypeDecl.this.lookupType(name);
		    }
			// BAD: this is c-n-p-ed from LookupVariable.jrag
			public SimpleSet lookupVariable(String name) {
				SimpleSet list = memberFields(name);
				if(!list.isEmpty()) return list;
				list = TypeDecl.this.lookupVariable(name);
				if(inStaticContext() || isStatic())
					list = removeInstanceVariables(list);
				else if(isAnonymous() && inExplicitConstructorInvocation()) {
					TypeDecl typeDecl = enclosingType();
					SimpleSet newSet = SimpleSet.emptySet;
					for(Iterator iter = list.iterator(); iter.hasNext(); ) {
						Variable v = (Variable)iter.next();
						if(!v.isInstanceVariable() || !typeDecl.memberFields(name).contains(v))
							newSet = newSet.add(v);
					}
					return newSet;
				}
				return list;
			}
			public Access accessType(TypeDecl td, boolean ambiguous) {
				return TypeDecl.this.accessTypeFromInside(td, ambiguous);
			}
		};
	}
	
}
