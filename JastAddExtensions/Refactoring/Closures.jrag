aspect Closures {
	public void ClosureInvocation.toString(StringBuffer s) {
		s.append("(Î» (");
		if(getNumParameter() > 0) {
			getParameter(0).toString(s);
			for(int i = 1; i < getNumParameter(); i++) {
				s.append(", ");
				getParameter(i).toString(s);
			}
		}
		s.append(") : ");
		getReturnType().toString(s);
		if(getNumException() > 0) {
			s.append(" throws ");
			getException(0).toString(s);
			for(int i = 1; i < getNumException(); i++) {
				s.append(", ");
				getException(i).toString(s);
			}
		}
		s.append(" ");
		getBlock().toString(s);
		s.append(")@");
		s.append("(");
		if(getNumArg() > 0) {
			getArg(0).toString(s);
			for(int i = 1; i < getNumArg(); i++) {
				s.append(", ");
				getArg(i).toString(s);
			}
		}
		s.append(")");
	}
	
	// equations for some attributes defined elsewhere
	eq ClosureInvocation.getParameter().getBlock() = getBlock();

	eq ClosureInvocation.getParameter().canRenameTo(String new_name) {
		if(!parameterDeclaration(new_name).isEmpty())
			return new RefactoringException("parameter of the same name exists");
		if(!getBlock().canIntroduceLocal(new_name))
			return new RefactoringException("local variable of the same name exists");
	}

	// we're not interested in reachability checking for closure invocations
	eq ClosureInvocation.getBlock().reachable() = true;

	eq ClosureInvocation.type() = getReturnType().type();

	eq ClosureInvocation.isPureCFlowNode() = true;

	// control flow for closure invocations
	inh SmallSet<ASTNode> ClosureInvocation.throwTarget(TypeDecl exn);
	eq ClosureInvocation.first() = getNumArg() == 0 ? getBlock() : getArg(0).first();
	syn ASTNode ClosureInvocation.entry() = getBlock();
	syn ASTNode ClosureInvocation.exit() = this;
	eq ClosureInvocation.getArg(int i).following() 
	  = i < getNumArg()-1 ? singleNode(getArg(i+1).first()) 
			  			  : singleNode(getBlock());
	eq ClosureInvocation.getBlock().following() = singleNode(exit());
	eq ClosureInvocation.getReturnType().following() = singleNode(exit());
	/*eq ClosureInvocation.succ() {
		SmallSet<ASTNode> res = following();
		for(Access exn : getExceptions())
			res = res.union(throwTarget(exn.type()));
		res = res.union(uncheckedExnTarget());
		return res;
	}*/

	eq ClosureInvocation.getChild().breakTarget(BreakStmt stmt) = SmallSet.empty();
	eq ClosureInvocation.getChild().continueTarget(ContinueStmt stmt) = SmallSet.empty();
	eq ClosureInvocation.getChild().returnTarget() = singleNode(getReturnType());
	eq ClosureInvocation.getChild().throwTarget(TypeDecl exn) = throwTarget(exn);

	// all return statements inside the closure
	syn lazy SmallSet<ASTNode> ClosureInvocation.returns() = getReturnType().pred();
	// all final, non-return nodes inside the closure
	syn lazy SmallSet<ASTNode> ClosureInvocation.finals() {
    	SmallSet<ASTNode> res = SmallSet.empty();
    	for(ASTNode n : pred()) {
    		if(n == getReturnType() || n instanceof Stmt && !((Stmt)n).canCompleteNormally())
    			continue;
    		res = res.union(n);
    	}
		return res;  
	}

	// lookup and access is done as for methods
	eq ClosureInvocation.getBlock().lookupVariable(String name) {
		SimpleSet set = parameterDeclaration(name);
		if(!set.isEmpty()) return set;
		return lookupVariable(name);
	}
	eq ClosureInvocation.getParameter().lookupVariable(String name) 
	  = parameterDeclaration(name);
	
	syn SimpleSet ClosureInvocation.parameterDeclaration(String name) {
		for(int i = 0; i < getNumParameter(); i++)
			if(getParameter(i).name().equals(name))
				return (ParameterDeclaration)getParameter(i);
		return SimpleSet.emptySet;
	}
	
	eq ClosureInvocation.getBlock().accessVariable(Variable decl) {
		VarAccessInfo acc = accessParameterDeclaration(decl);
		if(acc != null) return acc;
		acc = accessVariable(decl);
		if(acc != null)
			return acc.moveInto(this);
		return null;
	}
	eq ClosureInvocation.getParameter().accessVariable(Variable decl) = 
		accessParameterDeclaration(decl);
	
	syn VarAccessInfo ClosureInvocation.accessParameterDeclaration(Variable decl) {
		for(ParameterDeclaration d : getParameters())
			if(d == decl)
				return new LocalVarAccessInfo(decl);
		return null;
	}
	
	ClosureInvocation implements LocalScope;
	public boolean ClosureInvocation.hasVariable(String name) {
		return parameterDeclaration(name) != SimpleSet.emptySet;
	}	

	syn lazy boolean ParameterDeclaration.isIn()
	  = !isOut() && !isRef();
	syn lazy boolean ParameterDeclaration.isOut() 
	  = getModifiers().numModifier("out") != 0;
	syn lazy boolean ParameterDeclaration.isRef()
	  = getModifiers().numModifier("ref") != 0;
	
	// find argument for parameter
	public Expr ClosureInvocation.lookupArg(String parmname) {
		for(int i = 0; i < getNumParameter(); ++i)
			if(getParameter(i).name().equals(parmname))
				return getArg(i);
		return null;
	}
}