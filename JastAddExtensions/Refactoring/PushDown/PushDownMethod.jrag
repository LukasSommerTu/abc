aspect PushDownMethod {
	public void MethodDecl.pushDown(boolean leaveAbstract) {
		if(!fromSource())
			throw new RefactoringException("cannot push library method");
		if(isAbstract())
			pushDownAbstract(leaveAbstract);
		else if(isPrivate() || isStatic())
			pushDownMono(leaveAbstract);
		else
			pushDownVirtual(leaveAbstract);
	}
	
	public void MethodDecl.pushDownAbstract(boolean leaveAbstract) {
		MethodDecl md = this;
		for(TypeDecl child : hostType().childTypes()) {
			if(!child.localMethodsSignature(md.signature()).isEmpty())
				continue;
			child.makeAbstract();
			md.lockAllNames();
			MethodDecl md2 = md;
			md = (MethodDecl)md.fullCopy();
			md2.replaceWith(md);
			if(md.hostType().isInterfaceDecl() && !child.isInterfaceDecl())
				md2.getModifiers().addModifiers("public", "abstract");
			md.programRoot().lockMethodNames(md.name());
			child.addBodyDecl(md2);
			md.programRoot().flushCaches();
			md.programRoot().eliminateLockedNames();
		}
		md.removeUnused(leaveAbstract);		
	}
	
	public void MethodDecl.pushDownMono(boolean leaveAbstract) {
		MethodDecl md = this;
		md.unfoldSynchronized();
		for(TypeDecl child : hostType().childTypes()) {
			if(!child.localMethodsSignature(md.signature()).isEmpty() || md.isStatic() && child.isInnerClass())
				throw new RefactoringException("cannot insert method here");
			md.lockAllNames();
			MethodDecl md2 = md;
			md = (MethodDecl)md.fullCopy();
			md2.replaceWith(md);
			md.programRoot().lockMethodNames(md.name());
			child.addBodyDecl(md2);
			md2.foldSynchronized();
			md.programRoot().flushCaches();
			md.programRoot().eliminateLockedNames();
		}
		md.removeUnused(leaveAbstract);
	}
	
	public void MethodDecl.pushDownVirtual(boolean leaveAbstract) {
		ASTNode parent = getParent();
		int idx = parent.getIndexOfChild(this);
		MethodDecl md = this;
		for(TypeDecl child : hostType().childTypes()) {
			MethodAccess ma = child.triviallyOverrideInheritedMethod(md);
			MethodDecl md2 = (MethodDecl)ma.enclosingBodyDecl();
			ma.inline();
			md = (MethodDecl)parent.getChild(idx);
			child.eliminate(WITH_STMT, FRESH_VARIABLES);
			md2.foldSynchronized();
		}
		md.removeUnused(leaveAbstract);
	}
	
	public void MethodDecl.doPushDown(boolean leaveAbstract) {
		Program root = programRoot();
		pushDown(leaveAbstract);
		root.eliminate(RETURN_VOID, LOCKED_NAMES, LOCKED_DATAFLOW);
	}
	
	public MethodAccess TypeDecl.triviallyOverrideInheritedMethod(MethodDecl md) {
		throw new RefactoringException("cannot override in this kind of type");
	}
	
	public MethodAccess ClassDecl.triviallyOverrideInheritedMethod(MethodDecl md) {
		if(md.isAbstract() || md.isFinal())
			throw new RefactoringException("cannot override this method");
		MethodDecl new_md = md.lockedCopyWithEmptyBody();
		List<Expr> args = new List<Expr>();
		for(ParameterDeclaration pd : new_md.getParameters())
			args.add(new VarAccess(pd.name()));
		MethodAccess lockedAccess = new MethodAccess(md, args);
		ReturnStmt ret = new ReturnStmt(new AbstractDot(new SuperAccess("super"), lockedAccess));
		new_md.setBlock(new Block(new List<Stmt>().add(ret)));
		if(!localMethodsSignature(md.signature()).isEmpty())
			throw new RefactoringException("local method of the same name exists");
		addBodyDecl(new_md);
		programRoot().flushCaches();
		return lockedAccess; 
	}
	
	public MethodDecl MethodDecl.lockedCopyWithEmptyBody() {
		Modifiers mods = (Modifiers)getModifiers().fullCopy();
		mods.removeModifiers("synchronized");
		Access rettype = type().createLockedAccess();
		String name = name();
		List<ParameterDeclaration> parms = new List<ParameterDeclaration>();
		for(ParameterDeclaration pd : getParameters())
			parms.add(pd.lockedCopy());
		List<Access> exns = new List<Access>();
		for(Access exn : getExceptions())
			exns.add(exn.type().createLockedAccess());
		return new MethodDecl(mods, rettype, name, parms, exns, new Opt<Block>());
	}
	
	public MethodDecl GenericMethodDecl.lockedCopyWithEmptyBody() {
		Modifiers mods = (Modifiers)getModifiers().fullCopy();
		mods.removeModifiers("synchronized");
		Access rettype = type().createLockedAccess();
		String name = name();
		List<ParameterDeclaration> parms = new List<ParameterDeclaration>();
		for(ParameterDeclaration pd : getParameters())
			parms.add(pd.lockedCopy());
		List<Access> exns = new List<Access>();
		for(Access exn : getExceptions())
			exns.add(exn.type().createLockedAccess());
		List<TypeVariable> typeparms = (List<TypeVariable>)getTypeParameters();
		return new GenericMethodDecl(mods, rettype, name, parms, exns, new Opt<Block>(), typeparms);		
	}
	
	public MethodDecl AnnotationMethodDecl.lockedCopyWithEmptyBody() { throw new UnsupportedOperationException(); }
	public MethodDecl BridgeMethodDecl.lockedCopyWithEmptyBody() { throw new UnsupportedOperationException(); }
	public MethodDecl IntertypeMethodDecl.lockedCopyWithEmptyBody() { throw new UnsupportedOperationException(); }
	public MethodDecl IntroducedMethodDecl.lockedCopyWithEmptyBody() { throw new UnsupportedOperationException(); }
	public MethodDecl MethodDeclSubstituted.lockedCopyWithEmptyBody() { throw new UnsupportedOperationException(); }
	public MethodDecl RawMethodDecl.lockedCopyWithEmptyBody() { throw new UnsupportedOperationException(); }
}