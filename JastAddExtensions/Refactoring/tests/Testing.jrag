/*
 * some extensions to ease testing
 */

aspect Testing {
	
	public Program Frontend.getProgram() {
		return program;
	}
	
	// sort compilation units alphabetically before printing; this helps when comparing results
	refine PrettyPrint public void Program.toString(StringBuffer s) {
		ArrayList<CompilationUnit> cus = new ArrayList<CompilationUnit>();
		for(Iterator<CompilationUnit> iter = compilationUnitIterator(); iter.hasNext();) {
			CompilationUnit cu = iter.next();
			if(cu.fromSource())
				cus.add(cu);
		}
		Collections.sort(cus, new Comparator<CompilationUnit>() {
			public int compare(CompilationUnit cu1, CompilationUnit cu2) {
				String id1 = cu1.getPackageDecl() + "." + cu1.getID();
				String id2 = cu2.getPackageDecl() + "." + cu2.getID();
				return id1.compareTo(id2);
			} 
		});  
		for(CompilationUnit cu : cus)
			cu.toString(s);
	}
	
	syn String BodyDecl.ppID() = "";
	eq ConstructorDecl.ppID() = name();
	eq FieldDeclaration.ppID() = name();
	eq MemberTypeDecl.ppID() = typeDecl().name();
	eq MethodDecl.ppID() = name();
	
	refine PrettyPrint protected void TypeDecl.ppBodyDecls(StringBuffer s) {
		ArrayList<BodyDecl> bds = new ArrayList<BodyDecl>();
		for(int i=0;i<getNumBodyDecl();++i)
			bds.add(getBodyDecl(i));
		Collections.sort(bds, new Comparator<BodyDecl>() {
			public int compare(BodyDecl bd1, BodyDecl bd2) {
				return bd1.ppID().compareTo(bd2.ppID());
			}
		});
		s.append("  {");
		for(BodyDecl bd : bds)
			bd.toString(s);
		s.append(indent() + "}");
	}
	
	refine PrettyPrint public void Modifiers.toString(StringBuffer s) {
		ArrayList<Modifier> mods = new ArrayList<Modifier>();
		for(Modifier mod : getModifiers())
			mods.add(mod);
		Collections.sort(mods, new Comparator<Modifier>() {
			public int compare(Modifier mod1, Modifier mod2) {
				return mod1.getID().compareTo(mod2.getID());
			}
		});
		for(Modifier mod : mods) {
			mod.toString(s);
			s.append(" ");
		}
	}
	
	refine GenericsPrettyPrint private void GenericClassDecl.ppTypeParameters(StringBuffer s) {
		ArrayList<TypeVariable> typeparms = new ArrayList<TypeVariable>();
		for(TypeVariable tv : getTypeParameters())
			typeparms.add(tv);
		Collections.sort(typeparms, new Comparator<TypeVariable>() {
			public int compare(TypeVariable tv1, TypeVariable tv2) {
				return tv1.name().compareTo(tv2.name());
			}
		});
	    s.append('<');
	    if(typeparms.size() > 0) {
	    	typeparms.get(0).toString(s);
	    	for (int i=1; i < typeparms.size(); i++) {
	    		s.append(", ");
	    		typeparms.get(i).toString(s);
	    	}
	    }
	    s.append('>');
	}
	
	refine GenericMethods private void GenericMethodDecl.ppTypeParameters(StringBuffer s) {
		ArrayList<TypeVariable> typeparms = new ArrayList<TypeVariable>();
		for(TypeVariable tv : original().getTypeParameters())
			typeparms.add(tv);
		Collections.sort(typeparms, new Comparator<TypeVariable>() {
			public int compare(TypeVariable tv1, TypeVariable tv2) {
				return tv1.name().compareTo(tv2.name());
			}
		});
	    s.append(" <");
	    for(int i = 0; i < typeparms.size(); i++) {
	      if(i != 0) s.append(", ");
	      typeparms.get(i).toString(s);
	    }
	    s.append("> ");		
	}
	
	// output names of compilation units; this helps when comparing results
	public static boolean CompilationUnit.printCUNames = false;
	refine PrettyPrint public void CompilationUnit.toString(StringBuffer s) {
		if(printCUNames)
			s.append("compilation unit "+getID()+"\n");
	    try {
	        if(!getPackageDecl().equals("")) {
	          s.append("package " + getPackageDecl() + ";\n");
	        }
	        for(int i = 0; i < getNumImportDecl(); i++) {
	          getImportDecl(i).toString(s);
	        }
			ArrayList<TypeDecl> tds = new ArrayList<TypeDecl>();
			for(int i=0;i<getNumTypeDecl();++i)
				tds.add(getTypeDecl(i));
			Collections.sort(tds, new Comparator<TypeDecl>() {
				public int compare(TypeDecl td1, TypeDecl td2) {
					return td1.name().compareTo(td2.name());
				}
			});
	        for(TypeDecl td : tds) {
	          td.toString(s);
	          s.append("\n");
	        }
	      } catch (NullPointerException e) {
	        System.out.print("Error in compilation unit hosting " + getTypeDecl(0).typeName());
	        throw e;
	      }
	}
	
	// find a type given its package and name (both may contains dots)
	public TypeDecl Program.findType(String pkg, String name) {
		String path[] = name.split("\\.");
		TypeDecl tp = lookupType(pkg, path[0]);
		if(tp == null) return null;
		for(int i=1;i<path.length;++i) {
			Iterator<TypeDecl> iter = tp.memberTypes(path[i]).iterator();
			if(!iter.hasNext()) return null;
			tp = iter.next();
		}
		return tp;
	}
	
	// find a type given its name (may contain dots)
	public TypeDecl Program.findType(String name) {
		String path[] = name.split("\\.");
		TypeDecl tp = findSimpleType(path[0]);
		if(tp == null) return null;
		for(int i=1;i<path.length;++i) {
			Iterator<TypeDecl> iter = tp.memberTypes(path[i]).iterator();
			if(!iter.hasNext()) return null;
			tp = iter.next();
		}
		return tp;		
	}
	
	public TypeDecl ASTNode.findSimpleType(String name) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null) {
				TypeDecl td = child.findSimpleType(name);
				if(td != null) return td;
			}
		}
		return null;
	}
	
	public TypeDecl TypeDecl.findSimpleType(String name) {
		if(name().equals(name))
			return this;
		return super.findSimpleType(name);
	}
	
	public LocalClassDeclStmt ASTNode.findLocalClass(String name) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null) {
				LocalClassDeclStmt lcd = child.findLocalClass(name);
				if(lcd!=null) return lcd;
			}
		}
		return null;
	}
	
	public LocalClassDeclStmt LocalClassDeclStmt.findLocalClass(String name) {
		if(getClassDecl().name().equals(name))
			return this;
		return super.findLocalClass(name);
	}
	
	// find a variable given its simple name
	public Variable ASTNode.findVariable(String name) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null) {
				Variable v = child.findVariable(name);
				if(v != null) return v;
			}
		}
		return null;		
	}
	
	public Variable Variable.findVariable(String name) {
		if(name().equals(name))
			return this;
		return super.findVariable(name);
	}
	
	// find a local variable given its simple name
	public VariableDeclaration ASTNode.findLocalVariable(String name) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null) {
				VariableDeclaration v = child.findLocalVariable(name);
				if(v != null) return v;
			}
		}
		return null;		
	}
	
	public VariableDeclaration VariableDeclaration.findLocalVariable(String name) {
		if(name().equals(name))
			return this;
		return super.findLocalVariable(name);
	}
	
	// find a method given its name
	public MethodDecl ASTNode.findMethod(String name) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null) {
				MethodDecl md = child.findMethod(name);
				if(md != null) return md;
			}
		}
		return null;		
	}
	
	public MethodDecl MethodDecl.findMethod(String name) {
		if(name().equals(name))
			return this;
		return super.findMethod(name);
	}
	
	// find a field given its name
	public FieldDeclaration ASTNode.findField(String name) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null) {
				FieldDeclaration md = child.findField(name);
				if(md != null) return md;
			}
		}
		return null;		
	}
	
	public FieldDeclaration FieldDeclaration.findField(String name) {
		if(name().equals(name))
			return this;
		return super.findField(name);
	}
	
	// find a doubly-parenthesised expression
	public Expr ASTNode.findDoublyParenthesised() {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null) {
				Expr e = child.findDoublyParenthesised();
				if(e != null) return e;
			}
		}
		return null;
	}
	
	public Expr ParExpr.findDoublyParenthesised() {
		if(getExpr() instanceof ParExpr)
			return ((ParExpr)getExpr()).getExpr();
		return super.findDoublyParenthesised();
	}
	
	// find a statement with a given label
	public LabeledStmt ASTNode.findStmtWithLabel(String l) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null) {
				LabeledStmt s = child.findStmtWithLabel(l);
				if(s != null) return s;
			}
		}
		return null;
	}
	
	public LabeledStmt LabeledStmt.findStmtWithLabel(String l) {
		if(getLabel().equals(l))
			return this;
		return super.findStmtWithLabel(l);
	}
	
	public Stmt LabeledStmt.unlabel() {
		Stmt s = getStmt();
		replaceWith(s);
		return s;
	}
	
	public void Expr.unparenthesise() {
		if(getParent() instanceof ParExpr) {
			getParent().replaceWith(this);
			unparenthesise();
		}
	}
}