Running Tests from Command Line:
================================

If you want to run a test, go to subdirectory 'data' and execute

  java -cp ../..:../../tools/junit.jar junit.textui.TestRunner tests.<TestName>

where TestName is one of the following (alternatively, just say 'runtest.sh <TestName>' in this directory):

- AccessTypeTests: test aspect AccessType
- AccessFieldTests: test aspect AccessField
- AccessTests: all of the above three
- RenameVariableTests: test aspect RenameField and RenameLocalVariable
- RenameMethodTests: test aspect RenameMethod
- RenameTypeTests: test aspect RenameType
- RenameTests: all of the above three
- RenameVariableITDTests: similar to RenameVariableTests, but includes ITDs
- RenameMethodITDTests: similar to RenameMethodTests, but includes ITDs
- RenameTypeITDTests: similar to RenameTypeTests, but includes ITDs
- RenameTestsITD: all of the above three
- EncapsulationTests: test field encapsulation
- ExtractionTests: test method extraction
- AllTests: all of the above

Running Tests from Eclipse:
===========================

From the menu "Run", select "Run...". Double click on "JUnit" to create a
new JUnit test. Fill in its name (for example "Rename Type") and its test class
(for example "tests.RenameTypeTests"). Then, in the "Arguments" section, set
its working directory to "Other" and enter 
"${workspace_loc:Refactoring}/tests/data" into the text field. Now click "Apply"
and "Run".

Interesting Test Cases:
=======================

For test cases on which Eclipse performs faulty refactorings see the Eclipse bugs homepage at http://progtools.comlab.ox.ac.uk/projects/refactoring/bugreports/eclipse.

Furthermore, Eclipse cannot refactor the following test cases, whereas our implementation can:

  Rename Variable: tests 14, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 38
  Rename Method:   tests  9, 12, 14, 15, 18, 19, 20, 22, 23, 28, 33
  Rename Type:     tests 62, 80, 81, 89, 90

The layout of all test cases except for the AccessType and AccessField tests is as follows:

  in/: this subdirectory contains input files; the main file is usually called
       A.java
  out/: what the input files should look like after refactoring; empty or
       non-existent if the refactoring is supposed to fail

The first line of A.java indicates what refactoring to perform. While the format is slightly different for the different refactorings, it usually first indicates which files participate in the refactoring (if there is more than one, they are separated by commata). Then follows information about the entity to refactor, e.g. package, type and field name for a rename field refactoring. For the renamings, this is followed by the name to rename the entity to; for method extraction, a range of line numbers to extract is given.
