aspect UndoLocking {

	// Locked Method Access
	
	refine LockedMethodAccess private SavedMethodDecl MethodAccess.setTargetMethod(SavedMethodDecl smd) {
		if (Program.isRecordingASTChanges()) {
			final SavedMethodDecl saved = targetMethod;
			Program.addUndoAction(new ASTModification() {
				
				@Override
				public void undo() {
					targetMethod = saved;
				}
			});
		}
		return refined(smd);
	}

	refine LockedMethodAccess private MethodDecl ElementValuePair.setTargetMethod(MethodDecl md) {
		if (Program.isRecordingASTChanges()) {
			final MethodDecl saved = targetMethod;
			Program.addUndoAction(new ASTModification() {
				
				@Override
				public void undo() {
					targetMethod = saved;
				}
			});
		}
		return refined(md);
	}
	
	
	// Locked Package Access
	
	refine LockedPackageAccess private void PackageAccess.setTargetPackage(PackageDecl pd) {
		if (Program.isRecordingASTChanges()) {
			final PackageDecl saved = targetPackage;
			Program.addUndoAction(new ASTModification() {
				
				@Override
				public void undo() {
					targetPackage = saved;
				}
			});
		}
		refined(pd);
	}
	
	
	// LockedVariableAccess
	refine LockedVariableAccess private void VarAccess.setTargetVariable(Variable var) {
		if (Program.isRecordingASTChanges()) {
			final Variable saved = targetVariable;
			Program.addUndoAction(new ASTModification() {
				
				@Override
				public void undo() {
					targetVariable = saved;
				}
			});
		}
		refined(var);
	}
	
	
	// LockedTypeAccess
	refine LockedTypeAccess private void CompilationUnit.setLocked(boolean value) {
		if (Program.isRecordingASTChanges()) {
			final boolean saved = locked;
			Program.addUndoAction(new ASTModification() {
				
				@Override
				public void undo() {
					locked = saved;
				}
			});
		}
		refined(value);
	}
	refine LockedTypeAccess private void TypeAccess.setTargetType(TypeDecl td) {
		if (Program.isRecordingASTChanges()) {
			final TypeDecl saved = targetType;
			Program.addUndoAction(new ASTModification() {
				
				@Override
				public void undo() {
					targetType = saved;
				}
			});
		}
		refined(td);
	}
	
	// LockedConstructor
	refine LockedConstructor private void ConstructorDecl.setLocked(boolean value) {
		if (Program.isRecordingASTChanges()) {
			final boolean saved = locked;
			Program.addUndoAction(new ASTModification() {
				
				@Override
				public void undo() {
					locked = saved;
				}
			});
		}
		refined(value);
	}
	
	// LockedSingleStaticImportDecl
	refine LockedSingleStaticImportDecl private void SingleStaticImportDecl.setLocked(boolean value) {
		if (Program.isRecordingASTChanges()) {
			final boolean saved = locked;
			Program.addUndoAction(new ASTModification() {
				
				@Override
				public void undo() {
					locked = saved;
				}
			});
		}
		refined(value);
	}
	
	
	
	
	
	
	
	
}