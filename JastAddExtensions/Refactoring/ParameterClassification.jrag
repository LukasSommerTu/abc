aspect ParameterClassification {
	
	syn lazy boolean LocalDeclaration.isValueParmFor(Stmt begin, Stmt end) {
		return isLiveBetween(begin, end);
	}
	
	syn lazy boolean LocalDeclaration.isOutParmFor(Stmt begin, Stmt end) {
		return isLiveAfter(end) && mayDefBetween(begin, end);
	}
	
	syn lazy boolean LocalDeclaration.shouldMoveOutOf(Stmt begin, Stmt end) =
		between(begin, end)	&& accessedAfter(end);
	
	syn lazy boolean LocalDeclaration.shouldMoveInto(Stmt begin, Stmt end);
	
	eq VariableDeclaration.shouldMoveInto(Stmt begin, Stmt end) =
		!between(begin, end) && !isValueParmFor(begin, end);
	
	eq ParameterDeclaration.shouldMoveInto(Stmt begin, Stmt end) = false;
	
	syn lazy boolean LocalDeclaration.shouldDuplicate(Stmt begin, Stmt end) {
		return (shouldMoveInto(begin, end) || between(begin, end))
					&& accessedOutside(begin, end);
	}
	
	syn lazy Set Block.uncaughtThrowsBetween(Stmt begin, Stmt end) {
		Set uncaughtThrows = Set.empty();
		int begin_idx = begin.indexInBlock(this);
		int end_idx = end.indexInBlock(this);
		for (int i = begin_idx; 0 <= i && i <= end_idx; ++i) {
			Stmt child = getStmt(i);
			uncaughtThrows = uncaughtThrows.union(getStmt(i).uncaughtThrows());
		}
		return uncaughtThrows;
	}
	
}