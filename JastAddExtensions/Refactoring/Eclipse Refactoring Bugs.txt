1. Rename Package Doesn't Check for Name Clashes with Classes

   Input:
     package p;
     class r { ... }

     package p.q;
     ...

   Eclipse allows renaming package p.q to p.r, which results in
   uncompilable code due to a name clash with class r.

   Reported as bug 208200.

2. Encapsulate Field Doesn't Check for Hiding of Method

   Input:
     class A {
       void getI(String s) { }
       class C { class B { void m() { getI(""); } } private int i; }
     }

   When encapsulating field C.i, Eclipse generates a getter method
   getI() in class C which shadows the access in method C.B.m() and
   leads to uncompilable code.

   Found by Torbj√∂rn. Reported as bug 209315 (which turned out to be a
   duplicate of bug 194997).

3. Encapsulate Field Doesn't Correctly Diagnose Overloading Problems

   Input:
     class A {
       public int i;
     }
     class B extends A {
       public int getI() { return 42; }
       public static void main(String[] args) {
         A a = new B();
	 a.i = 23; 
	 System.out.println("i == "+a.i);
       }
     }

   This code prints "i == 23", as it should. Now we can encapsulate field
   A.i, yielding the following code:

     class A {
       private int i;
       public void setI(int i) { this.i = i; }
       public int getI() { return i; }
     }

     class B extends A {
       public int getI() { return 42; }
       public static void main(String[] args) {
         A a = new B();
	 a.setI(23);
	 System.out.println("i == "+a.getI());
     }

   This code compiles and prints "i == 42". Eclipse doesn't even warn
   of any possible clashes.

   Reported as bug 209316.

4. Encapsulate Field Doesn't Check for Invalid Overloading 
   (closely related to 3)

   Input:
     class A {
       public int i;
     }
     class B extends A {
       private int getI() { return 42; }
     }

   Encapsulating field A.i generates a public getter method A.getI() which
   cannot be overloaded by B.getI(), resulting in a compiler error. The
   same kind of problem occurs if, say, B.getI() would be declared as having
   return type "float".

   Reported as bug 209317 (which turned out to be a duplicate of bug 194996).
