aspect ChangeAccessibility {
	public void Visible.changeAccessibility(int v) {
		// check: array decls?
		if(!fromSource())
			throw new RefactoringException("cannot change accessibility of non-source type");
		Collection<AccessibilityConstraint> constraints = programRoot().accessibilityConstraints();
		constraints.add(new AccessibilityConstraint(this, this, Operator.EQ, v));
		Map<Visible, Integer> acc_map = programRoot().solve(constraints);
		if(acc_map == null) {
			throw new RefactoringException("no solution found");
		} else {
			for(Map.Entry<Visible, Integer> e : acc_map.entrySet()) {
				Visible vis = e.getKey();
				// TODO: hide this behind an interface
				if(vis instanceof FieldDeclaration) {
					FieldDeclaration fd = (FieldDeclaration)vis;
					programRoot().lockNames(fd.name());
				} else if(vis instanceof MethodDecl) {
					MethodDecl md = (MethodDecl)vis;
					programRoot().lockMethodNames(md.name());
				} else if(vis instanceof TypeDecl) {
					TypeDecl td = (TypeDecl)vis;
					programRoot().lockNames(td.name());
				}
				vis.setVisibility(e.getValue());
			}
			programRoot().eliminate(LOCKED_NAMES);
		}
	}
	
	/* code for integrating Change Accessibility with name unlocking to make it more powerful (makes it really slow as well) */
	public void Program.eliminateLockedNames() {
		adjustAccessibility();
		flushCaches();
		super.eliminateLockedNames();
	}
	
	private void Program.adjustAccessibility() {
		Collection<AccessibilityConstraint> accessibilityConstraints = accessibilityConstraints();
		boolean all_solved = true;
		for(AccessibilityConstraint ac : accessibilityConstraints) {
			if(!ac.isSolved()) {
				all_solved = false;
				break;
			}
		}
		if(all_solved)
			return;
		Map<Visible, Integer> acc_map = solve(accessibilityConstraints);
		if(acc_map == null)
			// we could throw an exception here, but having unlocking fail instead will give nicer error messages
			return;
		for(Map.Entry<Visible, Integer> e : acc_map.entrySet()) {
			Visible vis = e.getKey();
			// TODO: hide this behind an interface
			if(vis instanceof FieldDeclaration) {
				FieldDeclaration fd = (FieldDeclaration)vis;
				programRoot().lockNames(fd.name());
			} else if(vis instanceof MethodDecl) {
				MethodDecl md = (MethodDecl)vis;
				programRoot().lockMethodNames(md.name());
			} else if(vis instanceof TypeDecl) {
				TypeDecl td = (TypeDecl)vis;
				programRoot().lockNames(td.name());
			}
			vis.setVisibility(e.getValue());
		}
	}
}