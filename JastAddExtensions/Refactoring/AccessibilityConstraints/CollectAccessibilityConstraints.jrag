aspect CollectConstraints {
	coll Collection<AccessibilityConstraint> Program.accessibilityConstraints() [new LinkedHashSet<AccessibilityConstraint>()]
	                                         with addAll root Program;
	
	// Acc-1
	TypeAccess contributes Collections.singleton(new AccessibilityConstraint(this, decl().minAccess(this), decl()))
	           to Program.accessibilityConstraints()
	           for programRoot();
	
	VarAccess  contributes Collections.singleton(new AccessibilityConstraint(this, ((FieldDeclaration)decl()).minAccess(this), (FieldDeclaration)decl()))
	           when decl() instanceof FieldDeclaration
	           to Program.accessibilityConstraints()
	           for programRoot();
	
	MethodAccess contributes Collections.singleton(new AccessibilityConstraint(this, decl().minAccess(this), decl()))
    	       to Program.accessibilityConstraints()
    	       for programRoot();
	
	ConstructorAccess contributes Collections.singleton(new AccessibilityConstraint(this, decl().minAccess(this), decl()))
    		   to Program.accessibilityConstraints()
    		   for programRoot();
	
	ClassInstanceExpr contributes Collections.singleton(new AccessibilityConstraint(this, decl().minAccess(this), decl()))
	   		   to Program.accessibilityConstraints()
	   		   for programRoot();
	
	// Acc-2
	VarAccess  contributes Collections.singleton(new AccessibilityConstraint(this, ((FieldDeclaration)decl()), Operator.EQ, AccessModifierConstant.PUBLIC))
	           when isQualified() &&
	                decl() instanceof FieldDeclaration && 
	                !decl().isStatic() &&
	                ((FieldDeclaration)decl()).minAccess(hostPackage(), hostType()) == ASTNode.VIS_PROTECTED &&
	                !qualifier().type().instanceOf(hostType()) &&
	                !qualifier().isSuperAccess()
	           to Program.accessibilityConstraints()
	           for programRoot();
	
	MethodAccess contributes Collections.singleton(new AccessibilityConstraint(this, decl(), Operator.EQ, AccessModifierConstant.PUBLIC))
			   when isQualified() &&
			   		!decl().isStatic() &&
			   		decl().minAccess(hostPackage(), hostType()) == ASTNode.VIS_PROTECTED &&
			   		!qualifier().type().instanceOf(hostType())
			   to Program.accessibilityConstraints()
			   for programRoot();
	
	ClassInstanceExpr contributes Collections.singleton(new AccessibilityConstraint(this, decl(), Operator.EQ, AccessModifierConstant.PUBLIC))
	           when !hasTypeDecl() &&
	                !hostType().hostPackage().equals(decl().hostType().hostPackage())
	           to Program.accessibilityConstraints()
	           for programRoot();
	
	// Inh-1
	VarAccess contributes Collections.singleton(new AccessibilityConstraint(this, ((FieldDeclaration)decl()).minAccess(qualifier().type().hostPackage(), qualifier().type()),
																			Operator.LE, ((FieldDeclaration)decl())))
              when isQualified() && decl() instanceof FieldDeclaration
	          to Program.accessibilityConstraints()
	          for programRoot();
	
	MethodAccess contributes Collections.singleton(new AccessibilityConstraint(this, decl().minAccess(qualifier().hostPackage(), qualifier().hostType()),
			                                                                   Operator.LE, decl()))
              when isQualified()
    		  to Program.accessibilityConstraints()
    		  for programRoot();
	
	// constraints from method overriding
	MethodDecl contributes accessibilityConstraintsFromOverridingAndHiding()
			   to Program.accessibilityConstraints()
			   for programRoot();
	
	syn lazy Collection<AccessibilityConstraint> MethodDecl.accessibilityConstraintsFromOverridingAndHiding() {
		Collection<AccessibilityConstraint> constrs = new HashSet<AccessibilityConstraint>();
		// (Sub-1), (Sub-2), (Dyn-1)
		for(MethodDecl that : overriddenMethods()) {
			constrs.add(new AccessibilityConstraint(this, that, Operator.LE, this));
			constrs.add(new AccessibilityConstraint(this, that.minAccess(hostType().hostPackage(), hostType()), Operator.LE, that));
		}
		for(MethodDecl that : indirectlyOverriddenMethods()) {
			constrs.add(new AccessibilityConstraint(this, that, Operator.LE, this));
			// TODO: add corresponding second constraint; see above
		}
		// (Sub-1)
		for(MethodDecl that : hiddenMethods()) {
			constrs.add(new AccessibilityConstraint(this, that, Operator.LE, this));
		}
		// (Dyn-2)
		if(!isStatic()) {
			for(MethodDecl that : possiblyOverriddenAncestors()) {
				if(!this.overrides(that))
					constrs.add(new AccessibilityConstraint(this, that, Operator.LT, that.minAccess(hostType().hostPackage(), hostType())));
			}
		}
		return constrs;
	}
	
	// constraints for top-level types
	TypeDecl contributes Collections.singleton(new AccessibilityConstraint(this, this, Operator.NE, AccessModifierConstant.PRIVATE))
	         when fromSource() && isTopLevelType()
			 to Program.accessibilityConstraints()
			 for programRoot();
	
	TypeDecl contributes Collections.singleton(new AccessibilityConstraint(this, this, Operator.NE, AccessModifierConstant.PROTECTED))
    		 when fromSource() && isTopLevelType()
	 		 to Program.accessibilityConstraints()
	 		 for programRoot();
	
	TypeDecl contributes Collections.singleton(new AccessibilityConstraint(this, this, Operator.NE, AccessModifierConstant.PUBLIC))
	         when fromSource() && isTopLevelType() && !compilationUnit().getID().equals(name())
	 		 to Program.accessibilityConstraints()
	 		 for programRoot();
	
	// constraints for local classes
	TypeDecl contributes Collections.singleton(new AccessibilityConstraint(this, this, Operator.EQ, AccessModifierConstant.PACKAGE))
    		 when isLocalClass()
	 		 to Program.accessibilityConstraints()
	 		 for programRoot();
	
	// fields and methods in interfaces have to be public
	FieldDeclaration contributes Collections.singleton(new AccessibilityConstraint(this, this, Operator.EQ, AccessModifierConstant.PUBLIC))
	                 when hostType().isInterfaceDecl()
	                 to Program.accessibilityConstraints() for programRoot();
	
	MethodDecl contributes Collections.singleton(new AccessibilityConstraint(this, this, Operator.EQ, AccessModifierConstant.PUBLIC))
	           when hostType().isInterfaceDecl()
               to Program.accessibilityConstraints() for programRoot();
	
	// constructors in enums have to be private
	ConstructorDecl contributes Collections.singleton(new AccessibilityConstraint(this, this, Operator.EQ, AccessModifierConstant.PRIVATE))
	           when hostType().isEnumDecl()
	           to Program.accessibilityConstraints() for programRoot();
	
	// main has to be public
	syn lazy boolean MethodDecl.isMainMethod() =
		name().equals("main") && isStatic() && isPublic() && getNumParameter() == 1 && getParameter(0).type().isArrayDecl() &&
		    ((ArrayDecl)getParameter(0).type()).elementType().isString();
	
	MethodDecl contributes Collections.singleton(new AccessibilityConstraint(this, this, Operator.EQ, AccessModifierConstant.PUBLIC))
	           when isMainMethod()
	           to Program.accessibilityConstraints() for programRoot();
}