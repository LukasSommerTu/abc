/*
 * The Rename Type refactoring
 */

aspect RenameType {
	
	public void TypeDecl.rename(String new_name) throws RefactoringException {
		if(getID().equals(new_name))
			return;
		CompilationUnit cu = compilationUnit();
		checkRenamingPreconds(new_name);
		String old_name = getID();
		AdjustmentTable table = findEndangeredTypes(new_name);
		changeID(new_name);
		programRoot().flushCaches();
		table.adjust();
		// for toplevel types, we might need to change the name of the containing
		// compilation unit
		if(isTopLevelType() && cu.getID().equals(old_name)) {
			/* sometimes an old copy of cu might be reloaded by the type lookup
			 * mechanism; we need to get rid of it */
			for(int i=0;i<programRoot().getNumCompilationUnit();++i) {
				CompilationUnit cu2 = programRoot().getCompilationUnit(i);
				if(cu2.fromSource() && cu != cu2 && 
						cu2.relativeName().equals(cu.relativeName())) {
					programRoot().getCompilationUnitList().removeChild(i);
					break;
				}
			}
			cu.changeID(new_name);
		}
	}
	
	private AdjustmentTable TypeDecl.findEndangeredTypes(String new_name) {
		AdjustmentTable table = new AdjustmentTable();
		programRoot().findEndangeredTypes(table, name(), new_name);
		return table;
	}
	
	protected void ASTNode.findEndangeredTypes(AdjustmentTable tbl, 
												String oldname, String newname) {
		for(int i=0;i<getNumChild();++i)
			getChild(i).findEndangeredTypes(tbl, oldname, newname);
	}
	
	protected void TypeAccess.findEndangeredTypes(AdjustmentTable table, 
												String oldname, String newname) {
		String name = name();
		if(name.equals(oldname))
			table.addFront(this);
		else if(name.equals(newname))
			table.add(this);
		String pkg = getPackage();
		if(pkgNameStartsWith(pkg, oldname))
			table.addFront(this);
		else if(pkgNameStartsWith(pkg, newname))
			table.add(this);
	}
	
	protected void ArrayTypeAccess.findEndangeredTypes(AdjustmentTable table, 
												String oldname, String newname) {
		for(int i=0;i<getNumChild();++i)
			getChild(i).findEndangeredTypes(table, oldname, newname);
	}
	
	protected void BoundTypeAccess.findEndangeredTypes(AdjustmentTable table,
												String oldname, String newname) {
		// nothing to be done here
	}
	
	protected void PackageAccess.findEndangeredTypes(AdjustmentTable table,
												String oldname, String newname) {
		String pkg = name();
		if(pkgNameStartsWith(pkg, oldname))
			table.addFront(this);
		else if(pkgNameStartsWith(pkg, newname))
			table.add(this);
	}
	
	private void TypeDecl.checkRenamingPreconds(String new_name) throws RefactoringException {
        if(hasNestedType(new_name))
            throw new RefactoringException("nested type of the same name exists");
		if(isNestedType()) {
			TypeDecl enc = enclosingType();
			if(!enc.memberTypes(new_name).isEmpty())
				throw new RefactoringException("type of the same name exists in enclosing type");
			if(hasEnclosingType(new_name))
				throw new RefactoringException("enclosing type of the same name exists");
		} else if(isTopLevelType()) {
			String pkg = hostPackage();
            if(lookupType(pkg, new_name) != null)
				throw new RefactoringException("type of the same name exists in enclosing package");
			if(programRoot().hasPackage(pkg+"."+new_name))
				throw new RefactoringException("sub-package of the same name exists in enclosing package");
		}
	}
	
    private boolean TypeDecl.hasNestedType(String name) {
        for(int i=0;i<getNumBodyDecl();++i) {
            BodyDecl d = getBodyDecl(i);
            if(d instanceof MemberTypeDecl) {
                TypeDecl a = ((MemberTypeDecl)d).typeDecl();
                if(a.getID().equals(name) || a.hasNestedType(name))
                    return true;
            }
        }
        return false;
    }
    
    private boolean TypeDecl.hasEnclosingType(String name) {
    	if(!isNestedType()) return false;
    	TypeDecl enc = enclosingType();
    	if(enc.getID().equals(name))
    		return true;
    	return enc.hasEnclosingType(name);
    }
	
}