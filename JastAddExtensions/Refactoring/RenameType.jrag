/*
 * The Rename Type refactoring
 */

aspect RenameType {
	
	public void TypeDecl.rename(String new_name) throws RefactoringException {
		if(getID().equals(new_name))
			return;
		CompilationUnit cu = compilationUnit();
		checkRenamingPreconds(new_name);
		String old_name = getID();
		AdjustmentTable table = find_uses(new_name);
		changeID(new_name);
		programRoot().flushCaches();
		table.adjust();
		// for toplevel types, we might need to change the name of the containing
		// compilation unit
		if(isTopLevelType() && cu.getID().equals(old_name)) {
			/* sometimes an old copy of cu might be reloaded by the type lookup
			 * mechanism; we need to get rid of it */
			for(int i=0;i<programRoot().getNumCompilationUnit();++i) {
				CompilationUnit cu2 = programRoot().getCompilationUnit(i);
				if(cu2.fromSource() && cu != cu2 && 
						cu2.relativeName().equals(cu.relativeName())) {
					programRoot().getCompilationUnitList().removeChild(i);
					break;
				}
			}
			cu.changeID(new_name);
		}
	}
	
	private AdjustmentTable TypeDecl.find_uses(String new_name) {
		AdjustmentTable table = new AdjustmentTable();
		/* first, collect all uses of the field we are renaming */
		for(Iterator i = uses().iterator(); i.hasNext();) {
			Access acc = (Access)i.next();
			table.add(acc);
		}
		/* now, collect all uses of fields and types that the variable
		 * might be shadowing after renaming, in this class or any descendant */
		if(this.isNestedType()) {
			Collection descendants = enclosingType().descendants();
			for(Iterator i = descendants.iterator(); i.hasNext();) {
				TypeDecl td = (TypeDecl)i.next();
				find_shadowed_in(new_name, td, table);
			}
		} else {
			for(Iterator i = lookupType(new_name).iterator(); i.hasNext();) {
				TypeDecl d = (TypeDecl)i.next();
				for(Iterator j = d.uses().iterator(); j.hasNext();) {
					Access acc = (Access)j.next();
					table.add(acc);
				}
			}
		}
		// same for packages
		PackageDecl pd = programRoot().getPackageDecl(new_name);
		if(pd != null)
			for(Iterator j = pd.prefixUses().iterator(); j.hasNext();) {
				Access acc = (Access)j.next();
				if(acc.nameType() == NameType.AMBIGUOUS_NAME ||
						acc.nameType() == NameType.PACKAGE_OR_TYPE_NAME)
					table.add(acc);
			}
		return table;
	}
	
	public AdjustmentTable TypeDecl.find_shadowed_in(String new_name,
			TypeDecl td, AdjustmentTable table) {
		if(td.getNumBodyDecl() == 0)
			return table;
		BodyDecl fst = td.getBodyDecl(0);
		for(Iterator i = td.lookupType(new_name).iterator(); i.hasNext();) {
			TypeDecl d = (TypeDecl)i.next();
			for(Iterator j = d.uses().iterator(); j.hasNext();) {
				Access acc = (Access)j.next();
				table.add(acc);
			}
		}
		return table;
	}

	private void TypeDecl.checkRenamingPreconds(String new_name) throws RefactoringException {
        if(hasNestedType(new_name))
            throw new RefactoringException("nested type of the same name exists");
		if(isNestedType()) {
			TypeDecl enc = enclosingType();
			if(!enc.memberTypes(new_name).isEmpty())
				throw new RefactoringException("type of the same name exists in enclosing type");
			if(hasEnclosingType(new_name))
				throw new RefactoringException("enclosing type of the same name exists");
		} else if(isTopLevelType()) {
			String pkg = hostPackage();
            if(lookupType(pkg, new_name) != null)
				throw new RefactoringException("type of the same name exists in enclosing package");
			if(programRoot().hasPackage(pkg+"."+new_name))
				throw new RefactoringException("sub-package of the same name exists in enclosing package");
		}
	}
	
    private boolean TypeDecl.hasNestedType(String name) {
        for(int i=0;i<getNumBodyDecl();++i) {
            BodyDecl d = getBodyDecl(i);
            if(d instanceof MemberTypeDecl) {
                TypeDecl a = ((MemberTypeDecl)d).typeDecl();
                if(a.getID().equals(name) || a.hasNestedType(name))
                    return true;
            }
        }
        return false;
    }
    
    private boolean TypeDecl.hasEnclosingType(String name) {
    	if(!isNestedType()) return false;
    	TypeDecl enc = enclosingType();
    	if(enc.getID().equals(name))
    		return true;
    	return enc.hasEnclosingType(name);
    }
	
}