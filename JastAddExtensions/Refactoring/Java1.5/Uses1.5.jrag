/* bind all name uses to their declarations */

aspect Uses {
	
	public Collection<VarAccess> Variable.collectedUses() {
		return uses();
	}
	
	// bind all uses of a variable to its declaration
	coll Collection<VarAccess> FieldDeclaration.uses() [new ArrayList<VarAccess>()] 
	                                                    with add;
	VarAccess contributes
	this when decl().sourceVariableDecl() instanceof FieldDeclaration
	to FieldDeclaration.uses() for (FieldDeclaration)decl().sourceVariableDecl();
	
	coll Collection<VarAccess> VariableDeclaration.uses() [new ArrayList<VarAccess>()] 
	                                                       with add;
	VarAccess contributes
	this when decl().sourceVariableDecl() instanceof VariableDeclaration
	to VariableDeclaration.uses() for (VariableDeclaration)decl().sourceVariableDecl();

	coll Collection<VarAccess> ParameterDeclaration.uses() [new ArrayList<VarAccess>()] 
	                                                        with add;
	VarAccess contributes
	this when decl().sourceVariableDecl() instanceof ParameterDeclaration
	to ParameterDeclaration.uses() for (ParameterDeclaration)decl().sourceVariableDecl();
	
	// bind all uses of a method to its declaration
	// since this is in general undecidable, we report
	// all uses that possibly might refer to it
	coll Collection<MethodAccess> MethodDecl.uses() [new ArrayList<MethodAccess>()] 
	                                                 with addAll;
	MethodAccess contributes
	this.asSet() to MethodDecl.uses() for decl().sourceMethodDecl();
	
	MethodDecl contributes uses() to MethodDecl.uses() for each overriders();
	
	protected HashSet ASTNode.asSet() {
		HashSet set = new HashSet();
		set.add(this);
		return set;
	}

	// collects all descendants of a type declaration, including itself
	coll Collection<TypeDecl> TypeDecl.descendants() circular [new HashSet<TypeDecl>()] 
	                                                           with addAll;
	TypeDecl contributes 
	this.asSet() to TypeDecl.descendants() for this;

	ClassDecl contributes
	descendants() when hasSuperclass()
	to TypeDecl.descendants() for superclass();
	
	ClassDecl contributes
	descendants() 
	to TypeDecl.descendants() for each interfaces();
	
	InterfaceDecl contributes
	descendants() 
	to TypeDecl.descendants() for each superInterfaces();
	
	// retrieve all interfaces implemented by a class declaration
	public Collection ClassDecl.interfaces() {
		Collection res = new LinkedList();
		for(Iterator i=interfacesIterator();i.hasNext();)
			res.add(i.next());
		return res;
	}
	
	// retrieve all interfaces extended by an interface declaration
	public Collection InterfaceDecl.superInterfaces() {
		Collection res = new LinkedList();
		for(Iterator i=superinterfacesIterator();i.hasNext();)
			res.add(i.next());
		return res;
	}
	
	// collect all method declarations overriding a given method declaration
	coll HashSet MethodDecl.overriders() [new HashSet()] with add;
	MethodDecl contributes this to MethodDecl.overriders() for each overrides();
	
	// get all method declarations overridden by a given method declaration
	syn lazy SimpleSet MethodDecl.overrides() {
		SimpleSet anc = SimpleSet.emptySet;
		for(Iterator i=hostType().ancestorMethods(signature()).iterator();i.hasNext();) {
			MethodDecl md = (MethodDecl)i.next();
			if(overrides(md))
				anc = anc.add(md);
		}
		return anc;
	}

	// bind all uses of a type to its declaration
	coll Collection TypeDecl.uses() [new ArrayList()] with add;
	TypeAccess contributes
	this to TypeDecl.uses() for (TypeDecl)decl().sourceTypeDecl();
	
	public static boolean ASTNode.pkgNameStartsWith(String pkg, String str) {
		int strlength = str.length();
		return	pkg.startsWith(str) &&
				(pkg.length() == strlength ||
				 pkg.charAt(strlength) == '.');
 	}
	
	eq Program.getChild().findPackageDecl(String name) = getPackageDecl(name);
	inh PackageDecl Access.findPackageDecl(String name);
	
	syn nta PackageDecl Program.getPackageDecl(String name) {
		// the following gives null-pointer exceptions in generated code
		//return hasPackage(name) ? new PackageDecl(name) : null;
		return new PackageDecl(name);
	}

}
