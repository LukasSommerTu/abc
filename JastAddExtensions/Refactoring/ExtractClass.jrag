/*
 * ExtractClass extracts fields into a new nested class.
 * If fields were initialised, their value is passed to 
 * the constructor of the new class.
 */
aspect ExtractClass {
		
	public void ClassDecl.extractClass(FieldDeclaration[] fds, String newClassName, String newFieldName) throws RefactoringException {
		ClassDecl wrapperClass = this.createNewStaticMemberClassWithDefaultConstructor(newClassName);
		FieldDeclaration wrapperField = this.createNewPublicMemberField(wrapperClass.createBoundAccess(), newFieldName);
		// wrap all fds into wrapperClass
		AdjustmentTable table = new AdjustmentTable();
		ArrayList<FieldDeclaration> wrappedFields = new ArrayList<FieldDeclaration>();
		for (FieldDeclaration fd: fds) {
			if (fd.getModifiers().isStatic()) {
				throw new RefactoringException("cannot extract a static field");
			}
			wrappedFields.add(this.wrapField(table,fd,wrapperClass,wrapperField));
		}
		programRoot().flushCaches();
		table.adjust();
		// encapsulates all involved fields
		wrapperField.encapsulate();
		for (FieldDeclaration wrappedField: wrappedFields) {
			wrappedField.encapsulate();
		}
	}
	
	public ClassDecl ClassDecl.createNewStaticMemberClassWithDefaultConstructor(String className) throws RefactoringException {
		AdjustmentTable table = new AdjustmentTable();
		programRoot().findEndangeredTypeAccesses(table, className, className);
		Modifiers modifiers = new Modifiers();
		modifiers.addModifier(new Modifier("static"));
		ClassDecl cd = new ClassDecl(modifiers, className, new Opt(), new List(), new List());
		cd.addConstructor(new ConstructorDecl(new Modifiers(), className, new List(), new List(), new Opt(), new Block()));
		this.addMemberClass(cd);
		programRoot().flushCaches();
		table.adjust();
		return cd;
	}
	
	public FieldDeclaration ClassDecl.createNewPublicMemberField(Access typeAccess, String fieldName) throws RefactoringException {
		AdjustmentTable table = new AdjustmentTable();
		programRoot().findEndangeredVarAccesses(table, fieldName, fieldName);
		Expr expr = new ClassInstanceExpr(typeAccess, new List(), new Opt()); 
		Modifiers modifiers = new Modifiers();
		modifiers.addModifier(new Modifier("public"));
		FieldDeclaration fd = new FieldDeclaration(modifiers, typeAccess, fieldName, expr);
		this.addMemberField(fd);
		programRoot().flushCaches();
		table.adjust();
		return fd;
	}
	
	// assumes wrapperField is initialised in the program tree with an instance of wrapperClass
	public FieldDeclaration ClassDecl.wrapField(AdjustmentTable table, FieldDeclaration toMove, 
			                                    ClassDecl wrapperClass, FieldDeclaration wrapperField) throws RefactoringException {
		String fieldName = toMove.name();
		// create newField in wrapperClass
		FieldDeclaration newField = new FieldDeclaration(toMove.getModifiers().fullCopy(), 
				toMove.getLockedTypeAccess(table), fieldName, new Opt());
		wrapperClass.addMemberField(newField);
		// pass init expr in constructor if needed
		if (toMove.hasInit()) { 
			ConstructorDecl cons = wrapperClass.getConstructor();
			ParameterDeclaration parameter = new ParameterDeclaration(toMove.getLockedTypeAccess(table),fieldName);
			cons.addParameter(parameter);
			Expr init = (Expr)toMove.getInit().fullCopy();
			((ClassInstanceExpr)wrapperField.getInit()).getArgList().add(init);
			VarAccess left = newField.createLockedVarAccess(table);
			VarAccess right = parameter.createLockedVarAccess(table);
			cons.getBlock().addStmt(new ExprStmt(new AssignSimpleExpr(left,right)));
		}
		// replace all uses to proxy uses
		Collection uses = toMove.uses();
		for(Iterator i = uses.iterator(); i.hasNext();) {
			VarAccess va = (VarAccess)i.next();
			VarAccess q = wrapperField.createLockedVarAccess(table);
			va.replaceWith(q.qualifiesAccess(va.fullCopy()));
		}
		// remove old field
		toMove.hostType().removeOldField(toMove);
		return newField;
	}
	
	public void TypeDecl.removeOldField(BodyDecl bd) {
		removeBodyDecl(bd);
	}
	
	public TypeAccess FieldDeclaration.getLockedTypeAccess(AdjustmentTable table) {
		TypeAccess typeAccess = (TypeAccess)this.getTypeAccess().fullCopy();
		typeAccess.lockOn(this.type());
		table.add(typeAccess);
		return typeAccess;
	}
	
	public VarAccess Variable.createLockedVarAccess(AdjustmentTable table) {
		VarAccess varAccess = new VarAccess(this.name());
		varAccess.lockOn(this);
		table.add(varAccess);
		return varAccess;
	}
	
	public ConstructorDecl ClassDecl.getConstructor() {
		for(BodyDecl bd: this.getBodyDeclList()) {
			if (bd instanceof ConstructorDecl) return (ConstructorDecl) bd;
		}
		return null;
	}
		
}