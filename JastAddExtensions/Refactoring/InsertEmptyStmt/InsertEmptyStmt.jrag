/* The Insert Empty Statement refactoring inserts an empty statement
 * before or after a given statement. This trivially preserves semantics,
 * but some care has to be taken to preserve compilability. */
aspect InsertEmptyStmt {
	inh EmptyStmt Stmt.insertEmptyStmtBefore();
	eq Program.getChild().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq ConstructorDecl.getConstructorInvocation().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq LabeledStmt.getStmt().insertEmptyStmtBefore() = insertEmptyStmtBefore();
	eq Block.getStmt(int i).insertEmptyStmtBefore() {
		EmptyStmt e = new EmptyStmt();
		getStmtList().insertChild(e, i);
		return e;
	}
	eq IfStmt.getThen().insertEmptyStmtBefore() {
		EmptyStmt e = new EmptyStmt();
		setThen(new Block(new List<Stmt>().add(e).add(getThen())));
		return e;
	}
	eq IfStmt.getElse().insertEmptyStmtBefore() {
		EmptyStmt e = new EmptyStmt();
		setElse(new Block(new List<Stmt>().add(e).add(getElse())));
		return e;
	}
	eq WhileStmt.getStmt().insertEmptyStmtBefore() {
		EmptyStmt e = new EmptyStmt();
		setStmt(new Block(new List<Stmt>().add(e).add(getStmt())));
	}
	eq DoStmt.getStmt().insertEmptyStmtBefore() {
		EmptyStmt e = new EmptyStmt();
		setStmt(new Block(new List<Stmt>().add(e).add(getStmt())));
	}
	eq ForStmt.getInitStmt().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq ForStmt.getUpdateStmt().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq ForStmt.getStmt().insertEmptyStmtBefore() {
		EmptyStmt e = new EmptyStmt();
		setStmt(new Block(new List<Stmt>().add(e).add(getStmt())));
	}
	eq EnhancedForStmt.getVariableDeclaration().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq EnhancedForStmt.getStmt().insertEmptyStmtBefore() {
		EmptyStmt e = new EmptyStmt();
		setStmt(new Block(new List<Stmt>().add(e).add(getStmt())));
	}
	eq InstanceInitializer.getBlock().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq StaticInitializer.getBlock().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq ConstructorDecl.getBlock().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq MethodDecl.getBlock().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq SwitchStmt.getBlock().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq SynchronizedStmt.getBlock().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq TryStmt.getBlock().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq TryStmt.getFinally().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	eq CatchClause.getBlock().insertEmptyStmtBefore() { throw new RefactoringException("cannot insert statement here"); }
	
	inh EmptyStmt Stmt.insertEmptyStmtAfter();
	eq Program.getChild().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq ConstructorDecl.getConstructorInvocation().insertEmptyStmtAfter() {
		EmptyStmt e = new EmptyStmt();
		getBlock().insertChild(e, 0);
		return e;
	}
	eq LabeledStmt.getStmt().insertEmptyStmtAfter() = insertEmptyStmtAfter();
	eq Block.getStmt(int i).insertEmptyStmtAfter() {
		if(!getStmt(i).canCompleteNormally())
			throw new RefactoringException("cannot insert statement here");
		EmptyStmt e = new EmptyStmt();
		getStmtList().insertChild(e, i+1);
		return e;
	}
	eq IfStmt.getThen().insertEmptyStmtAfter() {
		if(!getThen().canCompleteNormally())
			throw new RefactoringException("cannot insert statement here");
		EmptyStmt e = new EmptyStmt();
		setThen(new Block(new List<Stmt>().add(getThen()).add(e)));
		return e;
	}
	eq IfStmt.getElse().insertEmptyStmtAfter() {
		if(!getElse().canCompleteNormally())
			throw new RefactoringException("cannot insert statement here");
		EmptyStmt e = new EmptyStmt();
		setElse(new Block(new List<Stmt>().add(getElse()).add(e)));
		return e;
	}
	eq WhileStmt.getStmt().insertEmptyStmtAfter() {
		if(!getStmt().canCompleteNormally())
			throw new RefactoringException("cannot insert statement here");
		EmptyStmt e = new EmptyStmt();
		setStmt(new Block(new List<Stmt>().add(getStmt()).add(e)));
	}
	eq DoStmt.getStmt().insertEmptyStmtAfter() {
		if(!getStmt().canCompleteNormally())
			throw new RefactoringException("cannot insert statement here");
		EmptyStmt e = new EmptyStmt();
		setStmt(new Block(new List<Stmt>().add(getStmt()).add(e)));
	}
	eq ForStmt.getInitStmt().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq ForStmt.getUpdateStmt().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq ForStmt.getStmt().insertEmptyStmtAfter() {
		if(!getStmt().canCompleteNormally())
			throw new RefactoringException("cannot insert statement here");
		EmptyStmt e = new EmptyStmt();
		setStmt(new Block(new List<Stmt>().add(getStmt()).add(e)));
	}
	eq EnhancedForStmt.getVariableDeclaration().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq EnhancedForStmt.getStmt().insertEmptyStmtAfter() {
		if(!getStmt().canCompleteNormally())
			throw new RefactoringException("cannot insert statement here");
		EmptyStmt e = new EmptyStmt();
		setStmt(new Block(new List<Stmt>().add(getStmt()).add(e)));
	}
	eq InstanceInitializer.getBlock().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq StaticInitializer.getBlock().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq ConstructorDecl.getBlock().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq MethodDecl.getBlock().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq SwitchStmt.getBlock().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq SynchronizedStmt.getBlock().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq TryStmt.getBlock().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq TryStmt.getFinally().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
	eq CatchClause.getBlock().insertEmptyStmtAfter() { throw new RefactoringException("cannot insert statement here"); }
}