aspect IntroduceOutParameter {

	public AnonymousMethod AnonymousMethod.introduceOutParameter() {
		eliminateVarargs();
		programRoot().flushCaches();
		if(!(getParent() instanceof AssignSimpleExpr))
			return this;
		AssignSimpleExpr parent = (AssignSimpleExpr)getParent();
		if(!(parent.getDest() instanceof VarAccess))
			throw new RefactoringException("cannot introduce non-variable out parameter");
		VarAccess v = (VarAccess)parent.getDest();
		getBlock().lockDataFlow();
		setReturnType(new PrimitiveTypeAccess("void"));
		ParameterDeclaration pd = new FreshParameter(new Modifiers("out"), v.type().createLockedAccess(), "res");
		addParameter(pd);
		addArg(v.decl().createLockedAccess());
		getBlock().addAssignToReturns(pd);
		parent.replaceWith(this);
		hostType().flushCaches();
		return this;
	}
	
	public void AnonymousMethod.eliminateVarargs() {
		if(!isVariableArity())
			return;
		VariableArityParameterDeclaration last = (VariableArityParameterDeclaration)lastParameter();
		ParameterDeclaration new_last = last.asFixedArityParameter();
		for(VarAccess va : last.uses())
			if(va.isLocked())
				va.lock(new_last);
		setParameter(new_last, getNumParameter()-1);
		if(!invokesVariableArityAsArray()) {
			List<Expr> varargs = new List<Expr>();
			for(int i=getNumArg()-1; i>getNumParameter()-1;--i) {
				Expr arg = getArg(i);
				removeArg(i);
				varargs.insertChild(arg, 0);
			}
			varargs.insertChild(getArg(getNumParameter()-1), 0);
			setArg(new ArrayCreationExpr(last.type().createLockedAccess(), new Opt(new ArrayInit(varargs))), getNumParameter()-1);
		}
	}

	public void ASTNode.addAssignToReturns(Variable v) {
		for(int i=0;i<getNumChild();++i) {
			ASTNode child = getChild(i);
			if(child != null)
				child.addAssignToReturns(v);
		}
	}

	// turn a return statement
	//    return e;
	// into
	//    v = e;
	//    return;
	public void ReturnStmt.addAssignToReturns(Variable v) {
		if(hasResult()) {
			insertStmtBefore(AssignExpr.asStmt(v.createLockedAccess(), getResult()));
			setResultOpt(new Opt());
			hostType().flushCaches();
		}
	}

	public void ParameterDeclaration.makeOut() {
		if(isWrite())
			return;
		getModifiers().addModifier(new Modifier("out"));
	}
}