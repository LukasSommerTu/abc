aspect ChangeParameterType {
	public void ParameterDeclaration.changeType(TypeDecl newType) {
		if(!type().subtype(newType))
			throw new RefactoringException("unsupported type change");
		
		Program root = programRoot();
		Collection<TypeConstraint> constraints = root.typeConstraints(type());
		
		Collection<TypeConstraintVariable> update = propagateGeneralisation(constraints, this.getTypeAccess(), newType);
		
		Collection<String> affectedMethods = new HashSet<String>();
		Collection<TypeDecl> affectedConstructors = new HashSet<TypeDecl>();
		
		for(TypeConstraintVariable tcv : update) {
			if(tcv.getTypedDecl() instanceof ParameterDeclaration) {
				Callable c = ((ParameterDeclaration)tcv.getTypedDecl()).getParameterisedCallable();
				if(c instanceof MethodDecl)
					affectedMethods.add(((MethodDecl)c).name());
				else if(c instanceof ConstructorDecl)
					affectedConstructors.add(((ConstructorDecl)c).hostType());
			}
			if(tcv instanceof Expr) {
				Expr e = (Expr)tcv;
				if(e.isLeftChildOfDot() && e.nextAccess() instanceof MethodAccess) {
					MethodAccess ma = (MethodAccess)e.nextAccess();
					ma.lock(ma.decl().ancestorIn(newType));
				}
			}
		}
		
		root.lockMethodNames(affectedMethods);
		root.lockConstructorCalls(affectedConstructors);
		root.lockOverridingDependencies(affectedMethods);
		
		for(TypeConstraintVariable tcv : update) {
			TypedDeclaration td = tcv.getTypedDecl();
			if(td != null) {
				if(!td.canChangeType())
					throw new RefactoringException("type cannot be changed");
				td.setTypeAccess(newType.createLockedAccess());
			}
		}
		
		root.flushCaches();
		
		root.eliminate(LOCKED_NAMES, LOCKED_OVERRIDING);
	}

	syn boolean TypedDeclaration.canChangeType();
	eq MethodDecl.canChangeType() = fromSource() && !isNative();
	syn boolean Variable.canChangeType(); 
	eq FieldDeclaration.canChangeType() = fromSource();
	eq ParameterDeclaration.canChangeType() = fromSource() && (!(getParent().getParent() instanceof MethodDecl) || !((MethodDecl)getParent().getParent()).isNative());
	eq VariableDeclaration.canChangeType() = fromSource();
}