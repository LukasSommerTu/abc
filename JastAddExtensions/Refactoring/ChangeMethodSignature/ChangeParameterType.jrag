aspect ChangeParameterType {
	public void MethodDecl.changeParameterType(int idx, TypeDecl newType) {
		if(idx < 0 || idx >= getNumParameter())
			throw new RefactoringException("invalid parameter index");
		ParameterDeclaration pd = getParameter(idx);
		if(!pd.type().subtype(newType))
			throw new RefactoringException("unsupported refactoring");
		Collection<TypeConstraint> constraints = programRoot().typeConstraints();
		programRoot().lockMethodNames(name());
		programRoot().lockOverridingDependencies(name());
		
		TypeConstraintSystem s = new TypeConstraintSystem(constraints, pd, newType);
		Collection<TypedDeclaration> update = s.solve();
		
		for(TypedDeclaration td : update) {
			if(!td.canChangeType())
				throw new RefactoringException("type cannot be changed");
			td.setTypeAccess(newType.createLockedAccess());
		}
		
		programRoot().eliminate(LOCKED_NAMES, LOCKED_OVERRIDING);
	}
	
	syn boolean TypedDeclaration.canChangeType();
	eq MethodDecl.canChangeType() = fromSource() && !isNative();
	syn boolean Variable.canChangeType(); 
	eq FieldDeclaration.canChangeType() = fromSource();
	eq ParameterDeclaration.canChangeType() = fromSource() && (!(getParent().getParent() instanceof MethodDecl) || !((MethodDecl)getParent().getParent()).isNative());
	eq VariableDeclaration.canChangeType() = fromSource();
}