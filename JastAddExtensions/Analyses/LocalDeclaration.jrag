aspect LocalDeclaration {
	
	// a local declaration is either a variable declaration or a parameter declaration
	
	interface LocalDeclaration { 
		Access getTypeAccess();
		String getID();
		Block getBlock();
		ParameterDeclaration asParameterDeclaration();
		VariableDeclaration asVariableDeclaration();
	}
	
	ParameterDeclaration implements LocalDeclaration;
	VariableDeclaration implements LocalDeclaration;
	
	public ParameterDeclaration ParameterDeclaration.asParameterDeclaration() {
		return (ParameterDeclaration)fullCopy();
	}
	
	public ParameterDeclaration VariableDeclaration.asParameterDeclaration() {
		return new ParameterDeclaration((Access)getTypeAccess().fullCopy(), getID());
	}
	
	public VariableDeclaration ParameterDeclaration.asVariableDeclaration() {
		return new VariableDeclaration((Access)getTypeAccess().fullCopy(), getID());
	}
	
	public VariableDeclaration VariableDeclaration.asVariableDeclaration() {
		return (VariableDeclaration)fullCopy();
	}
	
	inh Collection Stmt.visibleLocalDecls();
	inh Collection CatchClause.visibleLocalDecls();
	
	eq TypeDecl.getChild().visibleLocalDecls() = new ArrayList();
	eq MethodDecl.getBlock().visibleLocalDecls() {
		ArrayList decls = new ArrayList();
		for(int i=0;i<getNumParameter();++i)
			decls.add(getParameter(i));
		return decls;
	}
	eq Block.getStmt(int k).visibleLocalDecls() {
		Collection decls = visibleLocalDecls();
		decls.addAll(localDeclsBetween(0,k-1));
		return decls;
	}
	eq CatchClause.getBlock().visibleLocalDecls() {
		Collection decls = visibleLocalDecls();
		decls.add(getParameter());
		return decls;
	}
	eq ForStmt.getStmt().visibleLocalDecls() {
		Collection decls = visibleLocalDecls();
		for(int i=0;i<getNumInitStmt();++i)
			if(getInitStmt(i) instanceof VariableDeclaration)
				decls.add(getInitStmt(i));
		return decls;
	}
	
	syn Collection Block.localDeclsBetween(int start, int end) {
		ArrayList decls = new ArrayList();
		for(int i=start;i<=end;++i)
			if(getStmt(i) instanceof VariableDeclaration)
				decls.add(getStmt(i));
		return decls;
	}
	
}