aspect ASTUtil {

	// provide access to the program root
	eq Program.getChild().programRoot() = this;
	inh Program FieldDeclaration.programRoot();
	inh Program TypeDecl.programRoot();
	inh Program ParameterDeclaration.programRoot();
	inh Program MethodDecl.programRoot();
	inh Program VariableDeclaration.programRoot();
	
	// provide access to the enclosing compilation unit
	eq CompilationUnit.getChild().compilationUnit() = this;
	inh CompilationUnit TypeDecl.compilationUnit();
	
	inh SimpleSet ParameterDeclaration.lookupType(String name);
	
	// clear all attribute values in this subtree to force reevaluation of attributes after destructive updates
	public void ASTNode.clear() {
		flushCache();
		for(int i = 0; i < getNumChild(); i++)
			getChild(i).clear();
	}

	// imperative transformation of the AST
    //	syntax ASTNode.replace(sourcenode).with(destnode)

	protected static ASTNode ASTNode.replace(ASTNode node) {
		replacePos = node.getParent().getIndexOfChild(node);
		return node.getParent();
	}
	protected ASTNode ASTNode.with(ASTNode node) {
		setChild(node, replacePos);
		return node;
	}

	private static int ASTNode.replacePos = 0;
	
    /*public void ASTNode.removeChild(int i) {
    	if(i >= numChildren || children == null)
    		return;
    	ASTNode child = children[i];
    	if(i < numChildren-1)
    		System.arraycopy(children, i+1, children, i, numChildren-(i+1));
    	numChildren--;
    	if(child != null) {
    		child.setParent(null);
    		child.childIndex = -1;
    	}
	}*/
    
    public void List.remove(ASTNode n) {
    	for(int i=0;i<getNumChild();++i)
    		if(getChild(i) == n) {
    			removeChild(i);
    			break;
    		}
    }

    syn lazy String CompilationUnit.getID() {
    	char pathsep = File.separatorChar;
    	String path = pathName();
    	int i = path.lastIndexOf(pathsep);
    	String relname_tail = i == -1 ? path : path.substring(i+1);
    	int j = relname_tail.lastIndexOf(".");
    	return relname_tail.substring(0, j);	 		
    }


}