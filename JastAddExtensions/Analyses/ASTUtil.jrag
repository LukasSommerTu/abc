aspect ASTUtil {
	
	public Collection List.toCollection() {
		Collection children = new ArrayList();
		for(int i=0;i<getNumChild();++i)
			children.add(getChild(i));
		return children;
	}
	
	public static List List.ofCollection(Collection c) {
		return new List().addAll(c);
	}
	
	public List List.addAll(Collection c) {
		for(Iterator i=c.iterator();i.hasNext();)
			add((ASTNode)i.next());
		return this;
	}
	
	public int ASTNode.indexIn(ASTNode n) {
		if(getParent() == n)
			return getParent().getIndexOfChild(this);
		if(getParent() == null)
			return -1;
		return getParent().indexIn(n);
	}
	
	public boolean ASTNode.inside(ASTNode n) {
		return indexIn(n) != -1;
	}
	
	public boolean Opt.isEmpty() {
		return getNumChild() == 0;
	}
	
}